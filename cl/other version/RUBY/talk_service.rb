#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'b_e_service_types'

module TalkService
  class Client
    include ::Thrift::Client

    def acceptChatInvitation(request)
      send_acceptChatInvitation(request)
      return recv_acceptChatInvitation()
    end

    def send_acceptChatInvitation(request)
      send_message('acceptChatInvitation', AcceptChatInvitation_args, :request => request)
    end

    def recv_acceptChatInvitation()
      result = receive_message(AcceptChatInvitation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acceptChatInvitation failed: unknown result')
    end

    def acceptChatInvitationByTicket(request)
      send_acceptChatInvitationByTicket(request)
      return recv_acceptChatInvitationByTicket()
    end

    def send_acceptChatInvitationByTicket(request)
      send_message('acceptChatInvitationByTicket', AcceptChatInvitationByTicket_args, :request => request)
    end

    def recv_acceptChatInvitationByTicket()
      result = receive_message(AcceptChatInvitationByTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acceptChatInvitationByTicket failed: unknown result')
    end

    def blockContact(reqSeq, id)
      send_blockContact(reqSeq, id)
      recv_blockContact()
    end

    def send_blockContact(reqSeq, id)
      send_message('blockContact', BlockContact_args, :reqSeq => reqSeq, :id => id)
    end

    def recv_blockContact()
      result = receive_message(BlockContact_result)
      raise result.e unless result.e.nil?
      return
    end

    def cancelChatInvitation(request)
      send_cancelChatInvitation(request)
      return recv_cancelChatInvitation()
    end

    def send_cancelChatInvitation(request)
      send_message('cancelChatInvitation', CancelChatInvitation_args, :request => request)
    end

    def recv_cancelChatInvitation()
      result = receive_message(CancelChatInvitation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cancelChatInvitation failed: unknown result')
    end

    def createChat(request)
      send_createChat(request)
      return recv_createChat()
    end

    def send_createChat(request)
      send_message('createChat', CreateChat_args, :request => request)
    end

    def recv_createChat()
      result = receive_message(CreateChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createChat failed: unknown result')
    end

    def deleteSelfFromChat(request)
      send_deleteSelfFromChat(request)
      return recv_deleteSelfFromChat()
    end

    def send_deleteSelfFromChat(request)
      send_message('deleteSelfFromChat', DeleteSelfFromChat_args, :request => request)
    end

    def recv_deleteSelfFromChat()
      result = receive_message(DeleteSelfFromChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteSelfFromChat failed: unknown result')
    end

    def deleteOtherFromChat(request)
      send_deleteOtherFromChat(request)
      return recv_deleteOtherFromChat()
    end

    def send_deleteOtherFromChat(request)
      send_message('deleteOtherFromChat', DeleteOtherFromChat_args, :request => request)
    end

    def recv_deleteOtherFromChat()
      result = receive_message(DeleteOtherFromChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteOtherFromChat failed: unknown result')
    end

    def fetchOperations(request)
      send_fetchOperations(request)
      return recv_fetchOperations()
    end

    def send_fetchOperations(request)
      send_message('fetchOperations', FetchOperations_args, :request => request)
    end

    def recv_fetchOperations()
      result = receive_message(FetchOperations_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchOperations failed: unknown result')
    end

    def fetchOps(localRev, count, globalRev, individualRev)
      send_fetchOps(localRev, count, globalRev, individualRev)
      return recv_fetchOps()
    end

    def send_fetchOps(localRev, count, globalRev, individualRev)
      send_message('fetchOps', FetchOps_args, :localRev => localRev, :count => count, :globalRev => globalRev, :individualRev => individualRev)
    end

    def recv_fetchOps()
      result = receive_message(FetchOps_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchOps failed: unknown result')
    end

    def findAndAddContactsByMid(reqSeq, mid, type, reference)
      send_findAndAddContactsByMid(reqSeq, mid, type, reference)
      return recv_findAndAddContactsByMid()
    end

    def send_findAndAddContactsByMid(reqSeq, mid, type, reference)
      send_message('findAndAddContactsByMid', FindAndAddContactsByMid_args, :reqSeq => reqSeq, :mid => mid, :type => type, :reference => reference)
    end

    def recv_findAndAddContactsByMid()
      result = receive_message(FindAndAddContactsByMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactsByMid failed: unknown result')
    end

    def findAndAddContactsByUserid(reqSeq, searchId, reference)
      send_findAndAddContactsByUserid(reqSeq, searchId, reference)
      return recv_findAndAddContactsByUserid()
    end

    def send_findAndAddContactsByUserid(reqSeq, searchId, reference)
      send_message('findAndAddContactsByUserid', FindAndAddContactsByUserid_args, :reqSeq => reqSeq, :searchId => searchId, :reference => reference)
    end

    def recv_findAndAddContactsByUserid()
      result = receive_message(FindAndAddContactsByUserid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactsByUserid failed: unknown result')
    end

    def findContactByUserid(userid)
      send_findContactByUserid(userid)
      return recv_findContactByUserid()
    end

    def send_findContactByUserid(userid)
      send_message('findContactByUserid', FindContactByUserid_args, :userid => userid)
    end

    def recv_findContactByUserid()
      result = receive_message(FindContactByUserid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findContactByUserid failed: unknown result')
    end

    def findChatByTicket(request)
      send_findChatByTicket(request)
      return recv_findChatByTicket()
    end

    def send_findChatByTicket(request)
      send_message('findChatByTicket', FindChatByTicket_args, :request => request)
    end

    def recv_findChatByTicket()
      result = receive_message(FindChatByTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findChatByTicket failed: unknown result')
    end

    def getAllChatMids(request, syncReason)
      send_getAllChatMids(request, syncReason)
      return recv_getAllChatMids()
    end

    def send_getAllChatMids(request, syncReason)
      send_message('getAllChatMids', GetAllChatMids_args, :request => request, :syncReason => syncReason)
    end

    def recv_getAllChatMids()
      result = receive_message(GetAllChatMids_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllChatMids failed: unknown result')
    end

    def getProfile(syncReason)
      send_getProfile(syncReason)
      return recv_getProfile()
    end

    def send_getProfile(syncReason)
      send_message('getProfile', GetProfile_args, :syncReason => syncReason)
    end

    def recv_getProfile()
      result = receive_message(GetProfile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfile failed: unknown result')
    end

    def getContact(id)
      send_getContact(id)
      return recv_getContact()
    end

    def send_getContact(id)
      send_message('getContact', GetContact_args, :id => id)
    end

    def recv_getContact()
      result = receive_message(GetContact_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getContact failed: unknown result')
    end

    def getCountryWithRequestIp()
      send_getCountryWithRequestIp()
      return recv_getCountryWithRequestIp()
    end

    def send_getCountryWithRequestIp()
      send_message('getCountryWithRequestIp', GetCountryWithRequestIp_args)
    end

    def recv_getCountryWithRequestIp()
      result = receive_message(GetCountryWithRequestIp_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCountryWithRequestIp failed: unknown result')
    end

    def getServerTime()
      send_getServerTime()
      return recv_getServerTime()
    end

    def send_getServerTime()
      send_message('getServerTime', GetServerTime_args)
    end

    def recv_getServerTime()
      result = receive_message(GetServerTime_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getServerTime failed: unknown result')
    end

    def getContacts(ids)
      send_getContacts(ids)
      return recv_getContacts()
    end

    def send_getContacts(ids)
      send_message('getContacts', GetContacts_args, :ids => ids)
    end

    def recv_getContacts()
      result = receive_message(GetContacts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getContacts failed: unknown result')
    end

    def getAllContactIds(syncReason)
      send_getAllContactIds(syncReason)
      return recv_getAllContactIds()
    end

    def send_getAllContactIds(syncReason)
      send_message('getAllContactIds', GetAllContactIds_args, :syncReason => syncReason)
    end

    def recv_getAllContactIds()
      result = receive_message(GetAllContactIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllContactIds failed: unknown result')
    end

    def getChats(request)
      send_getChats(request)
      return recv_getChats()
    end

    def send_getChats(request)
      send_message('getChats', GetChats_args, :request => request)
    end

    def recv_getChats()
      result = receive_message(GetChats_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChats failed: unknown result')
    end

    def inviteIntoChat(request)
      send_inviteIntoChat(request)
      return recv_inviteIntoChat()
    end

    def send_inviteIntoChat(request)
      send_message('inviteIntoChat', InviteIntoChat_args, :request => request)
    end

    def recv_inviteIntoChat()
      result = receive_message(InviteIntoChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'inviteIntoChat failed: unknown result')
    end

    def reissueChatTicket(request)
      send_reissueChatTicket(request)
      return recv_reissueChatTicket()
    end

    def send_reissueChatTicket(request)
      send_message('reissueChatTicket', ReissueChatTicket_args, :request => request)
    end

    def recv_reissueChatTicket()
      result = receive_message(ReissueChatTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reissueChatTicket failed: unknown result')
    end

    def rejectChatInvitation(request)
      send_rejectChatInvitation(request)
      return recv_rejectChatInvitation()
    end

    def send_rejectChatInvitation(request)
      send_message('rejectChatInvitation', RejectChatInvitation_args, :request => request)
    end

    def recv_rejectChatInvitation()
      result = receive_message(RejectChatInvitation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'rejectChatInvitation failed: unknown result')
    end

    def sendMessage(seq, message)
      send_sendMessage(seq, message)
      return recv_sendMessage()
    end

    def send_sendMessage(seq, message)
      send_message('sendMessage', SendMessage_args, :seq => seq, :message => message)
    end

    def recv_sendMessage()
      result = receive_message(SendMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessage failed: unknown result')
    end

    def unsendMessage(seq, messageId)
      send_unsendMessage(seq, messageId)
      recv_unsendMessage()
    end

    def send_unsendMessage(seq, messageId)
      send_message('unsendMessage', UnsendMessage_args, :seq => seq, :messageId => messageId)
    end

    def recv_unsendMessage()
      result = receive_message(UnsendMessage_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateChat(request)
      send_updateChat(request)
      return recv_updateChat()
    end

    def send_updateChat(request)
      send_message('updateChat', UpdateChat_args, :request => request)
    end

    def recv_updateChat()
      result = receive_message(UpdateChat_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateChat failed: unknown result')
    end

    def updateProfileAttribute(reqSeq, attr, value)
      send_updateProfileAttribute(reqSeq, attr, value)
      recv_updateProfileAttribute()
    end

    def send_updateProfileAttribute(reqSeq, attr, value)
      send_message('updateProfileAttribute', UpdateProfileAttribute_args, :reqSeq => reqSeq, :attr => attr, :value => value)
    end

    def recv_updateProfileAttribute()
      result = receive_message(UpdateProfileAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_acceptChatInvitation(seqid, iprot, oprot)
      args = read_args(iprot, AcceptChatInvitation_args)
      result = AcceptChatInvitation_result.new()
      begin
        result.success = @handler.acceptChatInvitation(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acceptChatInvitation', seqid)
    end

    def process_acceptChatInvitationByTicket(seqid, iprot, oprot)
      args = read_args(iprot, AcceptChatInvitationByTicket_args)
      result = AcceptChatInvitationByTicket_result.new()
      begin
        result.success = @handler.acceptChatInvitationByTicket(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acceptChatInvitationByTicket', seqid)
    end

    def process_blockContact(seqid, iprot, oprot)
      args = read_args(iprot, BlockContact_args)
      result = BlockContact_result.new()
      begin
        @handler.blockContact(args.reqSeq, args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'blockContact', seqid)
    end

    def process_cancelChatInvitation(seqid, iprot, oprot)
      args = read_args(iprot, CancelChatInvitation_args)
      result = CancelChatInvitation_result.new()
      begin
        result.success = @handler.cancelChatInvitation(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'cancelChatInvitation', seqid)
    end

    def process_createChat(seqid, iprot, oprot)
      args = read_args(iprot, CreateChat_args)
      result = CreateChat_result.new()
      begin
        result.success = @handler.createChat(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createChat', seqid)
    end

    def process_deleteSelfFromChat(seqid, iprot, oprot)
      args = read_args(iprot, DeleteSelfFromChat_args)
      result = DeleteSelfFromChat_result.new()
      begin
        result.success = @handler.deleteSelfFromChat(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'deleteSelfFromChat', seqid)
    end

    def process_deleteOtherFromChat(seqid, iprot, oprot)
      args = read_args(iprot, DeleteOtherFromChat_args)
      result = DeleteOtherFromChat_result.new()
      begin
        result.success = @handler.deleteOtherFromChat(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'deleteOtherFromChat', seqid)
    end

    def process_fetchOperations(seqid, iprot, oprot)
      args = read_args(iprot, FetchOperations_args)
      result = FetchOperations_result.new()
      begin
        result.success = @handler.fetchOperations(args.request)
      rescue ::ThingsException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchOperations', seqid)
    end

    def process_fetchOps(seqid, iprot, oprot)
      args = read_args(iprot, FetchOps_args)
      result = FetchOps_result.new()
      begin
        result.success = @handler.fetchOps(args.localRev, args.count, args.globalRev, args.individualRev)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchOps', seqid)
    end

    def process_findAndAddContactsByMid(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactsByMid_args)
      result = FindAndAddContactsByMid_result.new()
      begin
        result.success = @handler.findAndAddContactsByMid(args.reqSeq, args.mid, args.type, args.reference)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactsByMid', seqid)
    end

    def process_findAndAddContactsByUserid(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactsByUserid_args)
      result = FindAndAddContactsByUserid_result.new()
      begin
        result.success = @handler.findAndAddContactsByUserid(args.reqSeq, args.searchId, args.reference)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactsByUserid', seqid)
    end

    def process_findContactByUserid(seqid, iprot, oprot)
      args = read_args(iprot, FindContactByUserid_args)
      result = FindContactByUserid_result.new()
      begin
        result.success = @handler.findContactByUserid(args.userid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findContactByUserid', seqid)
    end

    def process_findChatByTicket(seqid, iprot, oprot)
      args = read_args(iprot, FindChatByTicket_args)
      result = FindChatByTicket_result.new()
      begin
        result.success = @handler.findChatByTicket(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findChatByTicket', seqid)
    end

    def process_getAllChatMids(seqid, iprot, oprot)
      args = read_args(iprot, GetAllChatMids_args)
      result = GetAllChatMids_result.new()
      begin
        result.success = @handler.getAllChatMids(args.request, args.syncReason)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAllChatMids', seqid)
    end

    def process_getProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetProfile_args)
      result = GetProfile_result.new()
      begin
        result.success = @handler.getProfile(args.syncReason)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProfile', seqid)
    end

    def process_getContact(seqid, iprot, oprot)
      args = read_args(iprot, GetContact_args)
      result = GetContact_result.new()
      begin
        result.success = @handler.getContact(args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getContact', seqid)
    end

    def process_getCountryWithRequestIp(seqid, iprot, oprot)
      args = read_args(iprot, GetCountryWithRequestIp_args)
      result = GetCountryWithRequestIp_result.new()
      begin
        result.success = @handler.getCountryWithRequestIp()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCountryWithRequestIp', seqid)
    end

    def process_getServerTime(seqid, iprot, oprot)
      args = read_args(iprot, GetServerTime_args)
      result = GetServerTime_result.new()
      begin
        result.success = @handler.getServerTime()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getServerTime', seqid)
    end

    def process_getContacts(seqid, iprot, oprot)
      args = read_args(iprot, GetContacts_args)
      result = GetContacts_result.new()
      begin
        result.success = @handler.getContacts(args.ids)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getContacts', seqid)
    end

    def process_getAllContactIds(seqid, iprot, oprot)
      args = read_args(iprot, GetAllContactIds_args)
      result = GetAllContactIds_result.new()
      begin
        result.success = @handler.getAllContactIds(args.syncReason)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAllContactIds', seqid)
    end

    def process_getChats(seqid, iprot, oprot)
      args = read_args(iprot, GetChats_args)
      result = GetChats_result.new()
      begin
        result.success = @handler.getChats(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getChats', seqid)
    end

    def process_inviteIntoChat(seqid, iprot, oprot)
      args = read_args(iprot, InviteIntoChat_args)
      result = InviteIntoChat_result.new()
      begin
        result.success = @handler.inviteIntoChat(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteIntoChat', seqid)
    end

    def process_reissueChatTicket(seqid, iprot, oprot)
      args = read_args(iprot, ReissueChatTicket_args)
      result = ReissueChatTicket_result.new()
      begin
        result.success = @handler.reissueChatTicket(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reissueChatTicket', seqid)
    end

    def process_rejectChatInvitation(seqid, iprot, oprot)
      args = read_args(iprot, RejectChatInvitation_args)
      result = RejectChatInvitation_result.new()
      begin
        result.success = @handler.rejectChatInvitation(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'rejectChatInvitation', seqid)
    end

    def process_sendMessage(seqid, iprot, oprot)
      args = read_args(iprot, SendMessage_args)
      result = SendMessage_result.new()
      begin
        result.success = @handler.sendMessage(args.seq, args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessage', seqid)
    end

    def process_unsendMessage(seqid, iprot, oprot)
      args = read_args(iprot, UnsendMessage_args)
      result = UnsendMessage_result.new()
      begin
        @handler.unsendMessage(args.seq, args.messageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unsendMessage', seqid)
    end

    def process_updateChat(seqid, iprot, oprot)
      args = read_args(iprot, UpdateChat_args)
      result = UpdateChat_result.new()
      begin
        result.success = @handler.updateChat(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateChat', seqid)
    end

    def process_updateProfileAttribute(seqid, iprot, oprot)
      args = read_args(iprot, UpdateProfileAttribute_args)
      result = UpdateProfileAttribute_result.new()
      begin
        @handler.updateProfileAttribute(args.reqSeq, args.attr, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateProfileAttribute', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class AcceptChatInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::AcceptChatInvitationRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptChatInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AcceptChatInvitationResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptChatInvitationByTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::AcceptChatInvitationByTicketRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptChatInvitationByTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AcceptChatInvitationByTicketResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelChatInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CancelChatInvitationRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelChatInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CancelChatInvitationResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CreateChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CreateChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSelfFromChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::DeleteSelfFromChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSelfFromChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::DeleteSelfFromChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteOtherFromChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::DeleteOtherFromChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteOtherFromChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::DeleteOtherFromChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOperations_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::FetchOperationsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOperations_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::FetchOperationsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ThingsException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOps_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALREV = 2
    COUNT = 3
    GLOBALREV = 4
    INDIVIDUALREV = 5

    FIELDS = {
      LOCALREV => {:type => ::Thrift::Types::I64, :name => 'localRev'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'},
      GLOBALREV => {:type => ::Thrift::Types::I64, :name => 'globalRev'},
      INDIVIDUALREV => {:type => ::Thrift::Types::I64, :name => 'individualRev'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOps_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Operation}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    MID = 2
    TYPE = 3
    REFERENCE = 4

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ContactType},
      REFERENCE => {:type => ::Thrift::Types::STRING, :name => 'reference'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @type.nil? || ::ContactType::VALID_VALUES.include?(@type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByUserid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    SEARCHID = 2
    REFERENCE = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      SEARCHID => {:type => ::Thrift::Types::STRING, :name => 'searchId'},
      REFERENCE => {:type => ::Thrift::Types::STRING, :name => 'reference'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByUserid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUserid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERID = 2

    FIELDS = {
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindContactByUserid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindChatByTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::FindChatByTicketRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindChatByTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::FindChatByTicketResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllChatMids_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1
    SYNCREASON = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetAllChatMidsRequest},
      SYNCREASON => {:type => ::Thrift::Types::I32, :name => 'syncReason', :enum_class => ::SyncReason}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @syncReason.nil? || ::SyncReason::VALID_VALUES.include?(@syncReason)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field syncReason!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllChatMids_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetAllChatMidsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SYNCREASON = 1

    FIELDS = {
      SYNCREASON => {:type => ::Thrift::Types::I32, :name => 'syncReason', :enum_class => ::SyncReason}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @syncReason.nil? || ::SyncReason::VALID_VALUES.include?(@syncReason)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field syncReason!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Profile},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 2

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Contact},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCountryWithRequestIp_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCountryWithRequestIp_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerTime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerTime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContacts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDS = 2

    FIELDS = {
      IDS => {:type => ::Thrift::Types::LIST, :name => 'ids', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContacts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SYNCREASON = 1

    FIELDS = {
      SYNCREASON => {:type => ::Thrift::Types::I32, :name => 'syncReason', :enum_class => ::SyncReason}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @syncReason.nil? || ::SyncReason::VALID_VALUES.include?(@syncReason)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field syncReason!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChats_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetChatsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChats_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetChatsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::InviteIntoChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::InviteIntoChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueChatTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ReissueChatTicketRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueChatTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ReissueChatTicketResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RejectChatInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::RejectChatInvitationRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RejectChatInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RejectChatInvitationResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGE = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Message},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnsendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGEID = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnsendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChat_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateChatRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChat_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateChatResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ATTR = 2
    VALUE = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ATTR => {:type => ::Thrift::Types::I32, :name => 'attr', :enum_class => ::ProfileAttribute},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @attr.nil? || ::ProfileAttribute::VALID_VALUES.include?(@attr)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field attr!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

