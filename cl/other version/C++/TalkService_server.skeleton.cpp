// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TalkService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class TalkServiceHandler : virtual public TalkServiceIf {
 public:
  TalkServiceHandler() {
    // Your initialization goes here
  }

  void acceptChatInvitation(AcceptChatInvitationResponse& _return, const AcceptChatInvitationRequest& request) {
    // Your implementation goes here
    printf("acceptChatInvitation\n");
  }

  void acceptChatInvitationByTicket(AcceptChatInvitationByTicketResponse& _return, const AcceptChatInvitationByTicketRequest& request) {
    // Your implementation goes here
    printf("acceptChatInvitationByTicket\n");
  }

  void blockContact(const int32_t reqSeq, const std::string& id) {
    // Your implementation goes here
    printf("blockContact\n");
  }

  void cancelChatInvitation(CancelChatInvitationResponse& _return, const CancelChatInvitationRequest& request) {
    // Your implementation goes here
    printf("cancelChatInvitation\n");
  }

  void createChat(CreateChatResponse& _return, const CreateChatRequest& request) {
    // Your implementation goes here
    printf("createChat\n");
  }

  void deleteSelfFromChat(DeleteSelfFromChatResponse& _return, const DeleteSelfFromChatRequest& request) {
    // Your implementation goes here
    printf("deleteSelfFromChat\n");
  }

  void deleteOtherFromChat(DeleteOtherFromChatResponse& _return, const DeleteOtherFromChatRequest& request) {
    // Your implementation goes here
    printf("deleteOtherFromChat\n");
  }

  void fetchOperations(FetchOperationsResponse& _return, const FetchOperationsRequest& request) {
    // Your implementation goes here
    printf("fetchOperations\n");
  }

  void fetchOps(std::vector<Operation> & _return, const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev) {
    // Your implementation goes here
    printf("fetchOps\n");
  }

  void findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference) {
    // Your implementation goes here
    printf("findAndAddContactsByMid\n");
  }

  void findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& searchId, const std::string& reference) {
    // Your implementation goes here
    printf("findAndAddContactsByUserid\n");
  }

  void findContactByUserid(Contact& _return, const std::string& userid) {
    // Your implementation goes here
    printf("findContactByUserid\n");
  }

  void findChatByTicket(FindChatByTicketResponse& _return, const FindChatByTicketRequest& request) {
    // Your implementation goes here
    printf("findChatByTicket\n");
  }

  void getAllChatMids(GetAllChatMidsResponse& _return, const GetAllChatMidsRequest& request, const SyncReason::type syncReason) {
    // Your implementation goes here
    printf("getAllChatMids\n");
  }

  void getProfile(Profile& _return, const SyncReason::type syncReason) {
    // Your implementation goes here
    printf("getProfile\n");
  }

  void getContact(Contact& _return, const std::string& id) {
    // Your implementation goes here
    printf("getContact\n");
  }

  void getCountryWithRequestIp(std::string& _return) {
    // Your implementation goes here
    printf("getCountryWithRequestIp\n");
  }

  int64_t getServerTime() {
    // Your implementation goes here
    printf("getServerTime\n");
  }

  void getContacts(std::vector<Contact> & _return, const std::vector<std::string> & ids) {
    // Your implementation goes here
    printf("getContacts\n");
  }

  void getAllContactIds(std::vector<std::string> & _return, const SyncReason::type syncReason) {
    // Your implementation goes here
    printf("getAllContactIds\n");
  }

  void getChats(GetChatsResponse& _return, const GetChatsRequest& request) {
    // Your implementation goes here
    printf("getChats\n");
  }

  void inviteIntoChat(InviteIntoChatResponse& _return, const InviteIntoChatRequest& request) {
    // Your implementation goes here
    printf("inviteIntoChat\n");
  }

  void reissueChatTicket(ReissueChatTicketResponse& _return, const ReissueChatTicketRequest& request) {
    // Your implementation goes here
    printf("reissueChatTicket\n");
  }

  void rejectChatInvitation(RejectChatInvitationResponse& _return, const RejectChatInvitationRequest& request) {
    // Your implementation goes here
    printf("rejectChatInvitation\n");
  }

  void sendMessage(Message& _return, const int32_t seq, const Message& message) {
    // Your implementation goes here
    printf("sendMessage\n");
  }

  void unsendMessage(const int32_t seq, const std::string& messageId) {
    // Your implementation goes here
    printf("unsendMessage\n");
  }

  void updateChat(UpdateChatResponse& _return, const UpdateChatRequest& request) {
    // Your implementation goes here
    printf("updateChat\n");
  }

  void updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value) {
    // Your implementation goes here
    printf("updateProfileAttribute\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<TalkServiceHandler> handler(new TalkServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new TalkServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

