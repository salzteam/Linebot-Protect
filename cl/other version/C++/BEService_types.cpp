/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "BEService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kAccuracyModeValues[] = {
  AccuracyMode::UNKNOWN,
  AccuracyMode::IOS_REDUCED_ACCURACY,
  AccuracyMode::IOS_FULL_ACCURACY
};
const char* _kAccuracyModeNames[] = {
  "UNKNOWN",
  "IOS_REDUCED_ACCURACY",
  "IOS_FULL_ACCURACY"
};
const std::map<int, const char*> _AccuracyMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAccuracyModeValues, _kAccuracyModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AccuracyMode::type& val) {
  std::map<int, const char*>::const_iterator it = _AccuracyMode_VALUES_TO_NAMES.find(val);
  if (it != _AccuracyMode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const AccuracyMode::type& val) {
  std::map<int, const char*>::const_iterator it = _AccuracyMode_VALUES_TO_NAMES.find(val);
  if (it != _AccuracyMode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kAppExtensionTypeValues[] = {
  AppExtensionType::SIRI,
  AppExtensionType::GOOGLE_ASSISTANT,
  AppExtensionType::OS_SHARE
};
const char* _kAppExtensionTypeNames[] = {
  "SIRI",
  "GOOGLE_ASSISTANT",
  "OS_SHARE"
};
const std::map<int, const char*> _AppExtensionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAppExtensionTypeValues, _kAppExtensionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AppExtensionType::type& val) {
  std::map<int, const char*>::const_iterator it = _AppExtensionType_VALUES_TO_NAMES.find(val);
  if (it != _AppExtensionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const AppExtensionType::type& val) {
  std::map<int, const char*>::const_iterator it = _AppExtensionType_VALUES_TO_NAMES.find(val);
  if (it != _AppExtensionType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kContactStatusValues[] = {
  ContactStatus::UNSPECIFIED,
  ContactStatus::FRIEND,
  ContactStatus::FRIEND_BLOCKED,
  ContactStatus::RECOMMEND,
  ContactStatus::RECOMMEND_BLOCKED,
  ContactStatus::DELETED,
  ContactStatus::DELETED_BLOCKED
};
const char* _kContactStatusNames[] = {
  "UNSPECIFIED",
  "FRIEND",
  "FRIEND_BLOCKED",
  "RECOMMEND",
  "RECOMMEND_BLOCKED",
  "DELETED",
  "DELETED_BLOCKED"
};
const std::map<int, const char*> _ContactStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kContactStatusValues, _kContactStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContactStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactStatus_VALUES_TO_NAMES.find(val);
  if (it != _ContactStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ContactStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactStatus_VALUES_TO_NAMES.find(val);
  if (it != _ContactStatus_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kChatTypeValues[] = {
  ChatType::GROUP,
  ChatType::ROOM,
  ChatType::PEER
};
const char* _kChatTypeNames[] = {
  "GROUP",
  "ROOM",
  "PEER"
};
const std::map<int, const char*> _ChatType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kChatTypeValues, _kChatTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ChatType::type& val) {
  std::map<int, const char*>::const_iterator it = _ChatType_VALUES_TO_NAMES.find(val);
  if (it != _ChatType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ChatType::type& val) {
  std::map<int, const char*>::const_iterator it = _ChatType_VALUES_TO_NAMES.find(val);
  if (it != _ChatType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kContentTypeValues[] = {
  ContentType::NONE,
  ContentType::IMAGE,
  ContentType::VIDEO,
  ContentType::AUDIO,
  ContentType::HTML,
  ContentType::PDF,
  ContentType::CALL,
  ContentType::STICKER,
  ContentType::PRESENCE,
  ContentType::GIFT,
  ContentType::GROUPBOARD,
  ContentType::APPLINK,
  ContentType::LINK,
  ContentType::CONTACT,
  ContentType::FILE,
  ContentType::LOCATION,
  ContentType::POSTNOTIFICATION,
  ContentType::RICH,
  ContentType::CHATEVENT,
  ContentType::MUSIC,
  ContentType::PAYMENT,
  ContentType::EXTIMAGE,
  ContentType::FLEX
};
const char* _kContentTypeNames[] = {
  "NONE",
  "IMAGE",
  "VIDEO",
  "AUDIO",
  "HTML",
  "PDF",
  "CALL",
  "STICKER",
  "PRESENCE",
  "GIFT",
  "GROUPBOARD",
  "APPLINK",
  "LINK",
  "CONTACT",
  "FILE",
  "LOCATION",
  "POSTNOTIFICATION",
  "RICH",
  "CHATEVENT",
  "MUSIC",
  "PAYMENT",
  "EXTIMAGE",
  "FLEX"
};
const std::map<int, const char*> _ContentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(23, _kContentTypeValues, _kContentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContentType::type& val) {
  std::map<int, const char*>::const_iterator it = _ContentType_VALUES_TO_NAMES.find(val);
  if (it != _ContentType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ContentType::type& val) {
  std::map<int, const char*>::const_iterator it = _ContentType_VALUES_TO_NAMES.find(val);
  if (it != _ContentType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kContactTypeValues[] = {
  ContactType::MID,
  ContactType::PHONE,
  ContactType::EMAIL,
  ContactType::USERID,
  ContactType::PROXIMITY,
  ContactType::GROUP,
  ContactType::USER,
  ContactType::QRCODE,
  ContactType::PROMOTION_BOT,
  ContactType::CONTACT_MESSAGE,
  ContactType::FRIEND_REQUEST,
  ContactType::REPAIR,
  ContactType::FACEBOOK,
  ContactType::SINA,
  ContactType::RENREN,
  ContactType::FEIXIN,
  ContactType::BBM,
  ContactType::BEACON
};
const char* _kContactTypeNames[] = {
  "MID",
  "PHONE",
  "EMAIL",
  "USERID",
  "PROXIMITY",
  "GROUP",
  "USER",
  "QRCODE",
  "PROMOTION_BOT",
  "CONTACT_MESSAGE",
  "FRIEND_REQUEST",
  "REPAIR",
  "FACEBOOK",
  "SINA",
  "RENREN",
  "FEIXIN",
  "BBM",
  "BEACON"
};
const std::map<int, const char*> _ContactType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(18, _kContactTypeValues, _kContactTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContactType::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactType_VALUES_TO_NAMES.find(val);
  if (it != _ContactType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ContactType::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactType_VALUES_TO_NAMES.find(val);
  if (it != _ContactType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kFriendRequestStatusValues[] = {
  FriendRequestStatus::NONE,
  FriendRequestStatus::AVAILABLE,
  FriendRequestStatus::ALREADY_REQUESTED,
  FriendRequestStatus::UNAVAILABLE
};
const char* _kFriendRequestStatusNames[] = {
  "NONE",
  "AVAILABLE",
  "ALREADY_REQUESTED",
  "UNAVAILABLE"
};
const std::map<int, const char*> _FriendRequestStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kFriendRequestStatusValues, _kFriendRequestStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const FriendRequestStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _FriendRequestStatus_VALUES_TO_NAMES.find(val);
  if (it != _FriendRequestStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const FriendRequestStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _FriendRequestStatus_VALUES_TO_NAMES.find(val);
  if (it != _FriendRequestStatus_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kMessageRelationTypeValues[] = {
  MessageRelationType::FORWARD,
  MessageRelationType::AUTO_REPLY,
  MessageRelationType::SUBORDINATE,
  MessageRelationType::REPLY
};
const char* _kMessageRelationTypeNames[] = {
  "FORWARD",
  "AUTO_REPLY",
  "SUBORDINATE",
  "REPLY"
};
const std::map<int, const char*> _MessageRelationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kMessageRelationTypeValues, _kMessageRelationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MessageRelationType::type& val) {
  std::map<int, const char*>::const_iterator it = _MessageRelationType_VALUES_TO_NAMES.find(val);
  if (it != _MessageRelationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const MessageRelationType::type& val) {
  std::map<int, const char*>::const_iterator it = _MessageRelationType_VALUES_TO_NAMES.find(val);
  if (it != _MessageRelationType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kOperationTypeValues[] = {
  OperationType::END_OF_OPERATION,
  OperationType::UPDATE_PROFILE,
  OperationType::UPDATE_SETTINGS,
  OperationType::NOTIFIED_UPDATE_PROFILE,
  OperationType::REGISTER_USERID,
  OperationType::ADD_CONTACT,
  OperationType::NOTIFIED_ADD_CONTACT,
  OperationType::BLOCK_CONTACT,
  OperationType::UNBLOCK_CONTACT,
  OperationType::NOTIFIED_RECOMMEND_CONTACT,
  OperationType::CREATE_GROUP,
  OperationType::UPDATE_GROUP,
  OperationType::NOTIFIED_UPDATE_GROUP,
  OperationType::INVITE_INTO_GROUP,
  OperationType::NOTIFIED_INVITE_INTO_GROUP,
  OperationType::CANCEL_INVITATION_GROUP,
  OperationType::NOTIFIED_CANCEL_INVITATION_GROUP,
  OperationType::LEAVE_GROUP,
  OperationType::NOTIFIED_LEAVE_GROUP,
  OperationType::ACCEPT_GROUP_INVITATION,
  OperationType::NOTIFIED_ACCEPT_GROUP_INVITATION,
  OperationType::REJECT_GROUP_INVITATION,
  OperationType::NOTIFIED_REJECT_GROUP_INVITATION,
  OperationType::KICKOUT_FROM_GROUP,
  OperationType::NOTIFIED_KICKOUT_FROM_GROUP,
  OperationType::CREATE_ROOM,
  OperationType::INVITE_INTO_ROOM,
  OperationType::NOTIFIED_INVITE_INTO_ROOM,
  OperationType::LEAVE_ROOM,
  OperationType::NOTIFIED_LEAVE_ROOM,
  OperationType::SEND_MESSAGE,
  OperationType::RECEIVE_MESSAGE,
  OperationType::SEND_MESSAGE_RECEIPT,
  OperationType::RECEIVE_MESSAGE_RECEIPT,
  OperationType::SEND_CONTENT_RECEIPT,
  OperationType::SEND_CHAT_CHECKED,
  OperationType::SEND_CHAT_REMOVED,
  OperationType::RECEIVE_ANNOUNCEMENT,
  OperationType::INVITE_VIA_EMAIL,
  OperationType::NOTIFIED_REGISTER_USER,
  OperationType::NOTIFIED_UNREGISTER_USER,
  OperationType::NOTIFIED_REQUEST_RECOVERY,
  OperationType::NOTIFIED_FORCE_SYNC,
  OperationType::SEND_CONTENT,
  OperationType::SEND_MESSAGE_MYHOME,
  OperationType::NOTIFIED_UPDATE_CONTENT_PREVIEW,
  OperationType::REMOVE_ALL_MESSAGES,
  OperationType::NOTIFIED_UPDATE_PURCHASES,
  OperationType::DUMMY,
  OperationType::UPDATE_CONTACT,
  OperationType::NOTIFIED_RECEIVED_CALL,
  OperationType::CANCEL_CALL,
  OperationType::NOTIFIED_REDIRECT,
  OperationType::NOTIFIED_CHANNEL_SYNC,
  OperationType::FAILED_SEND_MESSAGE,
  OperationType::NOTIFIED_READ_MESSAGE,
  OperationType::FAILED_EMAIL_CONFIRMATION,
  OperationType::NOTIFIED_PUSH_NOTICENTER_ITEM,
  OperationType::NOTIFIED_CHAT_CONTENT,
  OperationType::NOTIFIED_JOIN_CHAT,
  OperationType::NOTIFIED_LEAVE_CHAT,
  OperationType::NOTIFIED_TYPING,
  OperationType::FRIEND_REQUEST_ACCEPTED,
  OperationType::DESTROY_MESSAGE,
  OperationType::NOTIFIED_DESTROY_MESSAGE,
  OperationType::UPDATE_PUBLICKEYCHAIN,
  OperationType::NOTIFIED_UPDATE_PUBLICKEYCHAIN,
  OperationType::NOTIFIED_BLOCK_CONTACT,
  OperationType::NOTIFIED_UNBLOCK_CONTACT,
  OperationType::UPDATE_GROUPPREFERENCE,
  OperationType::NOTIFIED_PAYMENT_EVENT,
  OperationType::REGISTER_E2EE_PUBLICKEY,
  OperationType::NOTIFIED_E2EE_KEY_EXCHANGE_REQ,
  OperationType::NOTIFIED_E2EE_KEY_EXCHANGE_RESP,
  OperationType::NOTIFIED_E2EE_MESSAGE_RESEND_REQ,
  OperationType::NOTIFIED_E2EE_MESSAGE_RESEND_RESP,
  OperationType::NOTIFIED_E2EE_KEY_UPDATE,
  OperationType::NOTIFIED_BUDDY_UPDATE_PROFILE,
  OperationType::NOTIFIED_UPDATE_LINEAT_TABS,
  OperationType::UPDATE_ROOM,
  OperationType::NOTIFIED_BEACON_DETECTED,
  OperationType::UPDATE_EXTENDED_PROFILE,
  OperationType::ADD_FOLLOW,
  OperationType::NOTIFIED_ADD_FOLLOW,
  OperationType::DELETE_FOLLOW,
  OperationType::NOTIFIED_DELETE_FOLLOW,
  OperationType::UPDATE_TIMELINE_SETTINGS,
  OperationType::NOTIFIED_FRIEND_REQUEST,
  OperationType::UPDATE_RINGBACK_TONE,
  OperationType::NOTIFIED_POSTBACK,
  OperationType::RECEIVE_READ_WATERMARK,
  OperationType::NOTIFIED_MESSAGE_DELIVERED,
  OperationType::NOTIFIED_UPDATE_CHAT_BAR,
  OperationType::NOTIFIED_CHATAPP_INSTALLED,
  OperationType::NOTIFIED_CHATAPP_UPDATED,
  OperationType::NOTIFIED_CHATAPP_NEW_MARK,
  OperationType::NOTIFIED_CHATAPP_DELETED,
  OperationType::NOTIFIED_CHATAPP_SYNC,
  OperationType::NOTIFIED_UPDATE_MESSAGE,
  OperationType::UPDATE_CHATROOMBGM,
  OperationType::NOTIFIED_UPDATE_CHATROOMBGM,
  OperationType::UPDATE_RINGTONE,
  OperationType::UPDATE_USER_SETTINGS,
  OperationType::NOTIFIED_UPDATE_STATUS_BAR,
  OperationType::CREATE_CHAT,
  OperationType::UPDATE_CHAT,
  OperationType::NOTIFIED_UPDATE_CHAT,
  OperationType::INVITE_INTO_CHAT,
  OperationType::NOTIFIED_INVITE_INTO_CHAT,
  OperationType::CANCEL_CHAT_INVITATION,
  OperationType::NOTIFIED_CANCEL_CHAT_INVITATION,
  OperationType::DELETE_SELF_FROM_CHAT,
  OperationType::NOTIFIED_DELETE_SELF_FROM_CHAT,
  OperationType::ACCEPT_CHAT_INVITATION,
  OperationType::NOTIFIED_ACCEPT_CHAT_INVITATION,
  OperationType::REJECT_CHAT_INVITATION,
  OperationType::DELETE_OTHER_FROM_CHAT,
  OperationType::NOTIFIED_DELETE_OTHER_FROM_CHAT,
  OperationType::NOTIFIED_CONTACT_CALENDAR_EVENT,
  OperationType::NOTIFIED_CONTACT_CALENDAR_EVENT_ALL,
  OperationType::UPDATE_THINGS_OPERATIONS,
  OperationType::SEND_CHAT_HIDDEN,
  OperationType::CHAT_META_SYNC_ALL,
  OperationType::SEND_REACTION,
  OperationType::NOTIFIED_SEND_REACTION
};
const char* _kOperationTypeNames[] = {
  "END_OF_OPERATION",
  "UPDATE_PROFILE",
  "UPDATE_SETTINGS",
  "NOTIFIED_UPDATE_PROFILE",
  "REGISTER_USERID",
  "ADD_CONTACT",
  "NOTIFIED_ADD_CONTACT",
  "BLOCK_CONTACT",
  "UNBLOCK_CONTACT",
  "NOTIFIED_RECOMMEND_CONTACT",
  "CREATE_GROUP",
  "UPDATE_GROUP",
  "NOTIFIED_UPDATE_GROUP",
  "INVITE_INTO_GROUP",
  "NOTIFIED_INVITE_INTO_GROUP",
  "CANCEL_INVITATION_GROUP",
  "NOTIFIED_CANCEL_INVITATION_GROUP",
  "LEAVE_GROUP",
  "NOTIFIED_LEAVE_GROUP",
  "ACCEPT_GROUP_INVITATION",
  "NOTIFIED_ACCEPT_GROUP_INVITATION",
  "REJECT_GROUP_INVITATION",
  "NOTIFIED_REJECT_GROUP_INVITATION",
  "KICKOUT_FROM_GROUP",
  "NOTIFIED_KICKOUT_FROM_GROUP",
  "CREATE_ROOM",
  "INVITE_INTO_ROOM",
  "NOTIFIED_INVITE_INTO_ROOM",
  "LEAVE_ROOM",
  "NOTIFIED_LEAVE_ROOM",
  "SEND_MESSAGE",
  "RECEIVE_MESSAGE",
  "SEND_MESSAGE_RECEIPT",
  "RECEIVE_MESSAGE_RECEIPT",
  "SEND_CONTENT_RECEIPT",
  "SEND_CHAT_CHECKED",
  "SEND_CHAT_REMOVED",
  "RECEIVE_ANNOUNCEMENT",
  "INVITE_VIA_EMAIL",
  "NOTIFIED_REGISTER_USER",
  "NOTIFIED_UNREGISTER_USER",
  "NOTIFIED_REQUEST_RECOVERY",
  "NOTIFIED_FORCE_SYNC",
  "SEND_CONTENT",
  "SEND_MESSAGE_MYHOME",
  "NOTIFIED_UPDATE_CONTENT_PREVIEW",
  "REMOVE_ALL_MESSAGES",
  "NOTIFIED_UPDATE_PURCHASES",
  "DUMMY",
  "UPDATE_CONTACT",
  "NOTIFIED_RECEIVED_CALL",
  "CANCEL_CALL",
  "NOTIFIED_REDIRECT",
  "NOTIFIED_CHANNEL_SYNC",
  "FAILED_SEND_MESSAGE",
  "NOTIFIED_READ_MESSAGE",
  "FAILED_EMAIL_CONFIRMATION",
  "NOTIFIED_PUSH_NOTICENTER_ITEM",
  "NOTIFIED_CHAT_CONTENT",
  "NOTIFIED_JOIN_CHAT",
  "NOTIFIED_LEAVE_CHAT",
  "NOTIFIED_TYPING",
  "FRIEND_REQUEST_ACCEPTED",
  "DESTROY_MESSAGE",
  "NOTIFIED_DESTROY_MESSAGE",
  "UPDATE_PUBLICKEYCHAIN",
  "NOTIFIED_UPDATE_PUBLICKEYCHAIN",
  "NOTIFIED_BLOCK_CONTACT",
  "NOTIFIED_UNBLOCK_CONTACT",
  "UPDATE_GROUPPREFERENCE",
  "NOTIFIED_PAYMENT_EVENT",
  "REGISTER_E2EE_PUBLICKEY",
  "NOTIFIED_E2EE_KEY_EXCHANGE_REQ",
  "NOTIFIED_E2EE_KEY_EXCHANGE_RESP",
  "NOTIFIED_E2EE_MESSAGE_RESEND_REQ",
  "NOTIFIED_E2EE_MESSAGE_RESEND_RESP",
  "NOTIFIED_E2EE_KEY_UPDATE",
  "NOTIFIED_BUDDY_UPDATE_PROFILE",
  "NOTIFIED_UPDATE_LINEAT_TABS",
  "UPDATE_ROOM",
  "NOTIFIED_BEACON_DETECTED",
  "UPDATE_EXTENDED_PROFILE",
  "ADD_FOLLOW",
  "NOTIFIED_ADD_FOLLOW",
  "DELETE_FOLLOW",
  "NOTIFIED_DELETE_FOLLOW",
  "UPDATE_TIMELINE_SETTINGS",
  "NOTIFIED_FRIEND_REQUEST",
  "UPDATE_RINGBACK_TONE",
  "NOTIFIED_POSTBACK",
  "RECEIVE_READ_WATERMARK",
  "NOTIFIED_MESSAGE_DELIVERED",
  "NOTIFIED_UPDATE_CHAT_BAR",
  "NOTIFIED_CHATAPP_INSTALLED",
  "NOTIFIED_CHATAPP_UPDATED",
  "NOTIFIED_CHATAPP_NEW_MARK",
  "NOTIFIED_CHATAPP_DELETED",
  "NOTIFIED_CHATAPP_SYNC",
  "NOTIFIED_UPDATE_MESSAGE",
  "UPDATE_CHATROOMBGM",
  "NOTIFIED_UPDATE_CHATROOMBGM",
  "UPDATE_RINGTONE",
  "UPDATE_USER_SETTINGS",
  "NOTIFIED_UPDATE_STATUS_BAR",
  "CREATE_CHAT",
  "UPDATE_CHAT",
  "NOTIFIED_UPDATE_CHAT",
  "INVITE_INTO_CHAT",
  "NOTIFIED_INVITE_INTO_CHAT",
  "CANCEL_CHAT_INVITATION",
  "NOTIFIED_CANCEL_CHAT_INVITATION",
  "DELETE_SELF_FROM_CHAT",
  "NOTIFIED_DELETE_SELF_FROM_CHAT",
  "ACCEPT_CHAT_INVITATION",
  "NOTIFIED_ACCEPT_CHAT_INVITATION",
  "REJECT_CHAT_INVITATION",
  "DELETE_OTHER_FROM_CHAT",
  "NOTIFIED_DELETE_OTHER_FROM_CHAT",
  "NOTIFIED_CONTACT_CALENDAR_EVENT",
  "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL",
  "UPDATE_THINGS_OPERATIONS",
  "SEND_CHAT_HIDDEN",
  "CHAT_META_SYNC_ALL",
  "SEND_REACTION",
  "NOTIFIED_SEND_REACTION"
};
const std::map<int, const char*> _OperationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(125, _kOperationTypeValues, _kOperationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const OperationType::type& val) {
  std::map<int, const char*>::const_iterator it = _OperationType_VALUES_TO_NAMES.find(val);
  if (it != _OperationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const OperationType::type& val) {
  std::map<int, const char*>::const_iterator it = _OperationType_VALUES_TO_NAMES.find(val);
  if (it != _OperationType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kOperationStatusValues[] = {
  OperationStatus::NORMAL,
  OperationStatus::ALERT_DISABLED,
  OperationStatus::ALWAYS
};
const char* _kOperationStatusNames[] = {
  "NORMAL",
  "ALERT_DISABLED",
  "ALWAYS"
};
const std::map<int, const char*> _OperationStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOperationStatusValues, _kOperationStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const OperationStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _OperationStatus_VALUES_TO_NAMES.find(val);
  if (it != _OperationStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const OperationStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _OperationStatus_VALUES_TO_NAMES.find(val);
  if (it != _OperationStatus_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kProfileAttributeValues[] = {
  ProfileAttribute::ALL,
  ProfileAttribute::EMAIL,
  ProfileAttribute::DISPLAY_NAME,
  ProfileAttribute::PHONETIC_NAME,
  ProfileAttribute::PICTURE,
  ProfileAttribute::STATUS_MESSAGE,
  ProfileAttribute::ALLOW_SEARCH_BY_USERID,
  ProfileAttribute::ALLOW_SEARCH_BY_EMAIL,
  ProfileAttribute::BUDDY_STATUS,
  ProfileAttribute::MUSIC_PROFILE,
  ProfileAttribute::AVATAR_PROFILE
};
const char* _kProfileAttributeNames[] = {
  "ALL",
  "EMAIL",
  "DISPLAY_NAME",
  "PHONETIC_NAME",
  "PICTURE",
  "STATUS_MESSAGE",
  "ALLOW_SEARCH_BY_USERID",
  "ALLOW_SEARCH_BY_EMAIL",
  "BUDDY_STATUS",
  "MUSIC_PROFILE",
  "AVATAR_PROFILE"
};
const std::map<int, const char*> _ProfileAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kProfileAttributeValues, _kProfileAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ProfileAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _ProfileAttribute_VALUES_TO_NAMES.find(val);
  if (it != _ProfileAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ProfileAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _ProfileAttribute_VALUES_TO_NAMES.find(val);
  if (it != _ProfileAttribute_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kProviderValues[] = {
  Provider::GOOGLE,
  Provider::BAIDU,
  Provider::FOURSQUARE
};
const char* _kProviderNames[] = {
  "GOOGLE",
  "BAIDU",
  "FOURSQUARE"
};
const std::map<int, const char*> _Provider_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kProviderValues, _kProviderNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Provider::type& val) {
  std::map<int, const char*>::const_iterator it = _Provider_VALUES_TO_NAMES.find(val);
  if (it != _Provider_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const Provider::type& val) {
  std::map<int, const char*>::const_iterator it = _Provider_VALUES_TO_NAMES.find(val);
  if (it != _Provider_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kRelatedMessageServiceCodeValues[] = {
  RelatedMessageServiceCode::UNKNOWN,
  RelatedMessageServiceCode::TALK,
  RelatedMessageServiceCode::SQUARE
};
const char* _kRelatedMessageServiceCodeNames[] = {
  "UNKNOWN",
  "TALK",
  "SQUARE"
};
const std::map<int, const char*> _RelatedMessageServiceCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRelatedMessageServiceCodeValues, _kRelatedMessageServiceCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RelatedMessageServiceCode::type& val) {
  std::map<int, const char*>::const_iterator it = _RelatedMessageServiceCode_VALUES_TO_NAMES.find(val);
  if (it != _RelatedMessageServiceCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const RelatedMessageServiceCode::type& val) {
  std::map<int, const char*>::const_iterator it = _RelatedMessageServiceCode_VALUES_TO_NAMES.find(val);
  if (it != _RelatedMessageServiceCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kRelationValues[] = {
  Relation::ONEWAY,
  Relation::BOTH,
  Relation::NOT_REGISTERED
};
const char* _kRelationNames[] = {
  "ONEWAY",
  "BOTH",
  "NOT_REGISTERED"
};
const std::map<int, const char*> _Relation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRelationValues, _kRelationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Relation::type& val) {
  std::map<int, const char*>::const_iterator it = _Relation_VALUES_TO_NAMES.find(val);
  if (it != _Relation_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const Relation::type& val) {
  std::map<int, const char*>::const_iterator it = _Relation_VALUES_TO_NAMES.find(val);
  if (it != _Relation_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kSyncReasonValues[] = {
  SyncReason::UNSPECIFIED,
  SyncReason::UNKNOWN,
  SyncReason::INITIALIZATION,
  SyncReason::OPERATION,
  SyncReason::FULL_SYNC,
  SyncReason::AUTO_REPAIR,
  SyncReason::MANUAL_REPAIR,
  SyncReason::INTERNAL
};
const char* _kSyncReasonNames[] = {
  "UNSPECIFIED",
  "UNKNOWN",
  "INITIALIZATION",
  "OPERATION",
  "FULL_SYNC",
  "AUTO_REPAIR",
  "MANUAL_REPAIR",
  "INTERNAL"
};
const std::map<int, const char*> _SyncReason_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kSyncReasonValues, _kSyncReasonNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SyncReason::type& val) {
  std::map<int, const char*>::const_iterator it = _SyncReason_VALUES_TO_NAMES.find(val);
  if (it != _SyncReason_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const SyncReason::type& val) {
  std::map<int, const char*>::const_iterator it = _SyncReason_VALUES_TO_NAMES.find(val);
  if (it != _SyncReason_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kThingsExceptionCodeValues[] = {
  ThingsExceptionCode::INTERNAL_SERVER_ERROR,
  ThingsExceptionCode::UNAUTHORIZED,
  ThingsExceptionCode::INVALID_REQUEST,
  ThingsExceptionCode::INVALID_STATE,
  ThingsExceptionCode::DEVICE_LIMIT_EXCEEDED,
  ThingsExceptionCode::UNSUPPORTED_REGION
};
const char* _kThingsExceptionCodeNames[] = {
  "INTERNAL_SERVER_ERROR",
  "UNAUTHORIZED",
  "INVALID_REQUEST",
  "INVALID_STATE",
  "DEVICE_LIMIT_EXCEEDED",
  "UNSUPPORTED_REGION"
};
const std::map<int, const char*> _ThingsExceptionCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kThingsExceptionCodeValues, _kThingsExceptionCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ThingsExceptionCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ThingsExceptionCode_VALUES_TO_NAMES.find(val);
  if (it != _ThingsExceptionCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ThingsExceptionCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ThingsExceptionCode_VALUES_TO_NAMES.find(val);
  if (it != _ThingsExceptionCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kTalkExceptionCodeValues[] = {
  TalkExceptionCode::ILLEGAL_ARGUMENT,
  TalkExceptionCode::AUTHENTICATION_FAILED,
  TalkExceptionCode::DB_FAILED,
  TalkExceptionCode::INVALID_STATE,
  TalkExceptionCode::EXCESSIVE_ACCESS,
  TalkExceptionCode::NOT_FOUND,
  TalkExceptionCode::INVALID_LENGTH,
  TalkExceptionCode::NOT_AVAILABLE_USER,
  TalkExceptionCode::NOT_AUTHORIZED_DEVICE,
  TalkExceptionCode::INVALID_MID,
  TalkExceptionCode::NOT_A_MEMBER,
  TalkExceptionCode::INCOMPATIBLE_APP_VERSION,
  TalkExceptionCode::NOT_READY,
  TalkExceptionCode::NOT_AVAILABLE_SESSION,
  TalkExceptionCode::NOT_AUTHORIZED_SESSION,
  TalkExceptionCode::SYSTEM_ERROR,
  TalkExceptionCode::NO_AVAILABLE_VERIFICATION_METHOD,
  TalkExceptionCode::NOT_AUTHENTICATED,
  TalkExceptionCode::INVALID_IDENTITY_CREDENTIAL,
  TalkExceptionCode::NOT_AVAILABLE_IDENTITY_IDENTIFIER,
  TalkExceptionCode::INTERNAL_ERROR,
  TalkExceptionCode::NO_SUCH_IDENTITY_IDENFIER,
  TalkExceptionCode::DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY,
  TalkExceptionCode::ILLEGAL_IDENTITY_CREDENTIAL,
  TalkExceptionCode::UNKNOWN_CHANNEL,
  TalkExceptionCode::NO_SUCH_MESSAGE_BOX,
  TalkExceptionCode::NOT_AVAILABLE_MESSAGE_BOX,
  TalkExceptionCode::CHANNEL_DOES_NOT_MATCH,
  TalkExceptionCode::NOT_YOUR_MESSAGE,
  TalkExceptionCode::MESSAGE_DEFINED_ERROR,
  TalkExceptionCode::USER_CANNOT_ACCEPT_PRESENTS,
  TalkExceptionCode::USER_NOT_STICKER_OWNER,
  TalkExceptionCode::MAINTENANCE_ERROR,
  TalkExceptionCode::ACCOUNT_NOT_MATCHED,
  TalkExceptionCode::ABUSE_BLOCK,
  TalkExceptionCode::NOT_FRIEND,
  TalkExceptionCode::NOT_ALLOWED_CALL,
  TalkExceptionCode::BLOCK_FRIEND,
  TalkExceptionCode::INCOMPATIBLE_VOIP_VERSION,
  TalkExceptionCode::INVALID_SNS_ACCESS_TOKEN,
  TalkExceptionCode::EXTERNAL_SERVICE_NOT_AVAILABLE,
  TalkExceptionCode::NOT_ALLOWED_ADD_CONTACT,
  TalkExceptionCode::NOT_CERTIFICATED,
  TalkExceptionCode::NOT_ALLOWED_SECONDARY_DEVICE,
  TalkExceptionCode::INVALID_PIN_CODE,
  TalkExceptionCode::NOT_FOUND_IDENTITY_CREDENTIAL,
  TalkExceptionCode::EXCEED_FILE_MAX_SIZE,
  TalkExceptionCode::EXCEED_DAILY_QUOTA,
  TalkExceptionCode::NOT_SUPPORT_SEND_FILE,
  TalkExceptionCode::MUST_UPGRADE,
  TalkExceptionCode::NOT_AVAILABLE_PIN_CODE_SESSION,
  TalkExceptionCode::EXPIRED_REVISION,
  TalkExceptionCode::NOT_YET_PHONE_NUMBER,
  TalkExceptionCode::BAD_CALL_NUMBER,
  TalkExceptionCode::UNAVAILABLE_CALL_NUMBER,
  TalkExceptionCode::NOT_SUPPORT_CALL_SERVICE,
  TalkExceptionCode::CONGESTION_CONTROL,
  TalkExceptionCode::NO_BALANCE,
  TalkExceptionCode::NOT_PERMITTED_CALLER_ID,
  TalkExceptionCode::NO_CALLER_ID_LIMIT_EXCEEDED,
  TalkExceptionCode::CALLER_ID_VERIFICATION_REQUIRED,
  TalkExceptionCode::NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED,
  TalkExceptionCode::MESSAGE_NOT_FOUND,
  TalkExceptionCode::INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT,
  TalkExceptionCode::ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED,
  TalkExceptionCode::ACCOUNT_MIGRATION_PINCODE_BLOCKED,
  TalkExceptionCode::INVALID_PASSWORD_FORMAT,
  TalkExceptionCode::FEATURE_RESTRICTED,
  TalkExceptionCode::MESSAGE_NOT_DESTRUCTIBLE,
  TalkExceptionCode::PAID_CALL_REDEEM_FAILED,
  TalkExceptionCode::PREVENTED_JOIN_BY_TICKET,
  TalkExceptionCode::SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT,
  TalkExceptionCode::SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY,
  TalkExceptionCode::SECURITY_CENTER_NOT_VERIFIED,
  TalkExceptionCode::SECURITY_CENTER_BLOCKED_BY_SETTING,
  TalkExceptionCode::SECURITY_CENTER_BLOCKED,
  TalkExceptionCode::TALK_PROXY_EXCEPTION,
  TalkExceptionCode::E2EE_INVALID_PROTOCOL,
  TalkExceptionCode::E2EE_RETRY_ENCRYPT,
  TalkExceptionCode::E2EE_UPDATE_SENDER_KEY,
  TalkExceptionCode::E2EE_UPDATE_RECEIVER_KEY,
  TalkExceptionCode::E2EE_INVALID_ARGUMENT,
  TalkExceptionCode::E2EE_INVALID_VERSION,
  TalkExceptionCode::E2EE_SENDER_DISABLED,
  TalkExceptionCode::E2EE_RECEIVER_DISABLED,
  TalkExceptionCode::E2EE_SENDER_NOT_ALLOWED,
  TalkExceptionCode::E2EE_RECEIVER_NOT_ALLOWED,
  TalkExceptionCode::E2EE_RESEND_FAIL,
  TalkExceptionCode::E2EE_RESEND_OK,
  TalkExceptionCode::HITOKOTO_BACKUP_NO_AVAILABLE_DATA,
  TalkExceptionCode::E2EE_UPDATE_PRIMARY_DEVICE,
  TalkExceptionCode::SUCCESS,
  TalkExceptionCode::CANCEL,
  TalkExceptionCode::E2EE_PRIMARY_NOT_SUPPORT,
  TalkExceptionCode::E2EE_RETRY_PLAIN,
  TalkExceptionCode::E2EE_RECREATE_GROUP_KEY,
  TalkExceptionCode::E2EE_GROUP_TOO_MANY_MEMBERS,
  TalkExceptionCode::SERVER_BUSY,
  TalkExceptionCode::NOT_ALLOWED_ADD_FOLLOW,
  TalkExceptionCode::INCOMING_FRIEND_REQUEST_LIMIT,
  TalkExceptionCode::OUTGOING_FRIEND_REQUEST_LIMIT,
  TalkExceptionCode::OUTGOING_FRIEND_REQUEST_QUOTA,
  TalkExceptionCode::DUPLICATED,
  TalkExceptionCode::BANNED,
  TalkExceptionCode::NOT_AN_INVITEE,
  TalkExceptionCode::NOT_AN_OUTSIDER,
  TalkExceptionCode::EMPTY_GROUP,
  TalkExceptionCode::EXCEED_FOLLOW_LIMIT,
  TalkExceptionCode::UNSUPPORTED_ACCOUNT_TYPE,
  TalkExceptionCode::AGREEMENT_REQUIRED,
  TalkExceptionCode::SHOULD_RETRY,
  TalkExceptionCode::OVER_MAX_CHATS_PER_USER,
  TalkExceptionCode::NOT_AVAILABLE_API,
  TalkExceptionCode::INVALID_OTP
};
const char* _kTalkExceptionCodeNames[] = {
  "ILLEGAL_ARGUMENT",
  "AUTHENTICATION_FAILED",
  "DB_FAILED",
  "INVALID_STATE",
  "EXCESSIVE_ACCESS",
  "NOT_FOUND",
  "INVALID_LENGTH",
  "NOT_AVAILABLE_USER",
  "NOT_AUTHORIZED_DEVICE",
  "INVALID_MID",
  "NOT_A_MEMBER",
  "INCOMPATIBLE_APP_VERSION",
  "NOT_READY",
  "NOT_AVAILABLE_SESSION",
  "NOT_AUTHORIZED_SESSION",
  "SYSTEM_ERROR",
  "NO_AVAILABLE_VERIFICATION_METHOD",
  "NOT_AUTHENTICATED",
  "INVALID_IDENTITY_CREDENTIAL",
  "NOT_AVAILABLE_IDENTITY_IDENTIFIER",
  "INTERNAL_ERROR",
  "NO_SUCH_IDENTITY_IDENFIER",
  "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY",
  "ILLEGAL_IDENTITY_CREDENTIAL",
  "UNKNOWN_CHANNEL",
  "NO_SUCH_MESSAGE_BOX",
  "NOT_AVAILABLE_MESSAGE_BOX",
  "CHANNEL_DOES_NOT_MATCH",
  "NOT_YOUR_MESSAGE",
  "MESSAGE_DEFINED_ERROR",
  "USER_CANNOT_ACCEPT_PRESENTS",
  "USER_NOT_STICKER_OWNER",
  "MAINTENANCE_ERROR",
  "ACCOUNT_NOT_MATCHED",
  "ABUSE_BLOCK",
  "NOT_FRIEND",
  "NOT_ALLOWED_CALL",
  "BLOCK_FRIEND",
  "INCOMPATIBLE_VOIP_VERSION",
  "INVALID_SNS_ACCESS_TOKEN",
  "EXTERNAL_SERVICE_NOT_AVAILABLE",
  "NOT_ALLOWED_ADD_CONTACT",
  "NOT_CERTIFICATED",
  "NOT_ALLOWED_SECONDARY_DEVICE",
  "INVALID_PIN_CODE",
  "NOT_FOUND_IDENTITY_CREDENTIAL",
  "EXCEED_FILE_MAX_SIZE",
  "EXCEED_DAILY_QUOTA",
  "NOT_SUPPORT_SEND_FILE",
  "MUST_UPGRADE",
  "NOT_AVAILABLE_PIN_CODE_SESSION",
  "EXPIRED_REVISION",
  "NOT_YET_PHONE_NUMBER",
  "BAD_CALL_NUMBER",
  "UNAVAILABLE_CALL_NUMBER",
  "NOT_SUPPORT_CALL_SERVICE",
  "CONGESTION_CONTROL",
  "NO_BALANCE",
  "NOT_PERMITTED_CALLER_ID",
  "NO_CALLER_ID_LIMIT_EXCEEDED",
  "CALLER_ID_VERIFICATION_REQUIRED",
  "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
  "MESSAGE_NOT_FOUND",
  "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT",
  "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED",
  "ACCOUNT_MIGRATION_PINCODE_BLOCKED",
  "INVALID_PASSWORD_FORMAT",
  "FEATURE_RESTRICTED",
  "MESSAGE_NOT_DESTRUCTIBLE",
  "PAID_CALL_REDEEM_FAILED",
  "PREVENTED_JOIN_BY_TICKET",
  "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT",
  "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY",
  "SECURITY_CENTER_NOT_VERIFIED",
  "SECURITY_CENTER_BLOCKED_BY_SETTING",
  "SECURITY_CENTER_BLOCKED",
  "TALK_PROXY_EXCEPTION",
  "E2EE_INVALID_PROTOCOL",
  "E2EE_RETRY_ENCRYPT",
  "E2EE_UPDATE_SENDER_KEY",
  "E2EE_UPDATE_RECEIVER_KEY",
  "E2EE_INVALID_ARGUMENT",
  "E2EE_INVALID_VERSION",
  "E2EE_SENDER_DISABLED",
  "E2EE_RECEIVER_DISABLED",
  "E2EE_SENDER_NOT_ALLOWED",
  "E2EE_RECEIVER_NOT_ALLOWED",
  "E2EE_RESEND_FAIL",
  "E2EE_RESEND_OK",
  "HITOKOTO_BACKUP_NO_AVAILABLE_DATA",
  "E2EE_UPDATE_PRIMARY_DEVICE",
  "SUCCESS",
  "CANCEL",
  "E2EE_PRIMARY_NOT_SUPPORT",
  "E2EE_RETRY_PLAIN",
  "E2EE_RECREATE_GROUP_KEY",
  "E2EE_GROUP_TOO_MANY_MEMBERS",
  "SERVER_BUSY",
  "NOT_ALLOWED_ADD_FOLLOW",
  "INCOMING_FRIEND_REQUEST_LIMIT",
  "OUTGOING_FRIEND_REQUEST_LIMIT",
  "OUTGOING_FRIEND_REQUEST_QUOTA",
  "DUPLICATED",
  "BANNED",
  "NOT_AN_INVITEE",
  "NOT_AN_OUTSIDER",
  "EMPTY_GROUP",
  "EXCEED_FOLLOW_LIMIT",
  "UNSUPPORTED_ACCOUNT_TYPE",
  "AGREEMENT_REQUIRED",
  "SHOULD_RETRY",
  "OVER_MAX_CHATS_PER_USER",
  "NOT_AVAILABLE_API",
  "INVALID_OTP"
};
const std::map<int, const char*> _TalkExceptionCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(114, _kTalkExceptionCodeValues, _kTalkExceptionCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TalkExceptionCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TalkExceptionCode_VALUES_TO_NAMES.find(val);
  if (it != _TalkExceptionCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const TalkExceptionCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TalkExceptionCode_VALUES_TO_NAMES.find(val);
  if (it != _TalkExceptionCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kToTypeValues[] = {
  ToType::USER,
  ToType::ROOM,
  ToType::GROUP,
  ToType::SQUARE,
  ToType::SQUARE_CHAT,
  ToType::SQUARE_MEMBER,
  ToType::BOT
};
const char* _kToTypeNames[] = {
  "USER",
  "ROOM",
  "GROUP",
  "SQUARE",
  "SQUARE_CHAT",
  "SQUARE_MEMBER",
  "BOT"
};
const std::map<int, const char*> _ToType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kToTypeValues, _kToTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ToType::type& val) {
  std::map<int, const char*>::const_iterator it = _ToType_VALUES_TO_NAMES.find(val);
  if (it != _ToType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ToType::type& val) {
  std::map<int, const char*>::const_iterator it = _ToType_VALUES_TO_NAMES.find(val);
  if (it != _ToType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kUpdatedAttributeValues[] = {
  UpdatedAttribute::NAME,
  UpdatedAttribute::PICTURE_STATUS,
  UpdatedAttribute::PREVENTED_JOIN_BY_TICKET,
  UpdatedAttribute::NOTIFICATION_SETTING,
  UpdatedAttribute::INVITATION_TICKET,
  UpdatedAttribute::FAVORITE_TIMESTAMP,
  UpdatedAttribute::CHAT_TYPE
};
const char* _kUpdatedAttributeNames[] = {
  "NAME",
  "PICTURE_STATUS",
  "PREVENTED_JOIN_BY_TICKET",
  "NOTIFICATION_SETTING",
  "INVITATION_TICKET",
  "FAVORITE_TIMESTAMP",
  "CHAT_TYPE"
};
const std::map<int, const char*> _UpdatedAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kUpdatedAttributeValues, _kUpdatedAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const UpdatedAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _UpdatedAttribute_VALUES_TO_NAMES.find(val);
  if (it != _UpdatedAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const UpdatedAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _UpdatedAttribute_VALUES_TO_NAMES.find(val);
  if (it != _UpdatedAttribute_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


AvatarProfile::~AvatarProfile() noexcept {
}


void AvatarProfile::__set_version(const std::string& val) {
  this->version = val;
}

void AvatarProfile::__set_updatedMillis(const int64_t val) {
  this->updatedMillis = val;
}

void AvatarProfile::__set_thumbnail(const std::string& val) {
  this->thumbnail = val;
}
std::ostream& operator<<(std::ostream& out, const AvatarProfile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AvatarProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updatedMillis);
          this->__isset.updatedMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbnail);
          this->__isset.thumbnail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AvatarProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AvatarProfile");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedMillis", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->updatedMillis);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thumbnail", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->thumbnail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AvatarProfile &a, AvatarProfile &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.updatedMillis, b.updatedMillis);
  swap(a.thumbnail, b.thumbnail);
  swap(a.__isset, b.__isset);
}

AvatarProfile::AvatarProfile(const AvatarProfile& other0) {
  version = other0.version;
  updatedMillis = other0.updatedMillis;
  thumbnail = other0.thumbnail;
  __isset = other0.__isset;
}
AvatarProfile& AvatarProfile::operator=(const AvatarProfile& other1) {
  version = other1.version;
  updatedMillis = other1.updatedMillis;
  thumbnail = other1.thumbnail;
  __isset = other1.__isset;
  return *this;
}
void AvatarProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AvatarProfile(";
  out << "version=" << to_string(version);
  out << ", " << "updatedMillis=" << to_string(updatedMillis);
  out << ", " << "thumbnail=" << to_string(thumbnail);
  out << ")";
}


Chat::~Chat() noexcept {
}


void Chat::__set_type(const ChatType::type val) {
  this->type = val;
}

void Chat::__set_chatMid(const std::string& val) {
  this->chatMid = val;
}

void Chat::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Chat::__set_notificationDisabled(const bool val) {
  this->notificationDisabled = val;
}

void Chat::__set_favoriteTimestamp(const int64_t val) {
  this->favoriteTimestamp = val;
}

void Chat::__set_chatName(const std::string& val) {
  this->chatName = val;
}

void Chat::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void Chat::__set_extra(const Extra& val) {
  this->extra = val;
}
std::ostream& operator<<(std::ostream& out, const Chat& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Chat::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type = (ChatType::type)ecast2;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMid);
          this->__isset.chatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationDisabled);
          this->__isset.notificationDisabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->favoriteTimestamp);
          this->__isset.favoriteTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatName);
          this->__isset.chatName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->extra.read(iprot);
          this->__isset.extra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Chat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Chat");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationDisabled", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->notificationDisabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favoriteTimestamp", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->favoriteTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->chatName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->extra.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Chat &a, Chat &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.chatMid, b.chatMid);
  swap(a.createdTime, b.createdTime);
  swap(a.notificationDisabled, b.notificationDisabled);
  swap(a.favoriteTimestamp, b.favoriteTimestamp);
  swap(a.chatName, b.chatName);
  swap(a.picturePath, b.picturePath);
  swap(a.extra, b.extra);
  swap(a.__isset, b.__isset);
}

Chat::Chat(const Chat& other3) {
  type = other3.type;
  chatMid = other3.chatMid;
  createdTime = other3.createdTime;
  notificationDisabled = other3.notificationDisabled;
  favoriteTimestamp = other3.favoriteTimestamp;
  chatName = other3.chatName;
  picturePath = other3.picturePath;
  extra = other3.extra;
  __isset = other3.__isset;
}
Chat& Chat::operator=(const Chat& other4) {
  type = other4.type;
  chatMid = other4.chatMid;
  createdTime = other4.createdTime;
  notificationDisabled = other4.notificationDisabled;
  favoriteTimestamp = other4.favoriteTimestamp;
  chatName = other4.chatName;
  picturePath = other4.picturePath;
  extra = other4.extra;
  __isset = other4.__isset;
  return *this;
}
void Chat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Chat(";
  out << "type=" << to_string(type);
  out << ", " << "chatMid=" << to_string(chatMid);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "notificationDisabled=" << to_string(notificationDisabled);
  out << ", " << "favoriteTimestamp=" << to_string(favoriteTimestamp);
  out << ", " << "chatName=" << to_string(chatName);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "extra=" << to_string(extra);
  out << ")";
}


AcceptChatInvitationRequest::~AcceptChatInvitationRequest() noexcept {
}


void AcceptChatInvitationRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void AcceptChatInvitationRequest::__set_chatMid(const std::string& val) {
  this->chatMid = val;
}
std::ostream& operator<<(std::ostream& out, const AcceptChatInvitationRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AcceptChatInvitationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMid);
          this->__isset.chatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AcceptChatInvitationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AcceptChatInvitationRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AcceptChatInvitationRequest &a, AcceptChatInvitationRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.chatMid, b.chatMid);
  swap(a.__isset, b.__isset);
}

AcceptChatInvitationRequest::AcceptChatInvitationRequest(const AcceptChatInvitationRequest& other5) {
  reqSeq = other5.reqSeq;
  chatMid = other5.chatMid;
  __isset = other5.__isset;
}
AcceptChatInvitationRequest& AcceptChatInvitationRequest::operator=(const AcceptChatInvitationRequest& other6) {
  reqSeq = other6.reqSeq;
  chatMid = other6.chatMid;
  __isset = other6.__isset;
  return *this;
}
void AcceptChatInvitationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AcceptChatInvitationRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "chatMid=" << to_string(chatMid);
  out << ")";
}


AcceptChatInvitationResponse::~AcceptChatInvitationResponse() noexcept {
}

std::ostream& operator<<(std::ostream& out, const AcceptChatInvitationResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AcceptChatInvitationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AcceptChatInvitationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AcceptChatInvitationResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AcceptChatInvitationResponse &a, AcceptChatInvitationResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

AcceptChatInvitationResponse::AcceptChatInvitationResponse(const AcceptChatInvitationResponse& other7) {
  (void) other7;
}
AcceptChatInvitationResponse& AcceptChatInvitationResponse::operator=(const AcceptChatInvitationResponse& other8) {
  (void) other8;
  return *this;
}
void AcceptChatInvitationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AcceptChatInvitationResponse(";
  out << ")";
}


AcceptChatInvitationByTicketRequest::~AcceptChatInvitationByTicketRequest() noexcept {
}


void AcceptChatInvitationByTicketRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void AcceptChatInvitationByTicketRequest::__set_chatMid(const std::string& val) {
  this->chatMid = val;
}

void AcceptChatInvitationByTicketRequest::__set_ticketId(const std::string& val) {
  this->ticketId = val;
}
std::ostream& operator<<(std::ostream& out, const AcceptChatInvitationByTicketRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AcceptChatInvitationByTicketRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMid);
          this->__isset.chatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticketId);
          this->__isset.ticketId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AcceptChatInvitationByTicketRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AcceptChatInvitationByTicketRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ticketId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ticketId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AcceptChatInvitationByTicketRequest &a, AcceptChatInvitationByTicketRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.chatMid, b.chatMid);
  swap(a.ticketId, b.ticketId);
  swap(a.__isset, b.__isset);
}

AcceptChatInvitationByTicketRequest::AcceptChatInvitationByTicketRequest(const AcceptChatInvitationByTicketRequest& other9) {
  reqSeq = other9.reqSeq;
  chatMid = other9.chatMid;
  ticketId = other9.ticketId;
  __isset = other9.__isset;
}
AcceptChatInvitationByTicketRequest& AcceptChatInvitationByTicketRequest::operator=(const AcceptChatInvitationByTicketRequest& other10) {
  reqSeq = other10.reqSeq;
  chatMid = other10.chatMid;
  ticketId = other10.ticketId;
  __isset = other10.__isset;
  return *this;
}
void AcceptChatInvitationByTicketRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AcceptChatInvitationByTicketRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "chatMid=" << to_string(chatMid);
  out << ", " << "ticketId=" << to_string(ticketId);
  out << ")";
}


AcceptChatInvitationByTicketResponse::~AcceptChatInvitationByTicketResponse() noexcept {
}

std::ostream& operator<<(std::ostream& out, const AcceptChatInvitationByTicketResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AcceptChatInvitationByTicketResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AcceptChatInvitationByTicketResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AcceptChatInvitationByTicketResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AcceptChatInvitationByTicketResponse &a, AcceptChatInvitationByTicketResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

AcceptChatInvitationByTicketResponse::AcceptChatInvitationByTicketResponse(const AcceptChatInvitationByTicketResponse& other11) {
  (void) other11;
}
AcceptChatInvitationByTicketResponse& AcceptChatInvitationByTicketResponse::operator=(const AcceptChatInvitationByTicketResponse& other12) {
  (void) other12;
  return *this;
}
void AcceptChatInvitationByTicketResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AcceptChatInvitationByTicketResponse(";
  out << ")";
}


CancelChatInvitationRequest::~CancelChatInvitationRequest() noexcept {
}


void CancelChatInvitationRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void CancelChatInvitationRequest::__set_chatMid(const std::string& val) {
  this->chatMid = val;
}

void CancelChatInvitationRequest::__set_targetUserMids(const std::set<std::string> & val) {
  this->targetUserMids = val;
}
std::ostream& operator<<(std::ostream& out, const CancelChatInvitationRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CancelChatInvitationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMid);
          this->__isset.chatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->targetUserMids.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readSetBegin(_etype16, _size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              std::string _elem18;
              xfer += iprot->readString(_elem18);
              this->targetUserMids.insert(_elem18);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.targetUserMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CancelChatInvitationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CancelChatInvitationRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetUserMids", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->targetUserMids.size()));
    std::set<std::string> ::const_iterator _iter19;
    for (_iter19 = this->targetUserMids.begin(); _iter19 != this->targetUserMids.end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CancelChatInvitationRequest &a, CancelChatInvitationRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.chatMid, b.chatMid);
  swap(a.targetUserMids, b.targetUserMids);
  swap(a.__isset, b.__isset);
}

CancelChatInvitationRequest::CancelChatInvitationRequest(const CancelChatInvitationRequest& other20) {
  reqSeq = other20.reqSeq;
  chatMid = other20.chatMid;
  targetUserMids = other20.targetUserMids;
  __isset = other20.__isset;
}
CancelChatInvitationRequest& CancelChatInvitationRequest::operator=(const CancelChatInvitationRequest& other21) {
  reqSeq = other21.reqSeq;
  chatMid = other21.chatMid;
  targetUserMids = other21.targetUserMids;
  __isset = other21.__isset;
  return *this;
}
void CancelChatInvitationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CancelChatInvitationRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "chatMid=" << to_string(chatMid);
  out << ", " << "targetUserMids=" << to_string(targetUserMids);
  out << ")";
}


CancelChatInvitationResponse::~CancelChatInvitationResponse() noexcept {
}

std::ostream& operator<<(std::ostream& out, const CancelChatInvitationResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CancelChatInvitationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CancelChatInvitationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CancelChatInvitationResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CancelChatInvitationResponse &a, CancelChatInvitationResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

CancelChatInvitationResponse::CancelChatInvitationResponse(const CancelChatInvitationResponse& other22) {
  (void) other22;
}
CancelChatInvitationResponse& CancelChatInvitationResponse::operator=(const CancelChatInvitationResponse& other23) {
  (void) other23;
  return *this;
}
void CancelChatInvitationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CancelChatInvitationResponse(";
  out << ")";
}


CreateChatRequest::~CreateChatRequest() noexcept {
}


void CreateChatRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void CreateChatRequest::__set_type(const ChatType::type val) {
  this->type = val;
}

void CreateChatRequest::__set_name(const std::string& val) {
  this->name = val;
}

void CreateChatRequest::__set_targetUserMids(const std::set<std::string> & val) {
  this->targetUserMids = val;
}

void CreateChatRequest::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}
std::ostream& operator<<(std::ostream& out, const CreateChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->type = (ChatType::type)ecast24;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->targetUserMids.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readSetBegin(_etype28, _size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              std::string _elem30;
              xfer += iprot->readString(_elem30);
              this->targetUserMids.insert(_elem30);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.targetUserMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateChatRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetUserMids", ::apache::thrift::protocol::T_SET, 4);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->targetUserMids.size()));
    std::set<std::string> ::const_iterator _iter31;
    for (_iter31 = this->targetUserMids.begin(); _iter31 != this->targetUserMids.end(); ++_iter31)
    {
      xfer += oprot->writeString((*_iter31));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateChatRequest &a, CreateChatRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.type, b.type);
  swap(a.name, b.name);
  swap(a.targetUserMids, b.targetUserMids);
  swap(a.picturePath, b.picturePath);
  swap(a.__isset, b.__isset);
}

CreateChatRequest::CreateChatRequest(const CreateChatRequest& other32) {
  reqSeq = other32.reqSeq;
  type = other32.type;
  name = other32.name;
  targetUserMids = other32.targetUserMids;
  picturePath = other32.picturePath;
  __isset = other32.__isset;
}
CreateChatRequest& CreateChatRequest::operator=(const CreateChatRequest& other33) {
  reqSeq = other33.reqSeq;
  type = other33.type;
  name = other33.name;
  targetUserMids = other33.targetUserMids;
  picturePath = other33.picturePath;
  __isset = other33.__isset;
  return *this;
}
void CreateChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateChatRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "type=" << to_string(type);
  out << ", " << "name=" << to_string(name);
  out << ", " << "targetUserMids=" << to_string(targetUserMids);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ")";
}


CreateChatResponse::~CreateChatResponse() noexcept {
}


void CreateChatResponse::__set_chat(const Chat& val) {
  this->chat = val;
}
std::ostream& operator<<(std::ostream& out, const CreateChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->chat.read(iprot);
          this->__isset.chat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateChatResponse");

  xfer += oprot->writeFieldBegin("chat", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->chat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateChatResponse &a, CreateChatResponse &b) {
  using ::std::swap;
  swap(a.chat, b.chat);
  swap(a.__isset, b.__isset);
}

CreateChatResponse::CreateChatResponse(const CreateChatResponse& other34) {
  chat = other34.chat;
  __isset = other34.__isset;
}
CreateChatResponse& CreateChatResponse::operator=(const CreateChatResponse& other35) {
  chat = other35.chat;
  __isset = other35.__isset;
  return *this;
}
void CreateChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateChatResponse(";
  out << "chat=" << to_string(chat);
  out << ")";
}


Contact::~Contact() noexcept {
}


void Contact::__set_mid(const std::string& val) {
  this->mid = val;
}

void Contact::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Contact::__set_type(const ContactType::type val) {
  this->type = val;
}

void Contact::__set_status(const ContactStatus::type val) {
  this->status = val;
}

void Contact::__set_relation(const Relation::type val) {
  this->relation = val;
}

void Contact::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void Contact::__set_phoneticName(const std::string& val) {
  this->phoneticName = val;
}

void Contact::__set_pictureStatus(const std::string& val) {
  this->pictureStatus = val;
}

void Contact::__set_thumbnailUrl(const std::string& val) {
  this->thumbnailUrl = val;
}

void Contact::__set_statusMessage(const std::string& val) {
  this->statusMessage = val;
}

void Contact::__set_displayNameOverridden(const std::string& val) {
  this->displayNameOverridden = val;
}

void Contact::__set_favoriteTime(const int64_t val) {
  this->favoriteTime = val;
}

void Contact::__set_capableVoiceCall(const bool val) {
  this->capableVoiceCall = val;
}

void Contact::__set_capableVideoCall(const bool val) {
  this->capableVideoCall = val;
}

void Contact::__set_capableMyhome(const bool val) {
  this->capableMyhome = val;
}

void Contact::__set_capableBuddy(const bool val) {
  this->capableBuddy = val;
}

void Contact::__set_attributes(const int32_t val) {
  this->attributes = val;
}

void Contact::__set_settings(const int64_t val) {
  this->settings = val;
}

void Contact::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void Contact::__set_recommendParams(const std::string& val) {
  this->recommendParams = val;
}

void Contact::__set_friendRequestStatus(const FriendRequestStatus::type val) {
  this->friendRequestStatus = val;
}

void Contact::__set_musicProfile(const std::string& val) {
  this->musicProfile = val;
}

void Contact::__set_videoProfile(const std::string& val) {
  this->videoProfile = val;
}

void Contact::__set_statusMessageContentMetadata(const std::map<std::string, std::string> & val) {
  this->statusMessageContentMetadata = val;
}

void Contact::__set_avatarProfile(const AvatarProfile& val) {
  this->avatarProfile = val;
}
std::ostream& operator<<(std::ostream& out, const Contact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Contact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->type = (ContactType::type)ecast36;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast37;
          xfer += iprot->readI32(ecast37);
          this->status = (ContactStatus::type)ecast37;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast38;
          xfer += iprot->readI32(ecast38);
          this->relation = (Relation::type)ecast38;
          this->__isset.relation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneticName);
          this->__isset.phoneticName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureStatus);
          this->__isset.pictureStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbnailUrl);
          this->__isset.thumbnailUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMessage);
          this->__isset.statusMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayNameOverridden);
          this->__isset.displayNameOverridden = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->favoriteTime);
          this->__isset.favoriteTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capableVoiceCall);
          this->__isset.capableVoiceCall = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capableVideoCall);
          this->__isset.capableVideoCall = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capableMyhome);
          this->__isset.capableMyhome = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capableBuddy);
          this->__isset.capableBuddy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attributes);
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->settings);
          this->__isset.settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recommendParams);
          this->__isset.recommendParams = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast39;
          xfer += iprot->readI32(ecast39);
          this->friendRequestStatus = (FriendRequestStatus::type)ecast39;
          this->__isset.friendRequestStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->musicProfile);
          this->__isset.musicProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->videoProfile);
          this->__isset.videoProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->statusMessageContentMetadata.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _ktype41;
            ::apache::thrift::protocol::TType _vtype42;
            xfer += iprot->readMapBegin(_ktype41, _vtype42, _size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              std::string _key45;
              xfer += iprot->readString(_key45);
              std::string& _val46 = this->statusMessageContentMetadata[_key45];
              xfer += iprot->readString(_val46);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.statusMessageContentMetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->avatarProfile.read(iprot);
          this->__isset.avatarProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Contact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Contact");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relation", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32((int32_t)this->relation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneticName", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->phoneticName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureStatus", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->pictureStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thumbnailUrl", ::apache::thrift::protocol::T_STRING, 25);
  xfer += oprot->writeString(this->thumbnailUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessage", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->statusMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayNameOverridden", ::apache::thrift::protocol::T_STRING, 27);
  xfer += oprot->writeString(this->displayNameOverridden);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favoriteTime", ::apache::thrift::protocol::T_I64, 28);
  xfer += oprot->writeI64(this->favoriteTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capableVoiceCall", ::apache::thrift::protocol::T_BOOL, 31);
  xfer += oprot->writeBool(this->capableVoiceCall);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capableVideoCall", ::apache::thrift::protocol::T_BOOL, 32);
  xfer += oprot->writeBool(this->capableVideoCall);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capableMyhome", ::apache::thrift::protocol::T_BOOL, 33);
  xfer += oprot->writeBool(this->capableMyhome);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capableBuddy", ::apache::thrift::protocol::T_BOOL, 34);
  xfer += oprot->writeBool(this->capableBuddy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->attributes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("settings", ::apache::thrift::protocol::T_I64, 36);
  xfer += oprot->writeI64(this->settings);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 37);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recommendParams", ::apache::thrift::protocol::T_STRING, 38);
  xfer += oprot->writeString(this->recommendParams);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendRequestStatus", ::apache::thrift::protocol::T_I32, 39);
  xfer += oprot->writeI32((int32_t)this->friendRequestStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("musicProfile", ::apache::thrift::protocol::T_STRING, 40);
  xfer += oprot->writeString(this->musicProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("videoProfile", ::apache::thrift::protocol::T_STRING, 42);
  xfer += oprot->writeString(this->videoProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessageContentMetadata", ::apache::thrift::protocol::T_MAP, 43);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->statusMessageContentMetadata.size()));
    std::map<std::string, std::string> ::const_iterator _iter47;
    for (_iter47 = this->statusMessageContentMetadata.begin(); _iter47 != this->statusMessageContentMetadata.end(); ++_iter47)
    {
      xfer += oprot->writeString(_iter47->first);
      xfer += oprot->writeString(_iter47->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatarProfile", ::apache::thrift::protocol::T_STRUCT, 44);
  xfer += this->avatarProfile.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Contact &a, Contact &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.createdTime, b.createdTime);
  swap(a.type, b.type);
  swap(a.status, b.status);
  swap(a.relation, b.relation);
  swap(a.displayName, b.displayName);
  swap(a.phoneticName, b.phoneticName);
  swap(a.pictureStatus, b.pictureStatus);
  swap(a.thumbnailUrl, b.thumbnailUrl);
  swap(a.statusMessage, b.statusMessage);
  swap(a.displayNameOverridden, b.displayNameOverridden);
  swap(a.favoriteTime, b.favoriteTime);
  swap(a.capableVoiceCall, b.capableVoiceCall);
  swap(a.capableVideoCall, b.capableVideoCall);
  swap(a.capableMyhome, b.capableMyhome);
  swap(a.capableBuddy, b.capableBuddy);
  swap(a.attributes, b.attributes);
  swap(a.settings, b.settings);
  swap(a.picturePath, b.picturePath);
  swap(a.recommendParams, b.recommendParams);
  swap(a.friendRequestStatus, b.friendRequestStatus);
  swap(a.musicProfile, b.musicProfile);
  swap(a.videoProfile, b.videoProfile);
  swap(a.statusMessageContentMetadata, b.statusMessageContentMetadata);
  swap(a.avatarProfile, b.avatarProfile);
  swap(a.__isset, b.__isset);
}

Contact::Contact(const Contact& other48) {
  mid = other48.mid;
  createdTime = other48.createdTime;
  type = other48.type;
  status = other48.status;
  relation = other48.relation;
  displayName = other48.displayName;
  phoneticName = other48.phoneticName;
  pictureStatus = other48.pictureStatus;
  thumbnailUrl = other48.thumbnailUrl;
  statusMessage = other48.statusMessage;
  displayNameOverridden = other48.displayNameOverridden;
  favoriteTime = other48.favoriteTime;
  capableVoiceCall = other48.capableVoiceCall;
  capableVideoCall = other48.capableVideoCall;
  capableMyhome = other48.capableMyhome;
  capableBuddy = other48.capableBuddy;
  attributes = other48.attributes;
  settings = other48.settings;
  picturePath = other48.picturePath;
  recommendParams = other48.recommendParams;
  friendRequestStatus = other48.friendRequestStatus;
  musicProfile = other48.musicProfile;
  videoProfile = other48.videoProfile;
  statusMessageContentMetadata = other48.statusMessageContentMetadata;
  avatarProfile = other48.avatarProfile;
  __isset = other48.__isset;
}
Contact& Contact::operator=(const Contact& other49) {
  mid = other49.mid;
  createdTime = other49.createdTime;
  type = other49.type;
  status = other49.status;
  relation = other49.relation;
  displayName = other49.displayName;
  phoneticName = other49.phoneticName;
  pictureStatus = other49.pictureStatus;
  thumbnailUrl = other49.thumbnailUrl;
  statusMessage = other49.statusMessage;
  displayNameOverridden = other49.displayNameOverridden;
  favoriteTime = other49.favoriteTime;
  capableVoiceCall = other49.capableVoiceCall;
  capableVideoCall = other49.capableVideoCall;
  capableMyhome = other49.capableMyhome;
  capableBuddy = other49.capableBuddy;
  attributes = other49.attributes;
  settings = other49.settings;
  picturePath = other49.picturePath;
  recommendParams = other49.recommendParams;
  friendRequestStatus = other49.friendRequestStatus;
  musicProfile = other49.musicProfile;
  videoProfile = other49.videoProfile;
  statusMessageContentMetadata = other49.statusMessageContentMetadata;
  avatarProfile = other49.avatarProfile;
  __isset = other49.__isset;
  return *this;
}
void Contact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Contact(";
  out << "mid=" << to_string(mid);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "type=" << to_string(type);
  out << ", " << "status=" << to_string(status);
  out << ", " << "relation=" << to_string(relation);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "phoneticName=" << to_string(phoneticName);
  out << ", " << "pictureStatus=" << to_string(pictureStatus);
  out << ", " << "thumbnailUrl=" << to_string(thumbnailUrl);
  out << ", " << "statusMessage=" << to_string(statusMessage);
  out << ", " << "displayNameOverridden=" << to_string(displayNameOverridden);
  out << ", " << "favoriteTime=" << to_string(favoriteTime);
  out << ", " << "capableVoiceCall=" << to_string(capableVoiceCall);
  out << ", " << "capableVideoCall=" << to_string(capableVideoCall);
  out << ", " << "capableMyhome=" << to_string(capableMyhome);
  out << ", " << "capableBuddy=" << to_string(capableBuddy);
  out << ", " << "attributes=" << to_string(attributes);
  out << ", " << "settings=" << to_string(settings);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "recommendParams=" << to_string(recommendParams);
  out << ", " << "friendRequestStatus=" << to_string(friendRequestStatus);
  out << ", " << "musicProfile=" << to_string(musicProfile);
  out << ", " << "videoProfile=" << to_string(videoProfile);
  out << ", " << "statusMessageContentMetadata=" << to_string(statusMessageContentMetadata);
  out << ", " << "avatarProfile=" << to_string(avatarProfile);
  out << ")";
}


DeleteSelfFromChatRequest::~DeleteSelfFromChatRequest() noexcept {
}


void DeleteSelfFromChatRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void DeleteSelfFromChatRequest::__set_chatMid(const std::string& val) {
  this->chatMid = val;
}

void DeleteSelfFromChatRequest::__set_lastSeenMessageDeliveredTime(const int64_t val) {
  this->lastSeenMessageDeliveredTime = val;
}

void DeleteSelfFromChatRequest::__set_lastSeenMessageId(const std::string& val) {
  this->lastSeenMessageId = val;
}

void DeleteSelfFromChatRequest::__set_lastMessageDeliveredTime(const int64_t val) {
  this->lastMessageDeliveredTime = val;
}

void DeleteSelfFromChatRequest::__set_lastMessageId(const std::string& val) {
  this->lastMessageId = val;
}
std::ostream& operator<<(std::ostream& out, const DeleteSelfFromChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteSelfFromChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMid);
          this->__isset.chatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastSeenMessageDeliveredTime);
          this->__isset.lastSeenMessageDeliveredTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastSeenMessageId);
          this->__isset.lastSeenMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastMessageDeliveredTime);
          this->__isset.lastMessageDeliveredTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastMessageId);
          this->__isset.lastMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteSelfFromChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteSelfFromChatRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastSeenMessageDeliveredTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->lastSeenMessageDeliveredTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastSeenMessageId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->lastSeenMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastMessageDeliveredTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->lastMessageDeliveredTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastMessageId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->lastMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteSelfFromChatRequest &a, DeleteSelfFromChatRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.chatMid, b.chatMid);
  swap(a.lastSeenMessageDeliveredTime, b.lastSeenMessageDeliveredTime);
  swap(a.lastSeenMessageId, b.lastSeenMessageId);
  swap(a.lastMessageDeliveredTime, b.lastMessageDeliveredTime);
  swap(a.lastMessageId, b.lastMessageId);
  swap(a.__isset, b.__isset);
}

DeleteSelfFromChatRequest::DeleteSelfFromChatRequest(const DeleteSelfFromChatRequest& other50) {
  reqSeq = other50.reqSeq;
  chatMid = other50.chatMid;
  lastSeenMessageDeliveredTime = other50.lastSeenMessageDeliveredTime;
  lastSeenMessageId = other50.lastSeenMessageId;
  lastMessageDeliveredTime = other50.lastMessageDeliveredTime;
  lastMessageId = other50.lastMessageId;
  __isset = other50.__isset;
}
DeleteSelfFromChatRequest& DeleteSelfFromChatRequest::operator=(const DeleteSelfFromChatRequest& other51) {
  reqSeq = other51.reqSeq;
  chatMid = other51.chatMid;
  lastSeenMessageDeliveredTime = other51.lastSeenMessageDeliveredTime;
  lastSeenMessageId = other51.lastSeenMessageId;
  lastMessageDeliveredTime = other51.lastMessageDeliveredTime;
  lastMessageId = other51.lastMessageId;
  __isset = other51.__isset;
  return *this;
}
void DeleteSelfFromChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteSelfFromChatRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "chatMid=" << to_string(chatMid);
  out << ", " << "lastSeenMessageDeliveredTime=" << to_string(lastSeenMessageDeliveredTime);
  out << ", " << "lastSeenMessageId=" << to_string(lastSeenMessageId);
  out << ", " << "lastMessageDeliveredTime=" << to_string(lastMessageDeliveredTime);
  out << ", " << "lastMessageId=" << to_string(lastMessageId);
  out << ")";
}


DeleteSelfFromChatResponse::~DeleteSelfFromChatResponse() noexcept {
}

std::ostream& operator<<(std::ostream& out, const DeleteSelfFromChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteSelfFromChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteSelfFromChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteSelfFromChatResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteSelfFromChatResponse &a, DeleteSelfFromChatResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DeleteSelfFromChatResponse::DeleteSelfFromChatResponse(const DeleteSelfFromChatResponse& other52) {
  (void) other52;
}
DeleteSelfFromChatResponse& DeleteSelfFromChatResponse::operator=(const DeleteSelfFromChatResponse& other53) {
  (void) other53;
  return *this;
}
void DeleteSelfFromChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteSelfFromChatResponse(";
  out << ")";
}


DeleteOtherFromChatRequest::~DeleteOtherFromChatRequest() noexcept {
}


void DeleteOtherFromChatRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void DeleteOtherFromChatRequest::__set_chatMid(const std::string& val) {
  this->chatMid = val;
}

void DeleteOtherFromChatRequest::__set_targetUserMids(const std::set<std::string> & val) {
  this->targetUserMids = val;
}
std::ostream& operator<<(std::ostream& out, const DeleteOtherFromChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteOtherFromChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMid);
          this->__isset.chatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->targetUserMids.clear();
            uint32_t _size54;
            ::apache::thrift::protocol::TType _etype57;
            xfer += iprot->readSetBegin(_etype57, _size54);
            uint32_t _i58;
            for (_i58 = 0; _i58 < _size54; ++_i58)
            {
              std::string _elem59;
              xfer += iprot->readString(_elem59);
              this->targetUserMids.insert(_elem59);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.targetUserMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteOtherFromChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteOtherFromChatRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetUserMids", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->targetUserMids.size()));
    std::set<std::string> ::const_iterator _iter60;
    for (_iter60 = this->targetUserMids.begin(); _iter60 != this->targetUserMids.end(); ++_iter60)
    {
      xfer += oprot->writeString((*_iter60));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteOtherFromChatRequest &a, DeleteOtherFromChatRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.chatMid, b.chatMid);
  swap(a.targetUserMids, b.targetUserMids);
  swap(a.__isset, b.__isset);
}

DeleteOtherFromChatRequest::DeleteOtherFromChatRequest(const DeleteOtherFromChatRequest& other61) {
  reqSeq = other61.reqSeq;
  chatMid = other61.chatMid;
  targetUserMids = other61.targetUserMids;
  __isset = other61.__isset;
}
DeleteOtherFromChatRequest& DeleteOtherFromChatRequest::operator=(const DeleteOtherFromChatRequest& other62) {
  reqSeq = other62.reqSeq;
  chatMid = other62.chatMid;
  targetUserMids = other62.targetUserMids;
  __isset = other62.__isset;
  return *this;
}
void DeleteOtherFromChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteOtherFromChatRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "chatMid=" << to_string(chatMid);
  out << ", " << "targetUserMids=" << to_string(targetUserMids);
  out << ")";
}


DeleteOtherFromChatResponse::~DeleteOtherFromChatResponse() noexcept {
}

std::ostream& operator<<(std::ostream& out, const DeleteOtherFromChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteOtherFromChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteOtherFromChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteOtherFromChatResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteOtherFromChatResponse &a, DeleteOtherFromChatResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DeleteOtherFromChatResponse::DeleteOtherFromChatResponse(const DeleteOtherFromChatResponse& other63) {
  (void) other63;
}
DeleteOtherFromChatResponse& DeleteOtherFromChatResponse::operator=(const DeleteOtherFromChatResponse& other64) {
  (void) other64;
  return *this;
}
void DeleteOtherFromChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteOtherFromChatResponse(";
  out << ")";
}


Extra::~Extra() noexcept {
}


void Extra::__set_groupExtra(const GroupExtra& val) {
  this->groupExtra = val;
}

void Extra::__set_peerExtra(const PeerExtra& val) {
  this->peerExtra = val;
}
std::ostream& operator<<(std::ostream& out, const Extra& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Extra::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupExtra.read(iprot);
          this->__isset.groupExtra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->peerExtra.read(iprot);
          this->__isset.peerExtra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Extra::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Extra");

  xfer += oprot->writeFieldBegin("groupExtra", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->groupExtra.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("peerExtra", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->peerExtra.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Extra &a, Extra &b) {
  using ::std::swap;
  swap(a.groupExtra, b.groupExtra);
  swap(a.peerExtra, b.peerExtra);
  swap(a.__isset, b.__isset);
}

Extra::Extra(const Extra& other65) {
  groupExtra = other65.groupExtra;
  peerExtra = other65.peerExtra;
  __isset = other65.__isset;
}
Extra& Extra::operator=(const Extra& other66) {
  groupExtra = other66.groupExtra;
  peerExtra = other66.peerExtra;
  __isset = other66.__isset;
  return *this;
}
void Extra::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Extra(";
  out << "groupExtra=" << to_string(groupExtra);
  out << ", " << "peerExtra=" << to_string(peerExtra);
  out << ")";
}


FindChatByTicketRequest::~FindChatByTicketRequest() noexcept {
}


void FindChatByTicketRequest::__set_ticketId(const std::string& val) {
  this->ticketId = val;
}
std::ostream& operator<<(std::ostream& out, const FindChatByTicketRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FindChatByTicketRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticketId);
          this->__isset.ticketId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FindChatByTicketRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FindChatByTicketRequest");

  xfer += oprot->writeFieldBegin("ticketId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ticketId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FindChatByTicketRequest &a, FindChatByTicketRequest &b) {
  using ::std::swap;
  swap(a.ticketId, b.ticketId);
  swap(a.__isset, b.__isset);
}

FindChatByTicketRequest::FindChatByTicketRequest(const FindChatByTicketRequest& other67) {
  ticketId = other67.ticketId;
  __isset = other67.__isset;
}
FindChatByTicketRequest& FindChatByTicketRequest::operator=(const FindChatByTicketRequest& other68) {
  ticketId = other68.ticketId;
  __isset = other68.__isset;
  return *this;
}
void FindChatByTicketRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FindChatByTicketRequest(";
  out << "ticketId=" << to_string(ticketId);
  out << ")";
}


FindChatByTicketResponse::~FindChatByTicketResponse() noexcept {
}


void FindChatByTicketResponse::__set_chat(const Chat& val) {
  this->chat = val;
}
std::ostream& operator<<(std::ostream& out, const FindChatByTicketResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FindChatByTicketResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->chat.read(iprot);
          this->__isset.chat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FindChatByTicketResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FindChatByTicketResponse");

  xfer += oprot->writeFieldBegin("chat", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->chat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FindChatByTicketResponse &a, FindChatByTicketResponse &b) {
  using ::std::swap;
  swap(a.chat, b.chat);
  swap(a.__isset, b.__isset);
}

FindChatByTicketResponse::FindChatByTicketResponse(const FindChatByTicketResponse& other69) {
  chat = other69.chat;
  __isset = other69.__isset;
}
FindChatByTicketResponse& FindChatByTicketResponse::operator=(const FindChatByTicketResponse& other70) {
  chat = other70.chat;
  __isset = other70.__isset;
  return *this;
}
void FindChatByTicketResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FindChatByTicketResponse(";
  out << "chat=" << to_string(chat);
  out << ")";
}


FetchOperationsRequest::~FetchOperationsRequest() noexcept {
}


void FetchOperationsRequest::__set_deviceId(const std::string& val) {
  this->deviceId = val;
}

void FetchOperationsRequest::__set_offsetFrom(const int64_t val) {
  this->offsetFrom = val;
}
std::ostream& operator<<(std::ostream& out, const FetchOperationsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FetchOperationsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offsetFrom);
          this->__isset.offsetFrom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FetchOperationsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FetchOperationsRequest");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offsetFrom", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->offsetFrom);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FetchOperationsRequest &a, FetchOperationsRequest &b) {
  using ::std::swap;
  swap(a.deviceId, b.deviceId);
  swap(a.offsetFrom, b.offsetFrom);
  swap(a.__isset, b.__isset);
}

FetchOperationsRequest::FetchOperationsRequest(const FetchOperationsRequest& other71) {
  deviceId = other71.deviceId;
  offsetFrom = other71.offsetFrom;
  __isset = other71.__isset;
}
FetchOperationsRequest& FetchOperationsRequest::operator=(const FetchOperationsRequest& other72) {
  deviceId = other72.deviceId;
  offsetFrom = other72.offsetFrom;
  __isset = other72.__isset;
  return *this;
}
void FetchOperationsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FetchOperationsRequest(";
  out << "deviceId=" << to_string(deviceId);
  out << ", " << "offsetFrom=" << to_string(offsetFrom);
  out << ")";
}


FetchOperationsResponse::~FetchOperationsResponse() noexcept {
}


void FetchOperationsResponse::__set_operations(const std::vector<Operation> & val) {
  this->operations = val;
}

void FetchOperationsResponse::__set_hasNext(const bool val) {
  this->hasNext = val;
}
std::ostream& operator<<(std::ostream& out, const FetchOperationsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FetchOperationsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->operations.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->operations.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += this->operations[_i77].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.operations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasNext);
          this->__isset.hasNext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FetchOperationsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FetchOperationsResponse");

  xfer += oprot->writeFieldBegin("operations", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->operations.size()));
    std::vector<Operation> ::const_iterator _iter78;
    for (_iter78 = this->operations.begin(); _iter78 != this->operations.end(); ++_iter78)
    {
      xfer += (*_iter78).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasNext", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->hasNext);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FetchOperationsResponse &a, FetchOperationsResponse &b) {
  using ::std::swap;
  swap(a.operations, b.operations);
  swap(a.hasNext, b.hasNext);
  swap(a.__isset, b.__isset);
}

FetchOperationsResponse::FetchOperationsResponse(const FetchOperationsResponse& other79) {
  operations = other79.operations;
  hasNext = other79.hasNext;
  __isset = other79.__isset;
}
FetchOperationsResponse& FetchOperationsResponse::operator=(const FetchOperationsResponse& other80) {
  operations = other80.operations;
  hasNext = other80.hasNext;
  __isset = other80.__isset;
  return *this;
}
void FetchOperationsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FetchOperationsResponse(";
  out << "operations=" << to_string(operations);
  out << ", " << "hasNext=" << to_string(hasNext);
  out << ")";
}


GroupExtra::~GroupExtra() noexcept {
}


void GroupExtra::__set_creator(const std::string& val) {
  this->creator = val;
}

void GroupExtra::__set_preventedJoinByTicket(const bool val) {
  this->preventedJoinByTicket = val;
}

void GroupExtra::__set_invitationTicket(const std::string& val) {
  this->invitationTicket = val;
}

void GroupExtra::__set_memberMids(const std::map<std::string, int64_t> & val) {
  this->memberMids = val;
}

void GroupExtra::__set_inviteeMids(const std::map<std::string, int64_t> & val) {
  this->inviteeMids = val;
}
std::ostream& operator<<(std::ostream& out, const GroupExtra& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GroupExtra::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->creator);
          this->__isset.creator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->preventedJoinByTicket);
          this->__isset.preventedJoinByTicket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->invitationTicket);
          this->__isset.invitationTicket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->memberMids.clear();
            uint32_t _size81;
            ::apache::thrift::protocol::TType _ktype82;
            ::apache::thrift::protocol::TType _vtype83;
            xfer += iprot->readMapBegin(_ktype82, _vtype83, _size81);
            uint32_t _i85;
            for (_i85 = 0; _i85 < _size81; ++_i85)
            {
              std::string _key86;
              xfer += iprot->readString(_key86);
              int64_t& _val87 = this->memberMids[_key86];
              xfer += iprot->readI64(_val87);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.memberMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->inviteeMids.clear();
            uint32_t _size88;
            ::apache::thrift::protocol::TType _ktype89;
            ::apache::thrift::protocol::TType _vtype90;
            xfer += iprot->readMapBegin(_ktype89, _vtype90, _size88);
            uint32_t _i92;
            for (_i92 = 0; _i92 < _size88; ++_i92)
            {
              std::string _key93;
              xfer += iprot->readString(_key93);
              int64_t& _val94 = this->inviteeMids[_key93];
              xfer += iprot->readI64(_val94);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.inviteeMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GroupExtra::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GroupExtra");

  xfer += oprot->writeFieldBegin("creator", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->creator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preventedJoinByTicket", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->preventedJoinByTicket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invitationTicket", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->invitationTicket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberMids", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->memberMids.size()));
    std::map<std::string, int64_t> ::const_iterator _iter95;
    for (_iter95 = this->memberMids.begin(); _iter95 != this->memberMids.end(); ++_iter95)
    {
      xfer += oprot->writeString(_iter95->first);
      xfer += oprot->writeI64(_iter95->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inviteeMids", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->inviteeMids.size()));
    std::map<std::string, int64_t> ::const_iterator _iter96;
    for (_iter96 = this->inviteeMids.begin(); _iter96 != this->inviteeMids.end(); ++_iter96)
    {
      xfer += oprot->writeString(_iter96->first);
      xfer += oprot->writeI64(_iter96->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GroupExtra &a, GroupExtra &b) {
  using ::std::swap;
  swap(a.creator, b.creator);
  swap(a.preventedJoinByTicket, b.preventedJoinByTicket);
  swap(a.invitationTicket, b.invitationTicket);
  swap(a.memberMids, b.memberMids);
  swap(a.inviteeMids, b.inviteeMids);
  swap(a.__isset, b.__isset);
}

GroupExtra::GroupExtra(const GroupExtra& other97) {
  creator = other97.creator;
  preventedJoinByTicket = other97.preventedJoinByTicket;
  invitationTicket = other97.invitationTicket;
  memberMids = other97.memberMids;
  inviteeMids = other97.inviteeMids;
  __isset = other97.__isset;
}
GroupExtra& GroupExtra::operator=(const GroupExtra& other98) {
  creator = other98.creator;
  preventedJoinByTicket = other98.preventedJoinByTicket;
  invitationTicket = other98.invitationTicket;
  memberMids = other98.memberMids;
  inviteeMids = other98.inviteeMids;
  __isset = other98.__isset;
  return *this;
}
void GroupExtra::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GroupExtra(";
  out << "creator=" << to_string(creator);
  out << ", " << "preventedJoinByTicket=" << to_string(preventedJoinByTicket);
  out << ", " << "invitationTicket=" << to_string(invitationTicket);
  out << ", " << "memberMids=" << to_string(memberMids);
  out << ", " << "inviteeMids=" << to_string(inviteeMids);
  out << ")";
}


GetAllChatMidsRequest::~GetAllChatMidsRequest() noexcept {
}


void GetAllChatMidsRequest::__set_withMemberChats(const bool val) {
  this->withMemberChats = val;
}

void GetAllChatMidsRequest::__set_withInvitedChats(const bool val) {
  this->withInvitedChats = val;
}
std::ostream& operator<<(std::ostream& out, const GetAllChatMidsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetAllChatMidsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->withMemberChats);
          this->__isset.withMemberChats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->withInvitedChats);
          this->__isset.withInvitedChats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetAllChatMidsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetAllChatMidsRequest");

  xfer += oprot->writeFieldBegin("withMemberChats", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->withMemberChats);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("withInvitedChats", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->withInvitedChats);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetAllChatMidsRequest &a, GetAllChatMidsRequest &b) {
  using ::std::swap;
  swap(a.withMemberChats, b.withMemberChats);
  swap(a.withInvitedChats, b.withInvitedChats);
  swap(a.__isset, b.__isset);
}

GetAllChatMidsRequest::GetAllChatMidsRequest(const GetAllChatMidsRequest& other99) {
  withMemberChats = other99.withMemberChats;
  withInvitedChats = other99.withInvitedChats;
  __isset = other99.__isset;
}
GetAllChatMidsRequest& GetAllChatMidsRequest::operator=(const GetAllChatMidsRequest& other100) {
  withMemberChats = other100.withMemberChats;
  withInvitedChats = other100.withInvitedChats;
  __isset = other100.__isset;
  return *this;
}
void GetAllChatMidsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetAllChatMidsRequest(";
  out << "withMemberChats=" << to_string(withMemberChats);
  out << ", " << "withInvitedChats=" << to_string(withInvitedChats);
  out << ")";
}


GetAllChatMidsResponse::~GetAllChatMidsResponse() noexcept {
}


void GetAllChatMidsResponse::__set_memberChatMids(const std::set<std::string> & val) {
  this->memberChatMids = val;
}

void GetAllChatMidsResponse::__set_invitedChatMids(const std::set<std::string> & val) {
  this->invitedChatMids = val;
}
std::ostream& operator<<(std::ostream& out, const GetAllChatMidsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetAllChatMidsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->memberChatMids.clear();
            uint32_t _size101;
            ::apache::thrift::protocol::TType _etype104;
            xfer += iprot->readSetBegin(_etype104, _size101);
            uint32_t _i105;
            for (_i105 = 0; _i105 < _size101; ++_i105)
            {
              std::string _elem106;
              xfer += iprot->readString(_elem106);
              this->memberChatMids.insert(_elem106);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.memberChatMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->invitedChatMids.clear();
            uint32_t _size107;
            ::apache::thrift::protocol::TType _etype110;
            xfer += iprot->readSetBegin(_etype110, _size107);
            uint32_t _i111;
            for (_i111 = 0; _i111 < _size107; ++_i111)
            {
              std::string _elem112;
              xfer += iprot->readString(_elem112);
              this->invitedChatMids.insert(_elem112);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.invitedChatMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetAllChatMidsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetAllChatMidsResponse");

  xfer += oprot->writeFieldBegin("memberChatMids", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->memberChatMids.size()));
    std::set<std::string> ::const_iterator _iter113;
    for (_iter113 = this->memberChatMids.begin(); _iter113 != this->memberChatMids.end(); ++_iter113)
    {
      xfer += oprot->writeString((*_iter113));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invitedChatMids", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->invitedChatMids.size()));
    std::set<std::string> ::const_iterator _iter114;
    for (_iter114 = this->invitedChatMids.begin(); _iter114 != this->invitedChatMids.end(); ++_iter114)
    {
      xfer += oprot->writeString((*_iter114));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetAllChatMidsResponse &a, GetAllChatMidsResponse &b) {
  using ::std::swap;
  swap(a.memberChatMids, b.memberChatMids);
  swap(a.invitedChatMids, b.invitedChatMids);
  swap(a.__isset, b.__isset);
}

GetAllChatMidsResponse::GetAllChatMidsResponse(const GetAllChatMidsResponse& other115) {
  memberChatMids = other115.memberChatMids;
  invitedChatMids = other115.invitedChatMids;
  __isset = other115.__isset;
}
GetAllChatMidsResponse& GetAllChatMidsResponse::operator=(const GetAllChatMidsResponse& other116) {
  memberChatMids = other116.memberChatMids;
  invitedChatMids = other116.invitedChatMids;
  __isset = other116.__isset;
  return *this;
}
void GetAllChatMidsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetAllChatMidsResponse(";
  out << "memberChatMids=" << to_string(memberChatMids);
  out << ", " << "invitedChatMids=" << to_string(invitedChatMids);
  out << ")";
}


GetChatsRequest::~GetChatsRequest() noexcept {
}


void GetChatsRequest::__set_chatMids(const std::vector<std::string> & val) {
  this->chatMids = val;
}

void GetChatsRequest::__set_withMembers(const bool val) {
  this->withMembers = val;
}

void GetChatsRequest::__set_withInvitees(const bool val) {
  this->withInvitees = val;
}
std::ostream& operator<<(std::ostream& out, const GetChatsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetChatsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->chatMids.clear();
            uint32_t _size117;
            ::apache::thrift::protocol::TType _etype120;
            xfer += iprot->readListBegin(_etype120, _size117);
            this->chatMids.resize(_size117);
            uint32_t _i121;
            for (_i121 = 0; _i121 < _size117; ++_i121)
            {
              xfer += iprot->readString(this->chatMids[_i121]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.chatMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->withMembers);
          this->__isset.withMembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->withInvitees);
          this->__isset.withInvitees = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetChatsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetChatsRequest");

  xfer += oprot->writeFieldBegin("chatMids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->chatMids.size()));
    std::vector<std::string> ::const_iterator _iter122;
    for (_iter122 = this->chatMids.begin(); _iter122 != this->chatMids.end(); ++_iter122)
    {
      xfer += oprot->writeString((*_iter122));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("withMembers", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->withMembers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("withInvitees", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->withInvitees);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetChatsRequest &a, GetChatsRequest &b) {
  using ::std::swap;
  swap(a.chatMids, b.chatMids);
  swap(a.withMembers, b.withMembers);
  swap(a.withInvitees, b.withInvitees);
  swap(a.__isset, b.__isset);
}

GetChatsRequest::GetChatsRequest(const GetChatsRequest& other123) {
  chatMids = other123.chatMids;
  withMembers = other123.withMembers;
  withInvitees = other123.withInvitees;
  __isset = other123.__isset;
}
GetChatsRequest& GetChatsRequest::operator=(const GetChatsRequest& other124) {
  chatMids = other124.chatMids;
  withMembers = other124.withMembers;
  withInvitees = other124.withInvitees;
  __isset = other124.__isset;
  return *this;
}
void GetChatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetChatsRequest(";
  out << "chatMids=" << to_string(chatMids);
  out << ", " << "withMembers=" << to_string(withMembers);
  out << ", " << "withInvitees=" << to_string(withInvitees);
  out << ")";
}


GetChatsResponse::~GetChatsResponse() noexcept {
}


void GetChatsResponse::__set_chats(const std::vector<Chat> & val) {
  this->chats = val;
}
std::ostream& operator<<(std::ostream& out, const GetChatsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetChatsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->chats.clear();
            uint32_t _size125;
            ::apache::thrift::protocol::TType _etype128;
            xfer += iprot->readListBegin(_etype128, _size125);
            this->chats.resize(_size125);
            uint32_t _i129;
            for (_i129 = 0; _i129 < _size125; ++_i129)
            {
              xfer += this->chats[_i129].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.chats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetChatsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetChatsResponse");

  xfer += oprot->writeFieldBegin("chats", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->chats.size()));
    std::vector<Chat> ::const_iterator _iter130;
    for (_iter130 = this->chats.begin(); _iter130 != this->chats.end(); ++_iter130)
    {
      xfer += (*_iter130).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetChatsResponse &a, GetChatsResponse &b) {
  using ::std::swap;
  swap(a.chats, b.chats);
  swap(a.__isset, b.__isset);
}

GetChatsResponse::GetChatsResponse(const GetChatsResponse& other131) {
  chats = other131.chats;
  __isset = other131.__isset;
}
GetChatsResponse& GetChatsResponse::operator=(const GetChatsResponse& other132) {
  chats = other132.chats;
  __isset = other132.__isset;
  return *this;
}
void GetChatsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetChatsResponse(";
  out << "chats=" << to_string(chats);
  out << ")";
}


GeolocationAccuracy::~GeolocationAccuracy() noexcept {
}


void GeolocationAccuracy::__set_radiusMeters(const double val) {
  this->radiusMeters = val;
}

void GeolocationAccuracy::__set_radiusConfidence(const double val) {
  this->radiusConfidence = val;
}

void GeolocationAccuracy::__set_altitudeAccuracy(const double val) {
  this->altitudeAccuracy = val;
}

void GeolocationAccuracy::__set_velocityAccuracy(const double val) {
  this->velocityAccuracy = val;
}

void GeolocationAccuracy::__set_bearingAccuracy(const double val) {
  this->bearingAccuracy = val;
}

void GeolocationAccuracy::__set_accuracyMode(const AccuracyMode::type val) {
  this->accuracyMode = val;
}
std::ostream& operator<<(std::ostream& out, const GeolocationAccuracy& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GeolocationAccuracy::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->radiusMeters);
          this->__isset.radiusMeters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->radiusConfidence);
          this->__isset.radiusConfidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitudeAccuracy);
          this->__isset.altitudeAccuracy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->velocityAccuracy);
          this->__isset.velocityAccuracy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bearingAccuracy);
          this->__isset.bearingAccuracy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast133;
          xfer += iprot->readI32(ecast133);
          this->accuracyMode = (AccuracyMode::type)ecast133;
          this->__isset.accuracyMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GeolocationAccuracy::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GeolocationAccuracy");

  xfer += oprot->writeFieldBegin("radiusMeters", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->radiusMeters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("radiusConfidence", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->radiusConfidence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitudeAccuracy", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->altitudeAccuracy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("velocityAccuracy", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->velocityAccuracy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bearingAccuracy", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->bearingAccuracy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accuracyMode", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->accuracyMode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GeolocationAccuracy &a, GeolocationAccuracy &b) {
  using ::std::swap;
  swap(a.radiusMeters, b.radiusMeters);
  swap(a.radiusConfidence, b.radiusConfidence);
  swap(a.altitudeAccuracy, b.altitudeAccuracy);
  swap(a.velocityAccuracy, b.velocityAccuracy);
  swap(a.bearingAccuracy, b.bearingAccuracy);
  swap(a.accuracyMode, b.accuracyMode);
  swap(a.__isset, b.__isset);
}

GeolocationAccuracy::GeolocationAccuracy(const GeolocationAccuracy& other134) {
  radiusMeters = other134.radiusMeters;
  radiusConfidence = other134.radiusConfidence;
  altitudeAccuracy = other134.altitudeAccuracy;
  velocityAccuracy = other134.velocityAccuracy;
  bearingAccuracy = other134.bearingAccuracy;
  accuracyMode = other134.accuracyMode;
  __isset = other134.__isset;
}
GeolocationAccuracy& GeolocationAccuracy::operator=(const GeolocationAccuracy& other135) {
  radiusMeters = other135.radiusMeters;
  radiusConfidence = other135.radiusConfidence;
  altitudeAccuracy = other135.altitudeAccuracy;
  velocityAccuracy = other135.velocityAccuracy;
  bearingAccuracy = other135.bearingAccuracy;
  accuracyMode = other135.accuracyMode;
  __isset = other135.__isset;
  return *this;
}
void GeolocationAccuracy::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GeolocationAccuracy(";
  out << "radiusMeters=" << to_string(radiusMeters);
  out << ", " << "radiusConfidence=" << to_string(radiusConfidence);
  out << ", " << "altitudeAccuracy=" << to_string(altitudeAccuracy);
  out << ", " << "velocityAccuracy=" << to_string(velocityAccuracy);
  out << ", " << "bearingAccuracy=" << to_string(bearingAccuracy);
  out << ", " << "accuracyMode=" << to_string(accuracyMode);
  out << ")";
}


InviteIntoChatRequest::~InviteIntoChatRequest() noexcept {
}


void InviteIntoChatRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void InviteIntoChatRequest::__set_chatMid(const std::string& val) {
  this->chatMid = val;
}

void InviteIntoChatRequest::__set_targetUserMids(const std::set<std::string> & val) {
  this->targetUserMids = val;
}
std::ostream& operator<<(std::ostream& out, const InviteIntoChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InviteIntoChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMid);
          this->__isset.chatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->targetUserMids.clear();
            uint32_t _size136;
            ::apache::thrift::protocol::TType _etype139;
            xfer += iprot->readSetBegin(_etype139, _size136);
            uint32_t _i140;
            for (_i140 = 0; _i140 < _size136; ++_i140)
            {
              std::string _elem141;
              xfer += iprot->readString(_elem141);
              this->targetUserMids.insert(_elem141);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.targetUserMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InviteIntoChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InviteIntoChatRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetUserMids", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->targetUserMids.size()));
    std::set<std::string> ::const_iterator _iter142;
    for (_iter142 = this->targetUserMids.begin(); _iter142 != this->targetUserMids.end(); ++_iter142)
    {
      xfer += oprot->writeString((*_iter142));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InviteIntoChatRequest &a, InviteIntoChatRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.chatMid, b.chatMid);
  swap(a.targetUserMids, b.targetUserMids);
  swap(a.__isset, b.__isset);
}

InviteIntoChatRequest::InviteIntoChatRequest(const InviteIntoChatRequest& other143) {
  reqSeq = other143.reqSeq;
  chatMid = other143.chatMid;
  targetUserMids = other143.targetUserMids;
  __isset = other143.__isset;
}
InviteIntoChatRequest& InviteIntoChatRequest::operator=(const InviteIntoChatRequest& other144) {
  reqSeq = other144.reqSeq;
  chatMid = other144.chatMid;
  targetUserMids = other144.targetUserMids;
  __isset = other144.__isset;
  return *this;
}
void InviteIntoChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InviteIntoChatRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "chatMid=" << to_string(chatMid);
  out << ", " << "targetUserMids=" << to_string(targetUserMids);
  out << ")";
}


InviteIntoChatResponse::~InviteIntoChatResponse() noexcept {
}

std::ostream& operator<<(std::ostream& out, const InviteIntoChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InviteIntoChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InviteIntoChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InviteIntoChatResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InviteIntoChatResponse &a, InviteIntoChatResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

InviteIntoChatResponse::InviteIntoChatResponse(const InviteIntoChatResponse& other145) {
  (void) other145;
}
InviteIntoChatResponse& InviteIntoChatResponse::operator=(const InviteIntoChatResponse& other146) {
  (void) other146;
  return *this;
}
void InviteIntoChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InviteIntoChatResponse(";
  out << ")";
}


Location::~Location() noexcept {
}


void Location::__set_title(const std::string& val) {
  this->title = val;
}

void Location::__set_address(const std::string& val) {
  this->address = val;
}

void Location::__set_latitude(const double val) {
  this->latitude = val;
}

void Location::__set_longitude(const double val) {
  this->longitude = val;
}

void Location::__set_phone(const std::string& val) {
  this->phone = val;
}

void Location::__set_categoryId(const std::string& val) {
  this->categoryId = val;
}

void Location::__set_provider(const Provider::type val) {
  this->provider = val;
}

void Location::__set_accuracy(const GeolocationAccuracy& val) {
  this->accuracy = val;
}

void Location::__set_altitudeMeters(const double val) {
  this->altitudeMeters = val;
}
std::ostream& operator<<(std::ostream& out, const Location& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Location::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->categoryId);
          this->__isset.categoryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast147;
          xfer += iprot->readI32(ecast147);
          this->provider = (Provider::type)ecast147;
          this->__isset.provider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->accuracy.read(iprot);
          this->__isset.accuracy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitudeMeters);
          this->__isset.altitudeMeters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Location::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Location");

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("categoryId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->categoryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("provider", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->provider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accuracy", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->accuracy.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitudeMeters", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->altitudeMeters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Location &a, Location &b) {
  using ::std::swap;
  swap(a.title, b.title);
  swap(a.address, b.address);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.phone, b.phone);
  swap(a.categoryId, b.categoryId);
  swap(a.provider, b.provider);
  swap(a.accuracy, b.accuracy);
  swap(a.altitudeMeters, b.altitudeMeters);
  swap(a.__isset, b.__isset);
}

Location::Location(const Location& other148) {
  title = other148.title;
  address = other148.address;
  latitude = other148.latitude;
  longitude = other148.longitude;
  phone = other148.phone;
  categoryId = other148.categoryId;
  provider = other148.provider;
  accuracy = other148.accuracy;
  altitudeMeters = other148.altitudeMeters;
  __isset = other148.__isset;
}
Location& Location::operator=(const Location& other149) {
  title = other149.title;
  address = other149.address;
  latitude = other149.latitude;
  longitude = other149.longitude;
  phone = other149.phone;
  categoryId = other149.categoryId;
  provider = other149.provider;
  accuracy = other149.accuracy;
  altitudeMeters = other149.altitudeMeters;
  __isset = other149.__isset;
  return *this;
}
void Location::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Location(";
  out << "title=" << to_string(title);
  out << ", " << "address=" << to_string(address);
  out << ", " << "latitude=" << to_string(latitude);
  out << ", " << "longitude=" << to_string(longitude);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "categoryId=" << to_string(categoryId);
  out << ", " << "provider=" << to_string(provider);
  out << ", " << "accuracy=" << to_string(accuracy);
  out << ", " << "altitudeMeters=" << to_string(altitudeMeters);
  out << ")";
}


Message::~Message() noexcept {
}


void Message::__set__from(const std::string& val) {
  this->_from = val;
}

void Message::__set_to(const std::string& val) {
  this->to = val;
}

void Message::__set_toType(const ToType::type val) {
  this->toType = val;
}

void Message::__set_id(const std::string& val) {
  this->id = val;
}

void Message::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Message::__set_deliveredTime(const int64_t val) {
  this->deliveredTime = val;
}

void Message::__set_text(const std::string& val) {
  this->text = val;
}

void Message::__set_location(const Location& val) {
  this->location = val;
}

void Message::__set_hasContent(const bool val) {
  this->hasContent = val;
}

void Message::__set_contentType(const ContentType::type val) {
  this->contentType = val;
}

void Message::__set_contentMetadata(const std::map<std::string, std::string> & val) {
  this->contentMetadata = val;
}

void Message::__set_contentPreview(const std::string& val) {
  this->contentPreview = val;
}

void Message::__set_sessionId(const int64_t val) {
  this->sessionId = val;
}

void Message::__set_chunks(const std::vector<std::string> & val) {
  this->chunks = val;
}

void Message::__set_relatedMessageId(const std::string& val) {
  this->relatedMessageId = val;
}

void Message::__set_messageRelationType(const MessageRelationType::type val) {
  this->messageRelationType = val;
}

void Message::__set_readCount(const int32_t val) {
  this->readCount = val;
}

void Message::__set_relatedMessageServiceCode(const RelatedMessageServiceCode::type val) {
  this->relatedMessageServiceCode = val;
}

void Message::__set_appExtensionType(const AppExtensionType::type val) {
  this->appExtensionType = val;
}
std::ostream& operator<<(std::ostream& out, const Message& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_from);
          this->__isset._from = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to);
          this->__isset.to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast150;
          xfer += iprot->readI32(ecast150);
          this->toType = (ToType::type)ecast150;
          this->__isset.toType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deliveredTime);
          this->__isset.deliveredTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->location.read(iprot);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasContent);
          this->__isset.hasContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast151;
          xfer += iprot->readI32(ecast151);
          this->contentType = (ContentType::type)ecast151;
          this->__isset.contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->contentMetadata.clear();
            uint32_t _size152;
            ::apache::thrift::protocol::TType _ktype153;
            ::apache::thrift::protocol::TType _vtype154;
            xfer += iprot->readMapBegin(_ktype153, _vtype154, _size152);
            uint32_t _i156;
            for (_i156 = 0; _i156 < _size152; ++_i156)
            {
              std::string _key157;
              xfer += iprot->readString(_key157);
              std::string& _val158 = this->contentMetadata[_key157];
              xfer += iprot->readString(_val158);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.contentMetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->contentPreview);
          this->__isset.contentPreview = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sessionId);
          this->__isset.sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->chunks.clear();
            uint32_t _size159;
            ::apache::thrift::protocol::TType _etype162;
            xfer += iprot->readListBegin(_etype162, _size159);
            this->chunks.resize(_size159);
            uint32_t _i163;
            for (_i163 = 0; _i163 < _size159; ++_i163)
            {
              xfer += iprot->readBinary(this->chunks[_i163]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.chunks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->relatedMessageId);
          this->__isset.relatedMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast164;
          xfer += iprot->readI32(ecast164);
          this->messageRelationType = (MessageRelationType::type)ecast164;
          this->__isset.messageRelationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->readCount);
          this->__isset.readCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast165;
          xfer += iprot->readI32(ecast165);
          this->relatedMessageServiceCode = (RelatedMessageServiceCode::type)ecast165;
          this->__isset.relatedMessageServiceCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast166;
          xfer += iprot->readI32(ecast166);
          this->appExtensionType = (AppExtensionType::type)ecast166;
          this->__isset.appExtensionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("_from", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_from);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->to);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("toType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->toType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deliveredTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->deliveredTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->location.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasContent", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->hasContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32((int32_t)this->contentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentPreview", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeBinary(this->contentPreview);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentMetadata", ::apache::thrift::protocol::T_MAP, 18);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->contentMetadata.size()));
    std::map<std::string, std::string> ::const_iterator _iter167;
    for (_iter167 = this->contentMetadata.begin(); _iter167 != this->contentMetadata.end(); ++_iter167)
    {
      xfer += oprot->writeString(_iter167->first);
      xfer += oprot->writeString(_iter167->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chunks", ::apache::thrift::protocol::T_LIST, 20);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->chunks.size()));
    std::vector<std::string> ::const_iterator _iter168;
    for (_iter168 = this->chunks.begin(); _iter168 != this->chunks.end(); ++_iter168)
    {
      xfer += oprot->writeBinary((*_iter168));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relatedMessageId", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->relatedMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageRelationType", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32((int32_t)this->messageRelationType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("readCount", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->readCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relatedMessageServiceCode", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32((int32_t)this->relatedMessageServiceCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appExtensionType", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32((int32_t)this->appExtensionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a._from, b._from);
  swap(a.to, b.to);
  swap(a.toType, b.toType);
  swap(a.id, b.id);
  swap(a.createdTime, b.createdTime);
  swap(a.deliveredTime, b.deliveredTime);
  swap(a.text, b.text);
  swap(a.location, b.location);
  swap(a.hasContent, b.hasContent);
  swap(a.contentType, b.contentType);
  swap(a.contentMetadata, b.contentMetadata);
  swap(a.contentPreview, b.contentPreview);
  swap(a.sessionId, b.sessionId);
  swap(a.chunks, b.chunks);
  swap(a.relatedMessageId, b.relatedMessageId);
  swap(a.messageRelationType, b.messageRelationType);
  swap(a.readCount, b.readCount);
  swap(a.relatedMessageServiceCode, b.relatedMessageServiceCode);
  swap(a.appExtensionType, b.appExtensionType);
  swap(a.__isset, b.__isset);
}

Message::Message(const Message& other169) {
  _from = other169._from;
  to = other169.to;
  toType = other169.toType;
  id = other169.id;
  createdTime = other169.createdTime;
  deliveredTime = other169.deliveredTime;
  text = other169.text;
  location = other169.location;
  hasContent = other169.hasContent;
  contentType = other169.contentType;
  contentMetadata = other169.contentMetadata;
  contentPreview = other169.contentPreview;
  sessionId = other169.sessionId;
  chunks = other169.chunks;
  relatedMessageId = other169.relatedMessageId;
  messageRelationType = other169.messageRelationType;
  readCount = other169.readCount;
  relatedMessageServiceCode = other169.relatedMessageServiceCode;
  appExtensionType = other169.appExtensionType;
  __isset = other169.__isset;
}
Message& Message::operator=(const Message& other170) {
  _from = other170._from;
  to = other170.to;
  toType = other170.toType;
  id = other170.id;
  createdTime = other170.createdTime;
  deliveredTime = other170.deliveredTime;
  text = other170.text;
  location = other170.location;
  hasContent = other170.hasContent;
  contentType = other170.contentType;
  contentMetadata = other170.contentMetadata;
  contentPreview = other170.contentPreview;
  sessionId = other170.sessionId;
  chunks = other170.chunks;
  relatedMessageId = other170.relatedMessageId;
  messageRelationType = other170.messageRelationType;
  readCount = other170.readCount;
  relatedMessageServiceCode = other170.relatedMessageServiceCode;
  appExtensionType = other170.appExtensionType;
  __isset = other170.__isset;
  return *this;
}
void Message::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Message(";
  out << "_from=" << to_string(_from);
  out << ", " << "to=" << to_string(to);
  out << ", " << "toType=" << to_string(toType);
  out << ", " << "id=" << to_string(id);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "deliveredTime=" << to_string(deliveredTime);
  out << ", " << "text=" << to_string(text);
  out << ", " << "location=" << to_string(location);
  out << ", " << "hasContent=" << to_string(hasContent);
  out << ", " << "contentType=" << to_string(contentType);
  out << ", " << "contentMetadata=" << to_string(contentMetadata);
  out << ", " << "contentPreview=" << to_string(contentPreview);
  out << ", " << "sessionId=" << to_string(sessionId);
  out << ", " << "chunks=" << to_string(chunks);
  out << ", " << "relatedMessageId=" << to_string(relatedMessageId);
  out << ", " << "messageRelationType=" << to_string(messageRelationType);
  out << ", " << "readCount=" << to_string(readCount);
  out << ", " << "relatedMessageServiceCode=" << to_string(relatedMessageServiceCode);
  out << ", " << "appExtensionType=" << to_string(appExtensionType);
  out << ")";
}


Operation::~Operation() noexcept {
}


void Operation::__set_revision(const int64_t val) {
  this->revision = val;
}

void Operation::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Operation::__set_type(const OperationType::type val) {
  this->type = val;
}

void Operation::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void Operation::__set_checksum(const std::string& val) {
  this->checksum = val;
}

void Operation::__set_status(const OperationStatus::type val) {
  this->status = val;
}

void Operation::__set_param1(const std::string& val) {
  this->param1 = val;
}

void Operation::__set_param2(const std::string& val) {
  this->param2 = val;
}

void Operation::__set_param3(const std::string& val) {
  this->param3 = val;
}

void Operation::__set_message(const Message& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const Operation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Operation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast171;
          xfer += iprot->readI32(ecast171);
          this->type = (OperationType::type)ecast171;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->checksum);
          this->__isset.checksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast172;
          xfer += iprot->readI32(ecast172);
          this->status = (OperationStatus::type)ecast172;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param1);
          this->__isset.param1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param2);
          this->__isset.param2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param3);
          this->__isset.param3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Operation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Operation");

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checksum", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->checksum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param1", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->param1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param2", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->param2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param3", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->param3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Operation &a, Operation &b) {
  using ::std::swap;
  swap(a.revision, b.revision);
  swap(a.createdTime, b.createdTime);
  swap(a.type, b.type);
  swap(a.reqSeq, b.reqSeq);
  swap(a.checksum, b.checksum);
  swap(a.status, b.status);
  swap(a.param1, b.param1);
  swap(a.param2, b.param2);
  swap(a.param3, b.param3);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

Operation::Operation(const Operation& other173) {
  revision = other173.revision;
  createdTime = other173.createdTime;
  type = other173.type;
  reqSeq = other173.reqSeq;
  checksum = other173.checksum;
  status = other173.status;
  param1 = other173.param1;
  param2 = other173.param2;
  param3 = other173.param3;
  message = other173.message;
  __isset = other173.__isset;
}
Operation& Operation::operator=(const Operation& other174) {
  revision = other174.revision;
  createdTime = other174.createdTime;
  type = other174.type;
  reqSeq = other174.reqSeq;
  checksum = other174.checksum;
  status = other174.status;
  param1 = other174.param1;
  param2 = other174.param2;
  param3 = other174.param3;
  message = other174.message;
  __isset = other174.__isset;
  return *this;
}
void Operation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Operation(";
  out << "revision=" << to_string(revision);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "type=" << to_string(type);
  out << ", " << "reqSeq=" << to_string(reqSeq);
  out << ", " << "checksum=" << to_string(checksum);
  out << ", " << "status=" << to_string(status);
  out << ", " << "param1=" << to_string(param1);
  out << ", " << "param2=" << to_string(param2);
  out << ", " << "param3=" << to_string(param3);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


Profile::~Profile() noexcept {
}


void Profile::__set_mid(const std::string& val) {
  this->mid = val;
}

void Profile::__set_userid(const std::string& val) {
  this->userid = val;
}

void Profile::__set_regionCode(const std::string& val) {
  this->regionCode = val;
}

void Profile::__set_phone(const std::string& val) {
  this->phone = val;
}

void Profile::__set_email(const std::string& val) {
  this->email = val;
}

void Profile::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void Profile::__set_phoneticName(const std::string& val) {
  this->phoneticName = val;
}

void Profile::__set_pictureStatus(const std::string& val) {
  this->pictureStatus = val;
}

void Profile::__set_thumbnailUrl(const std::string& val) {
  this->thumbnailUrl = val;
}

void Profile::__set_statusMessage(const std::string& val) {
  this->statusMessage = val;
}

void Profile::__set_allowSearchByUserid(const bool val) {
  this->allowSearchByUserid = val;
}

void Profile::__set_allowSearchByEmail(const bool val) {
  this->allowSearchByEmail = val;
}

void Profile::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void Profile::__set_musicProfile(const std::string& val) {
  this->musicProfile = val;
}

void Profile::__set_videoProfile(const std::string& val) {
  this->videoProfile = val;
}

void Profile::__set_statusMessageContentMetadata(const std::map<std::string, std::string> & val) {
  this->statusMessageContentMetadata = val;
}

void Profile::__set_avatarProfile(const AvatarProfile& val) {
  this->avatarProfile = val;
}
std::ostream& operator<<(std::ostream& out, const Profile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Profile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userid);
          this->__isset.userid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->regionCode);
          this->__isset.regionCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneticName);
          this->__isset.phoneticName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureStatus);
          this->__isset.pictureStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbnailUrl);
          this->__isset.thumbnailUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMessage);
          this->__isset.statusMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowSearchByUserid);
          this->__isset.allowSearchByUserid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowSearchByEmail);
          this->__isset.allowSearchByEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->musicProfile);
          this->__isset.musicProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->videoProfile);
          this->__isset.videoProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->statusMessageContentMetadata.clear();
            uint32_t _size175;
            ::apache::thrift::protocol::TType _ktype176;
            ::apache::thrift::protocol::TType _vtype177;
            xfer += iprot->readMapBegin(_ktype176, _vtype177, _size175);
            uint32_t _i179;
            for (_i179 = 0; _i179 < _size175; ++_i179)
            {
              std::string _key180;
              xfer += iprot->readString(_key180);
              std::string& _val181 = this->statusMessageContentMetadata[_key180];
              xfer += iprot->readString(_val181);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.statusMessageContentMetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->avatarProfile.read(iprot);
          this->__isset.avatarProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Profile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Profile");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->userid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regionCode", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->regionCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneticName", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->phoneticName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureStatus", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->pictureStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thumbnailUrl", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->thumbnailUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessage", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->statusMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowSearchByUserid", ::apache::thrift::protocol::T_BOOL, 31);
  xfer += oprot->writeBool(this->allowSearchByUserid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowSearchByEmail", ::apache::thrift::protocol::T_BOOL, 32);
  xfer += oprot->writeBool(this->allowSearchByEmail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 33);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("musicProfile", ::apache::thrift::protocol::T_STRING, 34);
  xfer += oprot->writeString(this->musicProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("videoProfile", ::apache::thrift::protocol::T_STRING, 35);
  xfer += oprot->writeString(this->videoProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessageContentMetadata", ::apache::thrift::protocol::T_MAP, 36);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->statusMessageContentMetadata.size()));
    std::map<std::string, std::string> ::const_iterator _iter182;
    for (_iter182 = this->statusMessageContentMetadata.begin(); _iter182 != this->statusMessageContentMetadata.end(); ++_iter182)
    {
      xfer += oprot->writeString(_iter182->first);
      xfer += oprot->writeString(_iter182->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatarProfile", ::apache::thrift::protocol::T_STRUCT, 37);
  xfer += this->avatarProfile.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Profile &a, Profile &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.userid, b.userid);
  swap(a.regionCode, b.regionCode);
  swap(a.phone, b.phone);
  swap(a.email, b.email);
  swap(a.displayName, b.displayName);
  swap(a.phoneticName, b.phoneticName);
  swap(a.pictureStatus, b.pictureStatus);
  swap(a.thumbnailUrl, b.thumbnailUrl);
  swap(a.statusMessage, b.statusMessage);
  swap(a.allowSearchByUserid, b.allowSearchByUserid);
  swap(a.allowSearchByEmail, b.allowSearchByEmail);
  swap(a.picturePath, b.picturePath);
  swap(a.musicProfile, b.musicProfile);
  swap(a.videoProfile, b.videoProfile);
  swap(a.statusMessageContentMetadata, b.statusMessageContentMetadata);
  swap(a.avatarProfile, b.avatarProfile);
  swap(a.__isset, b.__isset);
}

Profile::Profile(const Profile& other183) {
  mid = other183.mid;
  userid = other183.userid;
  regionCode = other183.regionCode;
  phone = other183.phone;
  email = other183.email;
  displayName = other183.displayName;
  phoneticName = other183.phoneticName;
  pictureStatus = other183.pictureStatus;
  thumbnailUrl = other183.thumbnailUrl;
  statusMessage = other183.statusMessage;
  allowSearchByUserid = other183.allowSearchByUserid;
  allowSearchByEmail = other183.allowSearchByEmail;
  picturePath = other183.picturePath;
  musicProfile = other183.musicProfile;
  videoProfile = other183.videoProfile;
  statusMessageContentMetadata = other183.statusMessageContentMetadata;
  avatarProfile = other183.avatarProfile;
  __isset = other183.__isset;
}
Profile& Profile::operator=(const Profile& other184) {
  mid = other184.mid;
  userid = other184.userid;
  regionCode = other184.regionCode;
  phone = other184.phone;
  email = other184.email;
  displayName = other184.displayName;
  phoneticName = other184.phoneticName;
  pictureStatus = other184.pictureStatus;
  thumbnailUrl = other184.thumbnailUrl;
  statusMessage = other184.statusMessage;
  allowSearchByUserid = other184.allowSearchByUserid;
  allowSearchByEmail = other184.allowSearchByEmail;
  picturePath = other184.picturePath;
  musicProfile = other184.musicProfile;
  videoProfile = other184.videoProfile;
  statusMessageContentMetadata = other184.statusMessageContentMetadata;
  avatarProfile = other184.avatarProfile;
  __isset = other184.__isset;
  return *this;
}
void Profile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Profile(";
  out << "mid=" << to_string(mid);
  out << ", " << "userid=" << to_string(userid);
  out << ", " << "regionCode=" << to_string(regionCode);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "email=" << to_string(email);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "phoneticName=" << to_string(phoneticName);
  out << ", " << "pictureStatus=" << to_string(pictureStatus);
  out << ", " << "thumbnailUrl=" << to_string(thumbnailUrl);
  out << ", " << "statusMessage=" << to_string(statusMessage);
  out << ", " << "allowSearchByUserid=" << to_string(allowSearchByUserid);
  out << ", " << "allowSearchByEmail=" << to_string(allowSearchByEmail);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "musicProfile=" << to_string(musicProfile);
  out << ", " << "videoProfile=" << to_string(videoProfile);
  out << ", " << "statusMessageContentMetadata=" << to_string(statusMessageContentMetadata);
  out << ", " << "avatarProfile=" << to_string(avatarProfile);
  out << ")";
}


PeerExtra::~PeerExtra() noexcept {
}

std::ostream& operator<<(std::ostream& out, const PeerExtra& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PeerExtra::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PeerExtra::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PeerExtra");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PeerExtra &a, PeerExtra &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

PeerExtra::PeerExtra(const PeerExtra& other185) {
  (void) other185;
}
PeerExtra& PeerExtra::operator=(const PeerExtra& other186) {
  (void) other186;
  return *this;
}
void PeerExtra::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PeerExtra(";
  out << ")";
}


RejectChatInvitationRequest::~RejectChatInvitationRequest() noexcept {
}


void RejectChatInvitationRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void RejectChatInvitationRequest::__set_chatMid(const std::string& val) {
  this->chatMid = val;
}
std::ostream& operator<<(std::ostream& out, const RejectChatInvitationRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RejectChatInvitationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMid);
          this->__isset.chatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RejectChatInvitationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RejectChatInvitationRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RejectChatInvitationRequest &a, RejectChatInvitationRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.chatMid, b.chatMid);
  swap(a.__isset, b.__isset);
}

RejectChatInvitationRequest::RejectChatInvitationRequest(const RejectChatInvitationRequest& other187) {
  reqSeq = other187.reqSeq;
  chatMid = other187.chatMid;
  __isset = other187.__isset;
}
RejectChatInvitationRequest& RejectChatInvitationRequest::operator=(const RejectChatInvitationRequest& other188) {
  reqSeq = other188.reqSeq;
  chatMid = other188.chatMid;
  __isset = other188.__isset;
  return *this;
}
void RejectChatInvitationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RejectChatInvitationRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "chatMid=" << to_string(chatMid);
  out << ")";
}


RejectChatInvitationResponse::~RejectChatInvitationResponse() noexcept {
}

std::ostream& operator<<(std::ostream& out, const RejectChatInvitationResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RejectChatInvitationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RejectChatInvitationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RejectChatInvitationResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RejectChatInvitationResponse &a, RejectChatInvitationResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

RejectChatInvitationResponse::RejectChatInvitationResponse(const RejectChatInvitationResponse& other189) {
  (void) other189;
}
RejectChatInvitationResponse& RejectChatInvitationResponse::operator=(const RejectChatInvitationResponse& other190) {
  (void) other190;
  return *this;
}
void RejectChatInvitationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RejectChatInvitationResponse(";
  out << ")";
}


ReissueChatTicketRequest::~ReissueChatTicketRequest() noexcept {
}


void ReissueChatTicketRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void ReissueChatTicketRequest::__set_groupMid(const std::string& val) {
  this->groupMid = val;
}
std::ostream& operator<<(std::ostream& out, const ReissueChatTicketRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReissueChatTicketRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupMid);
          this->__isset.groupMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReissueChatTicketRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReissueChatTicketRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->groupMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReissueChatTicketRequest &a, ReissueChatTicketRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.groupMid, b.groupMid);
  swap(a.__isset, b.__isset);
}

ReissueChatTicketRequest::ReissueChatTicketRequest(const ReissueChatTicketRequest& other191) {
  reqSeq = other191.reqSeq;
  groupMid = other191.groupMid;
  __isset = other191.__isset;
}
ReissueChatTicketRequest& ReissueChatTicketRequest::operator=(const ReissueChatTicketRequest& other192) {
  reqSeq = other192.reqSeq;
  groupMid = other192.groupMid;
  __isset = other192.__isset;
  return *this;
}
void ReissueChatTicketRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReissueChatTicketRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "groupMid=" << to_string(groupMid);
  out << ")";
}


ReissueChatTicketResponse::~ReissueChatTicketResponse() noexcept {
}


void ReissueChatTicketResponse::__set_ticketId(const std::string& val) {
  this->ticketId = val;
}
std::ostream& operator<<(std::ostream& out, const ReissueChatTicketResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReissueChatTicketResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ticketId);
          this->__isset.ticketId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReissueChatTicketResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReissueChatTicketResponse");

  xfer += oprot->writeFieldBegin("ticketId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ticketId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReissueChatTicketResponse &a, ReissueChatTicketResponse &b) {
  using ::std::swap;
  swap(a.ticketId, b.ticketId);
  swap(a.__isset, b.__isset);
}

ReissueChatTicketResponse::ReissueChatTicketResponse(const ReissueChatTicketResponse& other193) {
  ticketId = other193.ticketId;
  __isset = other193.__isset;
}
ReissueChatTicketResponse& ReissueChatTicketResponse::operator=(const ReissueChatTicketResponse& other194) {
  ticketId = other194.ticketId;
  __isset = other194.__isset;
  return *this;
}
void ReissueChatTicketResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReissueChatTicketResponse(";
  out << "ticketId=" << to_string(ticketId);
  out << ")";
}


UpdateChatRequest::~UpdateChatRequest() noexcept {
}


void UpdateChatRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void UpdateChatRequest::__set_chat(const Chat& val) {
  this->chat = val;
}

void UpdateChatRequest::__set_updatedAttribute(const UpdatedAttribute::type val) {
  this->updatedAttribute = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->chat.read(iprot);
          this->__isset.chat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast195;
          xfer += iprot->readI32(ecast195);
          this->updatedAttribute = (UpdatedAttribute::type)ecast195;
          this->__isset.updatedAttribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateChatRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chat", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->chat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedAttribute", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->updatedAttribute);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateChatRequest &a, UpdateChatRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.chat, b.chat);
  swap(a.updatedAttribute, b.updatedAttribute);
  swap(a.__isset, b.__isset);
}

UpdateChatRequest::UpdateChatRequest(const UpdateChatRequest& other196) {
  reqSeq = other196.reqSeq;
  chat = other196.chat;
  updatedAttribute = other196.updatedAttribute;
  __isset = other196.__isset;
}
UpdateChatRequest& UpdateChatRequest::operator=(const UpdateChatRequest& other197) {
  reqSeq = other197.reqSeq;
  chat = other197.chat;
  updatedAttribute = other197.updatedAttribute;
  __isset = other197.__isset;
  return *this;
}
void UpdateChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateChatRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "chat=" << to_string(chat);
  out << ", " << "updatedAttribute=" << to_string(updatedAttribute);
  out << ")";
}


UpdateChatResponse::~UpdateChatResponse() noexcept {
}

std::ostream& operator<<(std::ostream& out, const UpdateChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateChatResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateChatResponse &a, UpdateChatResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

UpdateChatResponse::UpdateChatResponse(const UpdateChatResponse& other198) {
  (void) other198;
}
UpdateChatResponse& UpdateChatResponse::operator=(const UpdateChatResponse& other199) {
  (void) other199;
  return *this;
}
void UpdateChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateChatResponse(";
  out << ")";
}


TalkException::~TalkException() noexcept {
}


void TalkException::__set_code(const TalkExceptionCode::type val) {
  this->code = val;
}

void TalkException::__set_reason(const std::string& val) {
  this->reason = val;
}

void TalkException::__set_parameterMap(const std::map<std::string, std::string> & val) {
  this->parameterMap = val;
}
std::ostream& operator<<(std::ostream& out, const TalkException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TalkException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast200;
          xfer += iprot->readI32(ecast200);
          this->code = (TalkExceptionCode::type)ecast200;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameterMap.clear();
            uint32_t _size201;
            ::apache::thrift::protocol::TType _ktype202;
            ::apache::thrift::protocol::TType _vtype203;
            xfer += iprot->readMapBegin(_ktype202, _vtype203, _size201);
            uint32_t _i205;
            for (_i205 = 0; _i205 < _size201; ++_i205)
            {
              std::string _key206;
              xfer += iprot->readString(_key206);
              std::string& _val207 = this->parameterMap[_key206];
              xfer += iprot->readString(_val207);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameterMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TalkException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TalkException");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameterMap", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameterMap.size()));
    std::map<std::string, std::string> ::const_iterator _iter208;
    for (_iter208 = this->parameterMap.begin(); _iter208 != this->parameterMap.end(); ++_iter208)
    {
      xfer += oprot->writeString(_iter208->first);
      xfer += oprot->writeString(_iter208->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TalkException &a, TalkException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.reason, b.reason);
  swap(a.parameterMap, b.parameterMap);
  swap(a.__isset, b.__isset);
}

TalkException::TalkException(const TalkException& other209) : TException() {
  code = other209.code;
  reason = other209.reason;
  parameterMap = other209.parameterMap;
  __isset = other209.__isset;
}
TalkException& TalkException::operator=(const TalkException& other210) {
  code = other210.code;
  reason = other210.reason;
  parameterMap = other210.parameterMap;
  __isset = other210.__isset;
  return *this;
}
void TalkException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TalkException(";
  out << "code=" << to_string(code);
  out << ", " << "reason=" << to_string(reason);
  out << ", " << "parameterMap=" << to_string(parameterMap);
  out << ")";
}

const char* TalkException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TalkException";
  }
}


ThingsException::~ThingsException() noexcept {
}


void ThingsException::__set_code(const ThingsExceptionCode::type val) {
  this->code = val;
}

void ThingsException::__set_reason(const std::string& val) {
  this->reason = val;
}
std::ostream& operator<<(std::ostream& out, const ThingsException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ThingsException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast211;
          xfer += iprot->readI32(ecast211);
          this->code = (ThingsExceptionCode::type)ecast211;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThingsException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThingsException");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThingsException &a, ThingsException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

ThingsException::ThingsException(const ThingsException& other212) : TException() {
  code = other212.code;
  reason = other212.reason;
  __isset = other212.__isset;
}
ThingsException& ThingsException::operator=(const ThingsException& other213) {
  code = other213.code;
  reason = other213.reason;
  __isset = other213.__isset;
  return *this;
}
void ThingsException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThingsException(";
  out << "code=" << to_string(code);
  out << ", " << "reason=" << to_string(reason);
  out << ")";
}

const char* ThingsException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ThingsException";
  }
}


