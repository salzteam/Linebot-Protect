/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TalkService_H
#define TalkService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "BEService_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TalkServiceIf {
 public:
  virtual ~TalkServiceIf() {}
  virtual void acceptChatInvitation(AcceptChatInvitationResponse& _return, const AcceptChatInvitationRequest& request) = 0;
  virtual void acceptChatInvitationByTicket(AcceptChatInvitationByTicketResponse& _return, const AcceptChatInvitationByTicketRequest& request) = 0;
  virtual void blockContact(const int32_t reqSeq, const std::string& id) = 0;
  virtual void cancelChatInvitation(CancelChatInvitationResponse& _return, const CancelChatInvitationRequest& request) = 0;
  virtual void createChat(CreateChatResponse& _return, const CreateChatRequest& request) = 0;
  virtual void deleteSelfFromChat(DeleteSelfFromChatResponse& _return, const DeleteSelfFromChatRequest& request) = 0;
  virtual void deleteOtherFromChat(DeleteOtherFromChatResponse& _return, const DeleteOtherFromChatRequest& request) = 0;
  virtual void fetchOperations(FetchOperationsResponse& _return, const FetchOperationsRequest& request) = 0;
  virtual void fetchOps(std::vector<Operation> & _return, const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev) = 0;
  virtual void findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference) = 0;
  virtual void findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& searchId, const std::string& reference) = 0;
  virtual void findContactByUserid(Contact& _return, const std::string& userid) = 0;
  virtual void findChatByTicket(FindChatByTicketResponse& _return, const FindChatByTicketRequest& request) = 0;
  virtual void getAllChatMids(GetAllChatMidsResponse& _return, const GetAllChatMidsRequest& request, const SyncReason::type syncReason) = 0;
  virtual void getProfile(Profile& _return, const SyncReason::type syncReason) = 0;
  virtual void getContact(Contact& _return, const std::string& id) = 0;
  virtual void getCountryWithRequestIp(std::string& _return) = 0;
  virtual int64_t getServerTime() = 0;
  virtual void getContacts(std::vector<Contact> & _return, const std::vector<std::string> & ids) = 0;
  virtual void getAllContactIds(std::vector<std::string> & _return, const SyncReason::type syncReason) = 0;
  virtual void getChats(GetChatsResponse& _return, const GetChatsRequest& request) = 0;
  virtual void inviteIntoChat(InviteIntoChatResponse& _return, const InviteIntoChatRequest& request) = 0;
  virtual void reissueChatTicket(ReissueChatTicketResponse& _return, const ReissueChatTicketRequest& request) = 0;
  virtual void rejectChatInvitation(RejectChatInvitationResponse& _return, const RejectChatInvitationRequest& request) = 0;
  virtual void sendMessage(Message& _return, const int32_t seq, const Message& message) = 0;
  virtual void unsendMessage(const int32_t seq, const std::string& messageId) = 0;
  virtual void updateChat(UpdateChatResponse& _return, const UpdateChatRequest& request) = 0;
  virtual void updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value) = 0;
};

class TalkServiceIfFactory {
 public:
  typedef TalkServiceIf Handler;

  virtual ~TalkServiceIfFactory() {}

  virtual TalkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TalkServiceIf* /* handler */) = 0;
};

class TalkServiceIfSingletonFactory : virtual public TalkServiceIfFactory {
 public:
  TalkServiceIfSingletonFactory(const ::std::shared_ptr<TalkServiceIf>& iface) : iface_(iface) {}
  virtual ~TalkServiceIfSingletonFactory() {}

  virtual TalkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TalkServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<TalkServiceIf> iface_;
};

class TalkServiceNull : virtual public TalkServiceIf {
 public:
  virtual ~TalkServiceNull() {}
  void acceptChatInvitation(AcceptChatInvitationResponse& /* _return */, const AcceptChatInvitationRequest& /* request */) {
    return;
  }
  void acceptChatInvitationByTicket(AcceptChatInvitationByTicketResponse& /* _return */, const AcceptChatInvitationByTicketRequest& /* request */) {
    return;
  }
  void blockContact(const int32_t /* reqSeq */, const std::string& /* id */) {
    return;
  }
  void cancelChatInvitation(CancelChatInvitationResponse& /* _return */, const CancelChatInvitationRequest& /* request */) {
    return;
  }
  void createChat(CreateChatResponse& /* _return */, const CreateChatRequest& /* request */) {
    return;
  }
  void deleteSelfFromChat(DeleteSelfFromChatResponse& /* _return */, const DeleteSelfFromChatRequest& /* request */) {
    return;
  }
  void deleteOtherFromChat(DeleteOtherFromChatResponse& /* _return */, const DeleteOtherFromChatRequest& /* request */) {
    return;
  }
  void fetchOperations(FetchOperationsResponse& /* _return */, const FetchOperationsRequest& /* request */) {
    return;
  }
  void fetchOps(std::vector<Operation> & /* _return */, const int64_t /* localRev */, const int32_t /* count */, const int64_t /* globalRev */, const int64_t /* individualRev */) {
    return;
  }
  void findAndAddContactsByMid(std::map<std::string, Contact> & /* _return */, const int32_t /* reqSeq */, const std::string& /* mid */, const ContactType::type /* type */, const std::string& /* reference */) {
    return;
  }
  void findAndAddContactsByUserid(std::map<std::string, Contact> & /* _return */, const int32_t /* reqSeq */, const std::string& /* searchId */, const std::string& /* reference */) {
    return;
  }
  void findContactByUserid(Contact& /* _return */, const std::string& /* userid */) {
    return;
  }
  void findChatByTicket(FindChatByTicketResponse& /* _return */, const FindChatByTicketRequest& /* request */) {
    return;
  }
  void getAllChatMids(GetAllChatMidsResponse& /* _return */, const GetAllChatMidsRequest& /* request */, const SyncReason::type /* syncReason */) {
    return;
  }
  void getProfile(Profile& /* _return */, const SyncReason::type /* syncReason */) {
    return;
  }
  void getContact(Contact& /* _return */, const std::string& /* id */) {
    return;
  }
  void getCountryWithRequestIp(std::string& /* _return */) {
    return;
  }
  int64_t getServerTime() {
    int64_t _return = 0;
    return _return;
  }
  void getContacts(std::vector<Contact> & /* _return */, const std::vector<std::string> & /* ids */) {
    return;
  }
  void getAllContactIds(std::vector<std::string> & /* _return */, const SyncReason::type /* syncReason */) {
    return;
  }
  void getChats(GetChatsResponse& /* _return */, const GetChatsRequest& /* request */) {
    return;
  }
  void inviteIntoChat(InviteIntoChatResponse& /* _return */, const InviteIntoChatRequest& /* request */) {
    return;
  }
  void reissueChatTicket(ReissueChatTicketResponse& /* _return */, const ReissueChatTicketRequest& /* request */) {
    return;
  }
  void rejectChatInvitation(RejectChatInvitationResponse& /* _return */, const RejectChatInvitationRequest& /* request */) {
    return;
  }
  void sendMessage(Message& /* _return */, const int32_t /* seq */, const Message& /* message */) {
    return;
  }
  void unsendMessage(const int32_t /* seq */, const std::string& /* messageId */) {
    return;
  }
  void updateChat(UpdateChatResponse& /* _return */, const UpdateChatRequest& /* request */) {
    return;
  }
  void updateProfileAttribute(const int32_t /* reqSeq */, const ProfileAttribute::type /* attr */, const std::string& /* value */) {
    return;
  }
};

typedef struct _TalkService_acceptChatInvitation_args__isset {
  _TalkService_acceptChatInvitation_args__isset() : request(false) {}
  bool request :1;
} _TalkService_acceptChatInvitation_args__isset;

class TalkService_acceptChatInvitation_args {
 public:

  TalkService_acceptChatInvitation_args(const TalkService_acceptChatInvitation_args&);
  TalkService_acceptChatInvitation_args& operator=(const TalkService_acceptChatInvitation_args&);
  TalkService_acceptChatInvitation_args() {
  }

  virtual ~TalkService_acceptChatInvitation_args() noexcept;
  AcceptChatInvitationRequest request;

  _TalkService_acceptChatInvitation_args__isset __isset;

  void __set_request(const AcceptChatInvitationRequest& val);

  bool operator == (const TalkService_acceptChatInvitation_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptChatInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptChatInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_acceptChatInvitation_pargs {
 public:


  virtual ~TalkService_acceptChatInvitation_pargs() noexcept;
  const AcceptChatInvitationRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptChatInvitation_result__isset {
  _TalkService_acceptChatInvitation_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acceptChatInvitation_result__isset;

class TalkService_acceptChatInvitation_result {
 public:

  TalkService_acceptChatInvitation_result(const TalkService_acceptChatInvitation_result&);
  TalkService_acceptChatInvitation_result& operator=(const TalkService_acceptChatInvitation_result&);
  TalkService_acceptChatInvitation_result() {
  }

  virtual ~TalkService_acceptChatInvitation_result() noexcept;
  AcceptChatInvitationResponse success;
  TalkException e;

  _TalkService_acceptChatInvitation_result__isset __isset;

  void __set_success(const AcceptChatInvitationResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_acceptChatInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptChatInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptChatInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptChatInvitation_presult__isset {
  _TalkService_acceptChatInvitation_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acceptChatInvitation_presult__isset;

class TalkService_acceptChatInvitation_presult {
 public:


  virtual ~TalkService_acceptChatInvitation_presult() noexcept;
  AcceptChatInvitationResponse* success;
  TalkException e;

  _TalkService_acceptChatInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_acceptChatInvitationByTicket_args__isset {
  _TalkService_acceptChatInvitationByTicket_args__isset() : request(false) {}
  bool request :1;
} _TalkService_acceptChatInvitationByTicket_args__isset;

class TalkService_acceptChatInvitationByTicket_args {
 public:

  TalkService_acceptChatInvitationByTicket_args(const TalkService_acceptChatInvitationByTicket_args&);
  TalkService_acceptChatInvitationByTicket_args& operator=(const TalkService_acceptChatInvitationByTicket_args&);
  TalkService_acceptChatInvitationByTicket_args() {
  }

  virtual ~TalkService_acceptChatInvitationByTicket_args() noexcept;
  AcceptChatInvitationByTicketRequest request;

  _TalkService_acceptChatInvitationByTicket_args__isset __isset;

  void __set_request(const AcceptChatInvitationByTicketRequest& val);

  bool operator == (const TalkService_acceptChatInvitationByTicket_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptChatInvitationByTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptChatInvitationByTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_acceptChatInvitationByTicket_pargs {
 public:


  virtual ~TalkService_acceptChatInvitationByTicket_pargs() noexcept;
  const AcceptChatInvitationByTicketRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptChatInvitationByTicket_result__isset {
  _TalkService_acceptChatInvitationByTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acceptChatInvitationByTicket_result__isset;

class TalkService_acceptChatInvitationByTicket_result {
 public:

  TalkService_acceptChatInvitationByTicket_result(const TalkService_acceptChatInvitationByTicket_result&);
  TalkService_acceptChatInvitationByTicket_result& operator=(const TalkService_acceptChatInvitationByTicket_result&);
  TalkService_acceptChatInvitationByTicket_result() {
  }

  virtual ~TalkService_acceptChatInvitationByTicket_result() noexcept;
  AcceptChatInvitationByTicketResponse success;
  TalkException e;

  _TalkService_acceptChatInvitationByTicket_result__isset __isset;

  void __set_success(const AcceptChatInvitationByTicketResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_acceptChatInvitationByTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptChatInvitationByTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptChatInvitationByTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptChatInvitationByTicket_presult__isset {
  _TalkService_acceptChatInvitationByTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acceptChatInvitationByTicket_presult__isset;

class TalkService_acceptChatInvitationByTicket_presult {
 public:


  virtual ~TalkService_acceptChatInvitationByTicket_presult() noexcept;
  AcceptChatInvitationByTicketResponse* success;
  TalkException e;

  _TalkService_acceptChatInvitationByTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_blockContact_args__isset {
  _TalkService_blockContact_args__isset() : reqSeq(false), id(false) {}
  bool reqSeq :1;
  bool id :1;
} _TalkService_blockContact_args__isset;

class TalkService_blockContact_args {
 public:

  TalkService_blockContact_args(const TalkService_blockContact_args&);
  TalkService_blockContact_args& operator=(const TalkService_blockContact_args&);
  TalkService_blockContact_args() : reqSeq(0), id() {
  }

  virtual ~TalkService_blockContact_args() noexcept;
  int32_t reqSeq;
  std::string id;

  _TalkService_blockContact_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_id(const std::string& val);

  bool operator == (const TalkService_blockContact_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TalkService_blockContact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_blockContact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_blockContact_pargs {
 public:


  virtual ~TalkService_blockContact_pargs() noexcept;
  const int32_t* reqSeq;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_blockContact_result__isset {
  _TalkService_blockContact_result__isset() : e(false) {}
  bool e :1;
} _TalkService_blockContact_result__isset;

class TalkService_blockContact_result {
 public:

  TalkService_blockContact_result(const TalkService_blockContact_result&);
  TalkService_blockContact_result& operator=(const TalkService_blockContact_result&);
  TalkService_blockContact_result() {
  }

  virtual ~TalkService_blockContact_result() noexcept;
  TalkException e;

  _TalkService_blockContact_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_blockContact_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_blockContact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_blockContact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_blockContact_presult__isset {
  _TalkService_blockContact_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_blockContact_presult__isset;

class TalkService_blockContact_presult {
 public:


  virtual ~TalkService_blockContact_presult() noexcept;
  TalkException e;

  _TalkService_blockContact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_cancelChatInvitation_args__isset {
  _TalkService_cancelChatInvitation_args__isset() : request(false) {}
  bool request :1;
} _TalkService_cancelChatInvitation_args__isset;

class TalkService_cancelChatInvitation_args {
 public:

  TalkService_cancelChatInvitation_args(const TalkService_cancelChatInvitation_args&);
  TalkService_cancelChatInvitation_args& operator=(const TalkService_cancelChatInvitation_args&);
  TalkService_cancelChatInvitation_args() {
  }

  virtual ~TalkService_cancelChatInvitation_args() noexcept;
  CancelChatInvitationRequest request;

  _TalkService_cancelChatInvitation_args__isset __isset;

  void __set_request(const CancelChatInvitationRequest& val);

  bool operator == (const TalkService_cancelChatInvitation_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_cancelChatInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_cancelChatInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_cancelChatInvitation_pargs {
 public:


  virtual ~TalkService_cancelChatInvitation_pargs() noexcept;
  const CancelChatInvitationRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_cancelChatInvitation_result__isset {
  _TalkService_cancelChatInvitation_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_cancelChatInvitation_result__isset;

class TalkService_cancelChatInvitation_result {
 public:

  TalkService_cancelChatInvitation_result(const TalkService_cancelChatInvitation_result&);
  TalkService_cancelChatInvitation_result& operator=(const TalkService_cancelChatInvitation_result&);
  TalkService_cancelChatInvitation_result() {
  }

  virtual ~TalkService_cancelChatInvitation_result() noexcept;
  CancelChatInvitationResponse success;
  TalkException e;

  _TalkService_cancelChatInvitation_result__isset __isset;

  void __set_success(const CancelChatInvitationResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_cancelChatInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_cancelChatInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_cancelChatInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_cancelChatInvitation_presult__isset {
  _TalkService_cancelChatInvitation_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_cancelChatInvitation_presult__isset;

class TalkService_cancelChatInvitation_presult {
 public:


  virtual ~TalkService_cancelChatInvitation_presult() noexcept;
  CancelChatInvitationResponse* success;
  TalkException e;

  _TalkService_cancelChatInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_createChat_args__isset {
  _TalkService_createChat_args__isset() : request(false) {}
  bool request :1;
} _TalkService_createChat_args__isset;

class TalkService_createChat_args {
 public:

  TalkService_createChat_args(const TalkService_createChat_args&);
  TalkService_createChat_args& operator=(const TalkService_createChat_args&);
  TalkService_createChat_args() {
  }

  virtual ~TalkService_createChat_args() noexcept;
  CreateChatRequest request;

  _TalkService_createChat_args__isset __isset;

  void __set_request(const CreateChatRequest& val);

  bool operator == (const TalkService_createChat_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_createChat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createChat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_createChat_pargs {
 public:


  virtual ~TalkService_createChat_pargs() noexcept;
  const CreateChatRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createChat_result__isset {
  _TalkService_createChat_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createChat_result__isset;

class TalkService_createChat_result {
 public:

  TalkService_createChat_result(const TalkService_createChat_result&);
  TalkService_createChat_result& operator=(const TalkService_createChat_result&);
  TalkService_createChat_result() {
  }

  virtual ~TalkService_createChat_result() noexcept;
  CreateChatResponse success;
  TalkException e;

  _TalkService_createChat_result__isset __isset;

  void __set_success(const CreateChatResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_createChat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_createChat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createChat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createChat_presult__isset {
  _TalkService_createChat_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createChat_presult__isset;

class TalkService_createChat_presult {
 public:


  virtual ~TalkService_createChat_presult() noexcept;
  CreateChatResponse* success;
  TalkException e;

  _TalkService_createChat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_deleteSelfFromChat_args__isset {
  _TalkService_deleteSelfFromChat_args__isset() : request(false) {}
  bool request :1;
} _TalkService_deleteSelfFromChat_args__isset;

class TalkService_deleteSelfFromChat_args {
 public:

  TalkService_deleteSelfFromChat_args(const TalkService_deleteSelfFromChat_args&);
  TalkService_deleteSelfFromChat_args& operator=(const TalkService_deleteSelfFromChat_args&);
  TalkService_deleteSelfFromChat_args() {
  }

  virtual ~TalkService_deleteSelfFromChat_args() noexcept;
  DeleteSelfFromChatRequest request;

  _TalkService_deleteSelfFromChat_args__isset __isset;

  void __set_request(const DeleteSelfFromChatRequest& val);

  bool operator == (const TalkService_deleteSelfFromChat_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_deleteSelfFromChat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_deleteSelfFromChat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_deleteSelfFromChat_pargs {
 public:


  virtual ~TalkService_deleteSelfFromChat_pargs() noexcept;
  const DeleteSelfFromChatRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_deleteSelfFromChat_result__isset {
  _TalkService_deleteSelfFromChat_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_deleteSelfFromChat_result__isset;

class TalkService_deleteSelfFromChat_result {
 public:

  TalkService_deleteSelfFromChat_result(const TalkService_deleteSelfFromChat_result&);
  TalkService_deleteSelfFromChat_result& operator=(const TalkService_deleteSelfFromChat_result&);
  TalkService_deleteSelfFromChat_result() {
  }

  virtual ~TalkService_deleteSelfFromChat_result() noexcept;
  DeleteSelfFromChatResponse success;
  TalkException e;

  _TalkService_deleteSelfFromChat_result__isset __isset;

  void __set_success(const DeleteSelfFromChatResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_deleteSelfFromChat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_deleteSelfFromChat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_deleteSelfFromChat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_deleteSelfFromChat_presult__isset {
  _TalkService_deleteSelfFromChat_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_deleteSelfFromChat_presult__isset;

class TalkService_deleteSelfFromChat_presult {
 public:


  virtual ~TalkService_deleteSelfFromChat_presult() noexcept;
  DeleteSelfFromChatResponse* success;
  TalkException e;

  _TalkService_deleteSelfFromChat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_deleteOtherFromChat_args__isset {
  _TalkService_deleteOtherFromChat_args__isset() : request(false) {}
  bool request :1;
} _TalkService_deleteOtherFromChat_args__isset;

class TalkService_deleteOtherFromChat_args {
 public:

  TalkService_deleteOtherFromChat_args(const TalkService_deleteOtherFromChat_args&);
  TalkService_deleteOtherFromChat_args& operator=(const TalkService_deleteOtherFromChat_args&);
  TalkService_deleteOtherFromChat_args() {
  }

  virtual ~TalkService_deleteOtherFromChat_args() noexcept;
  DeleteOtherFromChatRequest request;

  _TalkService_deleteOtherFromChat_args__isset __isset;

  void __set_request(const DeleteOtherFromChatRequest& val);

  bool operator == (const TalkService_deleteOtherFromChat_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_deleteOtherFromChat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_deleteOtherFromChat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_deleteOtherFromChat_pargs {
 public:


  virtual ~TalkService_deleteOtherFromChat_pargs() noexcept;
  const DeleteOtherFromChatRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_deleteOtherFromChat_result__isset {
  _TalkService_deleteOtherFromChat_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_deleteOtherFromChat_result__isset;

class TalkService_deleteOtherFromChat_result {
 public:

  TalkService_deleteOtherFromChat_result(const TalkService_deleteOtherFromChat_result&);
  TalkService_deleteOtherFromChat_result& operator=(const TalkService_deleteOtherFromChat_result&);
  TalkService_deleteOtherFromChat_result() {
  }

  virtual ~TalkService_deleteOtherFromChat_result() noexcept;
  DeleteOtherFromChatResponse success;
  TalkException e;

  _TalkService_deleteOtherFromChat_result__isset __isset;

  void __set_success(const DeleteOtherFromChatResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_deleteOtherFromChat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_deleteOtherFromChat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_deleteOtherFromChat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_deleteOtherFromChat_presult__isset {
  _TalkService_deleteOtherFromChat_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_deleteOtherFromChat_presult__isset;

class TalkService_deleteOtherFromChat_presult {
 public:


  virtual ~TalkService_deleteOtherFromChat_presult() noexcept;
  DeleteOtherFromChatResponse* success;
  TalkException e;

  _TalkService_deleteOtherFromChat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_fetchOperations_args__isset {
  _TalkService_fetchOperations_args__isset() : request(false) {}
  bool request :1;
} _TalkService_fetchOperations_args__isset;

class TalkService_fetchOperations_args {
 public:

  TalkService_fetchOperations_args(const TalkService_fetchOperations_args&);
  TalkService_fetchOperations_args& operator=(const TalkService_fetchOperations_args&);
  TalkService_fetchOperations_args() {
  }

  virtual ~TalkService_fetchOperations_args() noexcept;
  FetchOperationsRequest request;

  _TalkService_fetchOperations_args__isset __isset;

  void __set_request(const FetchOperationsRequest& val);

  bool operator == (const TalkService_fetchOperations_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchOperations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchOperations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_fetchOperations_pargs {
 public:


  virtual ~TalkService_fetchOperations_pargs() noexcept;
  const FetchOperationsRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchOperations_result__isset {
  _TalkService_fetchOperations_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchOperations_result__isset;

class TalkService_fetchOperations_result {
 public:

  TalkService_fetchOperations_result(const TalkService_fetchOperations_result&);
  TalkService_fetchOperations_result& operator=(const TalkService_fetchOperations_result&);
  TalkService_fetchOperations_result() {
  }

  virtual ~TalkService_fetchOperations_result() noexcept;
  FetchOperationsResponse success;
  ThingsException e;

  _TalkService_fetchOperations_result__isset __isset;

  void __set_success(const FetchOperationsResponse& val);

  void __set_e(const ThingsException& val);

  bool operator == (const TalkService_fetchOperations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchOperations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchOperations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchOperations_presult__isset {
  _TalkService_fetchOperations_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchOperations_presult__isset;

class TalkService_fetchOperations_presult {
 public:


  virtual ~TalkService_fetchOperations_presult() noexcept;
  FetchOperationsResponse* success;
  ThingsException e;

  _TalkService_fetchOperations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_fetchOps_args__isset {
  _TalkService_fetchOps_args__isset() : localRev(false), count(false), globalRev(false), individualRev(false) {}
  bool localRev :1;
  bool count :1;
  bool globalRev :1;
  bool individualRev :1;
} _TalkService_fetchOps_args__isset;

class TalkService_fetchOps_args {
 public:

  TalkService_fetchOps_args(const TalkService_fetchOps_args&);
  TalkService_fetchOps_args& operator=(const TalkService_fetchOps_args&);
  TalkService_fetchOps_args() : localRev(0), count(0), globalRev(0), individualRev(0) {
  }

  virtual ~TalkService_fetchOps_args() noexcept;
  int64_t localRev;
  int32_t count;
  int64_t globalRev;
  int64_t individualRev;

  _TalkService_fetchOps_args__isset __isset;

  void __set_localRev(const int64_t val);

  void __set_count(const int32_t val);

  void __set_globalRev(const int64_t val);

  void __set_individualRev(const int64_t val);

  bool operator == (const TalkService_fetchOps_args & rhs) const
  {
    if (!(localRev == rhs.localRev))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(globalRev == rhs.globalRev))
      return false;
    if (!(individualRev == rhs.individualRev))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchOps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchOps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_fetchOps_pargs {
 public:


  virtual ~TalkService_fetchOps_pargs() noexcept;
  const int64_t* localRev;
  const int32_t* count;
  const int64_t* globalRev;
  const int64_t* individualRev;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchOps_result__isset {
  _TalkService_fetchOps_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchOps_result__isset;

class TalkService_fetchOps_result {
 public:

  TalkService_fetchOps_result(const TalkService_fetchOps_result&);
  TalkService_fetchOps_result& operator=(const TalkService_fetchOps_result&);
  TalkService_fetchOps_result() {
  }

  virtual ~TalkService_fetchOps_result() noexcept;
  std::vector<Operation>  success;
  TalkException e;

  _TalkService_fetchOps_result__isset __isset;

  void __set_success(const std::vector<Operation> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_fetchOps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchOps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchOps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchOps_presult__isset {
  _TalkService_fetchOps_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchOps_presult__isset;

class TalkService_fetchOps_presult {
 public:


  virtual ~TalkService_fetchOps_presult() noexcept;
  std::vector<Operation> * success;
  TalkException e;

  _TalkService_fetchOps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findAndAddContactsByMid_args__isset {
  _TalkService_findAndAddContactsByMid_args__isset() : reqSeq(false), mid(false), type(false), reference(false) {}
  bool reqSeq :1;
  bool mid :1;
  bool type :1;
  bool reference :1;
} _TalkService_findAndAddContactsByMid_args__isset;

class TalkService_findAndAddContactsByMid_args {
 public:

  TalkService_findAndAddContactsByMid_args(const TalkService_findAndAddContactsByMid_args&);
  TalkService_findAndAddContactsByMid_args& operator=(const TalkService_findAndAddContactsByMid_args&);
  TalkService_findAndAddContactsByMid_args() : reqSeq(0), mid(), type((ContactType::type)0), reference() {
  }

  virtual ~TalkService_findAndAddContactsByMid_args() noexcept;
  int32_t reqSeq;
  std::string mid;
  ContactType::type type;
  std::string reference;

  _TalkService_findAndAddContactsByMid_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_mid(const std::string& val);

  void __set_type(const ContactType::type val);

  void __set_reference(const std::string& val);

  bool operator == (const TalkService_findAndAddContactsByMid_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(reference == rhs.reference))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByMid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByMid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findAndAddContactsByMid_pargs {
 public:


  virtual ~TalkService_findAndAddContactsByMid_pargs() noexcept;
  const int32_t* reqSeq;
  const std::string* mid;
  const ContactType::type* type;
  const std::string* reference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByMid_result__isset {
  _TalkService_findAndAddContactsByMid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByMid_result__isset;

class TalkService_findAndAddContactsByMid_result {
 public:

  TalkService_findAndAddContactsByMid_result(const TalkService_findAndAddContactsByMid_result&);
  TalkService_findAndAddContactsByMid_result& operator=(const TalkService_findAndAddContactsByMid_result&);
  TalkService_findAndAddContactsByMid_result() {
  }

  virtual ~TalkService_findAndAddContactsByMid_result() noexcept;
  std::map<std::string, Contact>  success;
  TalkException e;

  _TalkService_findAndAddContactsByMid_result__isset __isset;

  void __set_success(const std::map<std::string, Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findAndAddContactsByMid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByMid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByMid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByMid_presult__isset {
  _TalkService_findAndAddContactsByMid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByMid_presult__isset;

class TalkService_findAndAddContactsByMid_presult {
 public:


  virtual ~TalkService_findAndAddContactsByMid_presult() noexcept;
  std::map<std::string, Contact> * success;
  TalkException e;

  _TalkService_findAndAddContactsByMid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findAndAddContactsByUserid_args__isset {
  _TalkService_findAndAddContactsByUserid_args__isset() : reqSeq(false), searchId(false), reference(false) {}
  bool reqSeq :1;
  bool searchId :1;
  bool reference :1;
} _TalkService_findAndAddContactsByUserid_args__isset;

class TalkService_findAndAddContactsByUserid_args {
 public:

  TalkService_findAndAddContactsByUserid_args(const TalkService_findAndAddContactsByUserid_args&);
  TalkService_findAndAddContactsByUserid_args& operator=(const TalkService_findAndAddContactsByUserid_args&);
  TalkService_findAndAddContactsByUserid_args() : reqSeq(0), searchId(), reference() {
  }

  virtual ~TalkService_findAndAddContactsByUserid_args() noexcept;
  int32_t reqSeq;
  std::string searchId;
  std::string reference;

  _TalkService_findAndAddContactsByUserid_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_searchId(const std::string& val);

  void __set_reference(const std::string& val);

  bool operator == (const TalkService_findAndAddContactsByUserid_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(searchId == rhs.searchId))
      return false;
    if (!(reference == rhs.reference))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByUserid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByUserid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findAndAddContactsByUserid_pargs {
 public:


  virtual ~TalkService_findAndAddContactsByUserid_pargs() noexcept;
  const int32_t* reqSeq;
  const std::string* searchId;
  const std::string* reference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByUserid_result__isset {
  _TalkService_findAndAddContactsByUserid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByUserid_result__isset;

class TalkService_findAndAddContactsByUserid_result {
 public:

  TalkService_findAndAddContactsByUserid_result(const TalkService_findAndAddContactsByUserid_result&);
  TalkService_findAndAddContactsByUserid_result& operator=(const TalkService_findAndAddContactsByUserid_result&);
  TalkService_findAndAddContactsByUserid_result() {
  }

  virtual ~TalkService_findAndAddContactsByUserid_result() noexcept;
  std::map<std::string, Contact>  success;
  TalkException e;

  _TalkService_findAndAddContactsByUserid_result__isset __isset;

  void __set_success(const std::map<std::string, Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findAndAddContactsByUserid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByUserid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByUserid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByUserid_presult__isset {
  _TalkService_findAndAddContactsByUserid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByUserid_presult__isset;

class TalkService_findAndAddContactsByUserid_presult {
 public:


  virtual ~TalkService_findAndAddContactsByUserid_presult() noexcept;
  std::map<std::string, Contact> * success;
  TalkException e;

  _TalkService_findAndAddContactsByUserid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findContactByUserid_args__isset {
  _TalkService_findContactByUserid_args__isset() : userid(false) {}
  bool userid :1;
} _TalkService_findContactByUserid_args__isset;

class TalkService_findContactByUserid_args {
 public:

  TalkService_findContactByUserid_args(const TalkService_findContactByUserid_args&);
  TalkService_findContactByUserid_args& operator=(const TalkService_findContactByUserid_args&);
  TalkService_findContactByUserid_args() : userid() {
  }

  virtual ~TalkService_findContactByUserid_args() noexcept;
  std::string userid;

  _TalkService_findContactByUserid_args__isset __isset;

  void __set_userid(const std::string& val);

  bool operator == (const TalkService_findContactByUserid_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactByUserid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactByUserid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findContactByUserid_pargs {
 public:


  virtual ~TalkService_findContactByUserid_pargs() noexcept;
  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactByUserid_result__isset {
  _TalkService_findContactByUserid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactByUserid_result__isset;

class TalkService_findContactByUserid_result {
 public:

  TalkService_findContactByUserid_result(const TalkService_findContactByUserid_result&);
  TalkService_findContactByUserid_result& operator=(const TalkService_findContactByUserid_result&);
  TalkService_findContactByUserid_result() {
  }

  virtual ~TalkService_findContactByUserid_result() noexcept;
  Contact success;
  TalkException e;

  _TalkService_findContactByUserid_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findContactByUserid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactByUserid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactByUserid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactByUserid_presult__isset {
  _TalkService_findContactByUserid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactByUserid_presult__isset;

class TalkService_findContactByUserid_presult {
 public:


  virtual ~TalkService_findContactByUserid_presult() noexcept;
  Contact* success;
  TalkException e;

  _TalkService_findContactByUserid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findChatByTicket_args__isset {
  _TalkService_findChatByTicket_args__isset() : request(false) {}
  bool request :1;
} _TalkService_findChatByTicket_args__isset;

class TalkService_findChatByTicket_args {
 public:

  TalkService_findChatByTicket_args(const TalkService_findChatByTicket_args&);
  TalkService_findChatByTicket_args& operator=(const TalkService_findChatByTicket_args&);
  TalkService_findChatByTicket_args() {
  }

  virtual ~TalkService_findChatByTicket_args() noexcept;
  FindChatByTicketRequest request;

  _TalkService_findChatByTicket_args__isset __isset;

  void __set_request(const FindChatByTicketRequest& val);

  bool operator == (const TalkService_findChatByTicket_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_findChatByTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findChatByTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findChatByTicket_pargs {
 public:


  virtual ~TalkService_findChatByTicket_pargs() noexcept;
  const FindChatByTicketRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findChatByTicket_result__isset {
  _TalkService_findChatByTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findChatByTicket_result__isset;

class TalkService_findChatByTicket_result {
 public:

  TalkService_findChatByTicket_result(const TalkService_findChatByTicket_result&);
  TalkService_findChatByTicket_result& operator=(const TalkService_findChatByTicket_result&);
  TalkService_findChatByTicket_result() {
  }

  virtual ~TalkService_findChatByTicket_result() noexcept;
  FindChatByTicketResponse success;
  TalkException e;

  _TalkService_findChatByTicket_result__isset __isset;

  void __set_success(const FindChatByTicketResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findChatByTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findChatByTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findChatByTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findChatByTicket_presult__isset {
  _TalkService_findChatByTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findChatByTicket_presult__isset;

class TalkService_findChatByTicket_presult {
 public:


  virtual ~TalkService_findChatByTicket_presult() noexcept;
  FindChatByTicketResponse* success;
  TalkException e;

  _TalkService_findChatByTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getAllChatMids_args__isset {
  _TalkService_getAllChatMids_args__isset() : request(false), syncReason(false) {}
  bool request :1;
  bool syncReason :1;
} _TalkService_getAllChatMids_args__isset;

class TalkService_getAllChatMids_args {
 public:

  TalkService_getAllChatMids_args(const TalkService_getAllChatMids_args&);
  TalkService_getAllChatMids_args& operator=(const TalkService_getAllChatMids_args&);
  TalkService_getAllChatMids_args() : syncReason((SyncReason::type)0) {
  }

  virtual ~TalkService_getAllChatMids_args() noexcept;
  GetAllChatMidsRequest request;
  SyncReason::type syncReason;

  _TalkService_getAllChatMids_args__isset __isset;

  void __set_request(const GetAllChatMidsRequest& val);

  void __set_syncReason(const SyncReason::type val);

  bool operator == (const TalkService_getAllChatMids_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(syncReason == rhs.syncReason))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAllChatMids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAllChatMids_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getAllChatMids_pargs {
 public:


  virtual ~TalkService_getAllChatMids_pargs() noexcept;
  const GetAllChatMidsRequest* request;
  const SyncReason::type* syncReason;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAllChatMids_result__isset {
  _TalkService_getAllChatMids_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAllChatMids_result__isset;

class TalkService_getAllChatMids_result {
 public:

  TalkService_getAllChatMids_result(const TalkService_getAllChatMids_result&);
  TalkService_getAllChatMids_result& operator=(const TalkService_getAllChatMids_result&);
  TalkService_getAllChatMids_result() {
  }

  virtual ~TalkService_getAllChatMids_result() noexcept;
  GetAllChatMidsResponse success;
  TalkException e;

  _TalkService_getAllChatMids_result__isset __isset;

  void __set_success(const GetAllChatMidsResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getAllChatMids_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAllChatMids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAllChatMids_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAllChatMids_presult__isset {
  _TalkService_getAllChatMids_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAllChatMids_presult__isset;

class TalkService_getAllChatMids_presult {
 public:


  virtual ~TalkService_getAllChatMids_presult() noexcept;
  GetAllChatMidsResponse* success;
  TalkException e;

  _TalkService_getAllChatMids_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getProfile_args__isset {
  _TalkService_getProfile_args__isset() : syncReason(false) {}
  bool syncReason :1;
} _TalkService_getProfile_args__isset;

class TalkService_getProfile_args {
 public:

  TalkService_getProfile_args(const TalkService_getProfile_args&);
  TalkService_getProfile_args& operator=(const TalkService_getProfile_args&);
  TalkService_getProfile_args() : syncReason((SyncReason::type)0) {
  }

  virtual ~TalkService_getProfile_args() noexcept;
  SyncReason::type syncReason;

  _TalkService_getProfile_args__isset __isset;

  void __set_syncReason(const SyncReason::type val);

  bool operator == (const TalkService_getProfile_args & rhs) const
  {
    if (!(syncReason == rhs.syncReason))
      return false;
    return true;
  }
  bool operator != (const TalkService_getProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getProfile_pargs {
 public:


  virtual ~TalkService_getProfile_pargs() noexcept;
  const SyncReason::type* syncReason;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getProfile_result__isset {
  _TalkService_getProfile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getProfile_result__isset;

class TalkService_getProfile_result {
 public:

  TalkService_getProfile_result(const TalkService_getProfile_result&);
  TalkService_getProfile_result& operator=(const TalkService_getProfile_result&);
  TalkService_getProfile_result() {
  }

  virtual ~TalkService_getProfile_result() noexcept;
  Profile success;
  TalkException e;

  _TalkService_getProfile_result__isset __isset;

  void __set_success(const Profile& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getProfile_presult__isset {
  _TalkService_getProfile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getProfile_presult__isset;

class TalkService_getProfile_presult {
 public:


  virtual ~TalkService_getProfile_presult() noexcept;
  Profile* success;
  TalkException e;

  _TalkService_getProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getContact_args__isset {
  _TalkService_getContact_args__isset() : id(false) {}
  bool id :1;
} _TalkService_getContact_args__isset;

class TalkService_getContact_args {
 public:

  TalkService_getContact_args(const TalkService_getContact_args&);
  TalkService_getContact_args& operator=(const TalkService_getContact_args&);
  TalkService_getContact_args() : id() {
  }

  virtual ~TalkService_getContact_args() noexcept;
  std::string id;

  _TalkService_getContact_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const TalkService_getContact_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getContact_pargs {
 public:


  virtual ~TalkService_getContact_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContact_result__isset {
  _TalkService_getContact_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContact_result__isset;

class TalkService_getContact_result {
 public:

  TalkService_getContact_result(const TalkService_getContact_result&);
  TalkService_getContact_result& operator=(const TalkService_getContact_result&);
  TalkService_getContact_result() {
  }

  virtual ~TalkService_getContact_result() noexcept;
  Contact success;
  TalkException e;

  _TalkService_getContact_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getContact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContact_presult__isset {
  _TalkService_getContact_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContact_presult__isset;

class TalkService_getContact_presult {
 public:


  virtual ~TalkService_getContact_presult() noexcept;
  Contact* success;
  TalkException e;

  _TalkService_getContact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getCountryWithRequestIp_args {
 public:

  TalkService_getCountryWithRequestIp_args(const TalkService_getCountryWithRequestIp_args&);
  TalkService_getCountryWithRequestIp_args& operator=(const TalkService_getCountryWithRequestIp_args&);
  TalkService_getCountryWithRequestIp_args() {
  }

  virtual ~TalkService_getCountryWithRequestIp_args() noexcept;

  bool operator == (const TalkService_getCountryWithRequestIp_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getCountryWithRequestIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCountryWithRequestIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getCountryWithRequestIp_pargs {
 public:


  virtual ~TalkService_getCountryWithRequestIp_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCountryWithRequestIp_result__isset {
  _TalkService_getCountryWithRequestIp_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCountryWithRequestIp_result__isset;

class TalkService_getCountryWithRequestIp_result {
 public:

  TalkService_getCountryWithRequestIp_result(const TalkService_getCountryWithRequestIp_result&);
  TalkService_getCountryWithRequestIp_result& operator=(const TalkService_getCountryWithRequestIp_result&);
  TalkService_getCountryWithRequestIp_result() : success() {
  }

  virtual ~TalkService_getCountryWithRequestIp_result() noexcept;
  std::string success;
  TalkException e;

  _TalkService_getCountryWithRequestIp_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getCountryWithRequestIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getCountryWithRequestIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCountryWithRequestIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCountryWithRequestIp_presult__isset {
  _TalkService_getCountryWithRequestIp_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCountryWithRequestIp_presult__isset;

class TalkService_getCountryWithRequestIp_presult {
 public:


  virtual ~TalkService_getCountryWithRequestIp_presult() noexcept;
  std::string* success;
  TalkException e;

  _TalkService_getCountryWithRequestIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getServerTime_args {
 public:

  TalkService_getServerTime_args(const TalkService_getServerTime_args&);
  TalkService_getServerTime_args& operator=(const TalkService_getServerTime_args&);
  TalkService_getServerTime_args() {
  }

  virtual ~TalkService_getServerTime_args() noexcept;

  bool operator == (const TalkService_getServerTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getServerTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getServerTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getServerTime_pargs {
 public:


  virtual ~TalkService_getServerTime_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getServerTime_result__isset {
  _TalkService_getServerTime_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getServerTime_result__isset;

class TalkService_getServerTime_result {
 public:

  TalkService_getServerTime_result(const TalkService_getServerTime_result&);
  TalkService_getServerTime_result& operator=(const TalkService_getServerTime_result&);
  TalkService_getServerTime_result() : success(0) {
  }

  virtual ~TalkService_getServerTime_result() noexcept;
  int64_t success;
  TalkException e;

  _TalkService_getServerTime_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getServerTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getServerTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getServerTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getServerTime_presult__isset {
  _TalkService_getServerTime_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getServerTime_presult__isset;

class TalkService_getServerTime_presult {
 public:


  virtual ~TalkService_getServerTime_presult() noexcept;
  int64_t* success;
  TalkException e;

  _TalkService_getServerTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getContacts_args__isset {
  _TalkService_getContacts_args__isset() : ids(false) {}
  bool ids :1;
} _TalkService_getContacts_args__isset;

class TalkService_getContacts_args {
 public:

  TalkService_getContacts_args(const TalkService_getContacts_args&);
  TalkService_getContacts_args& operator=(const TalkService_getContacts_args&);
  TalkService_getContacts_args() {
  }

  virtual ~TalkService_getContacts_args() noexcept;
  std::vector<std::string>  ids;

  _TalkService_getContacts_args__isset __isset;

  void __set_ids(const std::vector<std::string> & val);

  bool operator == (const TalkService_getContacts_args & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getContacts_pargs {
 public:


  virtual ~TalkService_getContacts_pargs() noexcept;
  const std::vector<std::string> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContacts_result__isset {
  _TalkService_getContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContacts_result__isset;

class TalkService_getContacts_result {
 public:

  TalkService_getContacts_result(const TalkService_getContacts_result&);
  TalkService_getContacts_result& operator=(const TalkService_getContacts_result&);
  TalkService_getContacts_result() {
  }

  virtual ~TalkService_getContacts_result() noexcept;
  std::vector<Contact>  success;
  TalkException e;

  _TalkService_getContacts_result__isset __isset;

  void __set_success(const std::vector<Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContacts_presult__isset {
  _TalkService_getContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContacts_presult__isset;

class TalkService_getContacts_presult {
 public:


  virtual ~TalkService_getContacts_presult() noexcept;
  std::vector<Contact> * success;
  TalkException e;

  _TalkService_getContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getAllContactIds_args__isset {
  _TalkService_getAllContactIds_args__isset() : syncReason(false) {}
  bool syncReason :1;
} _TalkService_getAllContactIds_args__isset;

class TalkService_getAllContactIds_args {
 public:

  TalkService_getAllContactIds_args(const TalkService_getAllContactIds_args&);
  TalkService_getAllContactIds_args& operator=(const TalkService_getAllContactIds_args&);
  TalkService_getAllContactIds_args() : syncReason((SyncReason::type)0) {
  }

  virtual ~TalkService_getAllContactIds_args() noexcept;
  SyncReason::type syncReason;

  _TalkService_getAllContactIds_args__isset __isset;

  void __set_syncReason(const SyncReason::type val);

  bool operator == (const TalkService_getAllContactIds_args & rhs) const
  {
    if (!(syncReason == rhs.syncReason))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAllContactIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAllContactIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getAllContactIds_pargs {
 public:


  virtual ~TalkService_getAllContactIds_pargs() noexcept;
  const SyncReason::type* syncReason;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAllContactIds_result__isset {
  _TalkService_getAllContactIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAllContactIds_result__isset;

class TalkService_getAllContactIds_result {
 public:

  TalkService_getAllContactIds_result(const TalkService_getAllContactIds_result&);
  TalkService_getAllContactIds_result& operator=(const TalkService_getAllContactIds_result&);
  TalkService_getAllContactIds_result() {
  }

  virtual ~TalkService_getAllContactIds_result() noexcept;
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getAllContactIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getAllContactIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAllContactIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAllContactIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAllContactIds_presult__isset {
  _TalkService_getAllContactIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAllContactIds_presult__isset;

class TalkService_getAllContactIds_presult {
 public:


  virtual ~TalkService_getAllContactIds_presult() noexcept;
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getAllContactIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getChats_args__isset {
  _TalkService_getChats_args__isset() : request(false) {}
  bool request :1;
} _TalkService_getChats_args__isset;

class TalkService_getChats_args {
 public:

  TalkService_getChats_args(const TalkService_getChats_args&);
  TalkService_getChats_args& operator=(const TalkService_getChats_args&);
  TalkService_getChats_args() {
  }

  virtual ~TalkService_getChats_args() noexcept;
  GetChatsRequest request;

  _TalkService_getChats_args__isset __isset;

  void __set_request(const GetChatsRequest& val);

  bool operator == (const TalkService_getChats_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_getChats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getChats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getChats_pargs {
 public:


  virtual ~TalkService_getChats_pargs() noexcept;
  const GetChatsRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getChats_result__isset {
  _TalkService_getChats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getChats_result__isset;

class TalkService_getChats_result {
 public:

  TalkService_getChats_result(const TalkService_getChats_result&);
  TalkService_getChats_result& operator=(const TalkService_getChats_result&);
  TalkService_getChats_result() {
  }

  virtual ~TalkService_getChats_result() noexcept;
  GetChatsResponse success;
  TalkException e;

  _TalkService_getChats_result__isset __isset;

  void __set_success(const GetChatsResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getChats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getChats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getChats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getChats_presult__isset {
  _TalkService_getChats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getChats_presult__isset;

class TalkService_getChats_presult {
 public:


  virtual ~TalkService_getChats_presult() noexcept;
  GetChatsResponse* success;
  TalkException e;

  _TalkService_getChats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_inviteIntoChat_args__isset {
  _TalkService_inviteIntoChat_args__isset() : request(false) {}
  bool request :1;
} _TalkService_inviteIntoChat_args__isset;

class TalkService_inviteIntoChat_args {
 public:

  TalkService_inviteIntoChat_args(const TalkService_inviteIntoChat_args&);
  TalkService_inviteIntoChat_args& operator=(const TalkService_inviteIntoChat_args&);
  TalkService_inviteIntoChat_args() {
  }

  virtual ~TalkService_inviteIntoChat_args() noexcept;
  InviteIntoChatRequest request;

  _TalkService_inviteIntoChat_args__isset __isset;

  void __set_request(const InviteIntoChatRequest& val);

  bool operator == (const TalkService_inviteIntoChat_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteIntoChat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteIntoChat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_inviteIntoChat_pargs {
 public:


  virtual ~TalkService_inviteIntoChat_pargs() noexcept;
  const InviteIntoChatRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteIntoChat_result__isset {
  _TalkService_inviteIntoChat_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_inviteIntoChat_result__isset;

class TalkService_inviteIntoChat_result {
 public:

  TalkService_inviteIntoChat_result(const TalkService_inviteIntoChat_result&);
  TalkService_inviteIntoChat_result& operator=(const TalkService_inviteIntoChat_result&);
  TalkService_inviteIntoChat_result() {
  }

  virtual ~TalkService_inviteIntoChat_result() noexcept;
  InviteIntoChatResponse success;
  TalkException e;

  _TalkService_inviteIntoChat_result__isset __isset;

  void __set_success(const InviteIntoChatResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_inviteIntoChat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteIntoChat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteIntoChat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteIntoChat_presult__isset {
  _TalkService_inviteIntoChat_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_inviteIntoChat_presult__isset;

class TalkService_inviteIntoChat_presult {
 public:


  virtual ~TalkService_inviteIntoChat_presult() noexcept;
  InviteIntoChatResponse* success;
  TalkException e;

  _TalkService_inviteIntoChat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reissueChatTicket_args__isset {
  _TalkService_reissueChatTicket_args__isset() : request(false) {}
  bool request :1;
} _TalkService_reissueChatTicket_args__isset;

class TalkService_reissueChatTicket_args {
 public:

  TalkService_reissueChatTicket_args(const TalkService_reissueChatTicket_args&);
  TalkService_reissueChatTicket_args& operator=(const TalkService_reissueChatTicket_args&);
  TalkService_reissueChatTicket_args() {
  }

  virtual ~TalkService_reissueChatTicket_args() noexcept;
  ReissueChatTicketRequest request;

  _TalkService_reissueChatTicket_args__isset __isset;

  void __set_request(const ReissueChatTicketRequest& val);

  bool operator == (const TalkService_reissueChatTicket_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_reissueChatTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reissueChatTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reissueChatTicket_pargs {
 public:


  virtual ~TalkService_reissueChatTicket_pargs() noexcept;
  const ReissueChatTicketRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reissueChatTicket_result__isset {
  _TalkService_reissueChatTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reissueChatTicket_result__isset;

class TalkService_reissueChatTicket_result {
 public:

  TalkService_reissueChatTicket_result(const TalkService_reissueChatTicket_result&);
  TalkService_reissueChatTicket_result& operator=(const TalkService_reissueChatTicket_result&);
  TalkService_reissueChatTicket_result() {
  }

  virtual ~TalkService_reissueChatTicket_result() noexcept;
  ReissueChatTicketResponse success;
  TalkException e;

  _TalkService_reissueChatTicket_result__isset __isset;

  void __set_success(const ReissueChatTicketResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reissueChatTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reissueChatTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reissueChatTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reissueChatTicket_presult__isset {
  _TalkService_reissueChatTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reissueChatTicket_presult__isset;

class TalkService_reissueChatTicket_presult {
 public:


  virtual ~TalkService_reissueChatTicket_presult() noexcept;
  ReissueChatTicketResponse* success;
  TalkException e;

  _TalkService_reissueChatTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_rejectChatInvitation_args__isset {
  _TalkService_rejectChatInvitation_args__isset() : request(false) {}
  bool request :1;
} _TalkService_rejectChatInvitation_args__isset;

class TalkService_rejectChatInvitation_args {
 public:

  TalkService_rejectChatInvitation_args(const TalkService_rejectChatInvitation_args&);
  TalkService_rejectChatInvitation_args& operator=(const TalkService_rejectChatInvitation_args&);
  TalkService_rejectChatInvitation_args() {
  }

  virtual ~TalkService_rejectChatInvitation_args() noexcept;
  RejectChatInvitationRequest request;

  _TalkService_rejectChatInvitation_args__isset __isset;

  void __set_request(const RejectChatInvitationRequest& val);

  bool operator == (const TalkService_rejectChatInvitation_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_rejectChatInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_rejectChatInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_rejectChatInvitation_pargs {
 public:


  virtual ~TalkService_rejectChatInvitation_pargs() noexcept;
  const RejectChatInvitationRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_rejectChatInvitation_result__isset {
  _TalkService_rejectChatInvitation_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_rejectChatInvitation_result__isset;

class TalkService_rejectChatInvitation_result {
 public:

  TalkService_rejectChatInvitation_result(const TalkService_rejectChatInvitation_result&);
  TalkService_rejectChatInvitation_result& operator=(const TalkService_rejectChatInvitation_result&);
  TalkService_rejectChatInvitation_result() {
  }

  virtual ~TalkService_rejectChatInvitation_result() noexcept;
  RejectChatInvitationResponse success;
  TalkException e;

  _TalkService_rejectChatInvitation_result__isset __isset;

  void __set_success(const RejectChatInvitationResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_rejectChatInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_rejectChatInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_rejectChatInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_rejectChatInvitation_presult__isset {
  _TalkService_rejectChatInvitation_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_rejectChatInvitation_presult__isset;

class TalkService_rejectChatInvitation_presult {
 public:


  virtual ~TalkService_rejectChatInvitation_presult() noexcept;
  RejectChatInvitationResponse* success;
  TalkException e;

  _TalkService_rejectChatInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendMessage_args__isset {
  _TalkService_sendMessage_args__isset() : seq(false), message(false) {}
  bool seq :1;
  bool message :1;
} _TalkService_sendMessage_args__isset;

class TalkService_sendMessage_args {
 public:

  TalkService_sendMessage_args(const TalkService_sendMessage_args&);
  TalkService_sendMessage_args& operator=(const TalkService_sendMessage_args&);
  TalkService_sendMessage_args() : seq(0) {
  }

  virtual ~TalkService_sendMessage_args() noexcept;
  int32_t seq;
  Message message;

  _TalkService_sendMessage_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_message(const Message& val);

  bool operator == (const TalkService_sendMessage_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendMessage_pargs {
 public:


  virtual ~TalkService_sendMessage_pargs() noexcept;
  const int32_t* seq;
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessage_result__isset {
  _TalkService_sendMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendMessage_result__isset;

class TalkService_sendMessage_result {
 public:

  TalkService_sendMessage_result(const TalkService_sendMessage_result&);
  TalkService_sendMessage_result& operator=(const TalkService_sendMessage_result&);
  TalkService_sendMessage_result() {
  }

  virtual ~TalkService_sendMessage_result() noexcept;
  Message success;
  TalkException e;

  _TalkService_sendMessage_result__isset __isset;

  void __set_success(const Message& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessage_presult__isset {
  _TalkService_sendMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendMessage_presult__isset;

class TalkService_sendMessage_presult {
 public:


  virtual ~TalkService_sendMessage_presult() noexcept;
  Message* success;
  TalkException e;

  _TalkService_sendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_unsendMessage_args__isset {
  _TalkService_unsendMessage_args__isset() : seq(false), messageId(false) {}
  bool seq :1;
  bool messageId :1;
} _TalkService_unsendMessage_args__isset;

class TalkService_unsendMessage_args {
 public:

  TalkService_unsendMessage_args(const TalkService_unsendMessage_args&);
  TalkService_unsendMessage_args& operator=(const TalkService_unsendMessage_args&);
  TalkService_unsendMessage_args() : seq(0), messageId() {
  }

  virtual ~TalkService_unsendMessage_args() noexcept;
  int32_t seq;
  std::string messageId;

  _TalkService_unsendMessage_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_messageId(const std::string& val);

  bool operator == (const TalkService_unsendMessage_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const TalkService_unsendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unsendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_unsendMessage_pargs {
 public:


  virtual ~TalkService_unsendMessage_pargs() noexcept;
  const int32_t* seq;
  const std::string* messageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unsendMessage_result__isset {
  _TalkService_unsendMessage_result__isset() : e(false) {}
  bool e :1;
} _TalkService_unsendMessage_result__isset;

class TalkService_unsendMessage_result {
 public:

  TalkService_unsendMessage_result(const TalkService_unsendMessage_result&);
  TalkService_unsendMessage_result& operator=(const TalkService_unsendMessage_result&);
  TalkService_unsendMessage_result() {
  }

  virtual ~TalkService_unsendMessage_result() noexcept;
  TalkException e;

  _TalkService_unsendMessage_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_unsendMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_unsendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unsendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unsendMessage_presult__isset {
  _TalkService_unsendMessage_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_unsendMessage_presult__isset;

class TalkService_unsendMessage_presult {
 public:


  virtual ~TalkService_unsendMessage_presult() noexcept;
  TalkException e;

  _TalkService_unsendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateChat_args__isset {
  _TalkService_updateChat_args__isset() : request(false) {}
  bool request :1;
} _TalkService_updateChat_args__isset;

class TalkService_updateChat_args {
 public:

  TalkService_updateChat_args(const TalkService_updateChat_args&);
  TalkService_updateChat_args& operator=(const TalkService_updateChat_args&);
  TalkService_updateChat_args() {
  }

  virtual ~TalkService_updateChat_args() noexcept;
  UpdateChatRequest request;

  _TalkService_updateChat_args__isset __isset;

  void __set_request(const UpdateChatRequest& val);

  bool operator == (const TalkService_updateChat_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateChat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateChat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateChat_pargs {
 public:


  virtual ~TalkService_updateChat_pargs() noexcept;
  const UpdateChatRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateChat_result__isset {
  _TalkService_updateChat_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_updateChat_result__isset;

class TalkService_updateChat_result {
 public:

  TalkService_updateChat_result(const TalkService_updateChat_result&);
  TalkService_updateChat_result& operator=(const TalkService_updateChat_result&);
  TalkService_updateChat_result() {
  }

  virtual ~TalkService_updateChat_result() noexcept;
  UpdateChatResponse success;
  TalkException e;

  _TalkService_updateChat_result__isset __isset;

  void __set_success(const UpdateChatResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateChat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateChat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateChat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateChat_presult__isset {
  _TalkService_updateChat_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_updateChat_presult__isset;

class TalkService_updateChat_presult {
 public:


  virtual ~TalkService_updateChat_presult() noexcept;
  UpdateChatResponse* success;
  TalkException e;

  _TalkService_updateChat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateProfileAttribute_args__isset {
  _TalkService_updateProfileAttribute_args__isset() : reqSeq(false), attr(false), value(false) {}
  bool reqSeq :1;
  bool attr :1;
  bool value :1;
} _TalkService_updateProfileAttribute_args__isset;

class TalkService_updateProfileAttribute_args {
 public:

  TalkService_updateProfileAttribute_args(const TalkService_updateProfileAttribute_args&);
  TalkService_updateProfileAttribute_args& operator=(const TalkService_updateProfileAttribute_args&);
  TalkService_updateProfileAttribute_args() : reqSeq(0), attr((ProfileAttribute::type)0), value() {
  }

  virtual ~TalkService_updateProfileAttribute_args() noexcept;
  int32_t reqSeq;
  ProfileAttribute::type attr;
  std::string value;

  _TalkService_updateProfileAttribute_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_attr(const ProfileAttribute::type val);

  void __set_value(const std::string& val);

  bool operator == (const TalkService_updateProfileAttribute_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(attr == rhs.attr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateProfileAttribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateProfileAttribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateProfileAttribute_pargs {
 public:


  virtual ~TalkService_updateProfileAttribute_pargs() noexcept;
  const int32_t* reqSeq;
  const ProfileAttribute::type* attr;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateProfileAttribute_result__isset {
  _TalkService_updateProfileAttribute_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateProfileAttribute_result__isset;

class TalkService_updateProfileAttribute_result {
 public:

  TalkService_updateProfileAttribute_result(const TalkService_updateProfileAttribute_result&);
  TalkService_updateProfileAttribute_result& operator=(const TalkService_updateProfileAttribute_result&);
  TalkService_updateProfileAttribute_result() {
  }

  virtual ~TalkService_updateProfileAttribute_result() noexcept;
  TalkException e;

  _TalkService_updateProfileAttribute_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateProfileAttribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateProfileAttribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateProfileAttribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateProfileAttribute_presult__isset {
  _TalkService_updateProfileAttribute_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateProfileAttribute_presult__isset;

class TalkService_updateProfileAttribute_presult {
 public:


  virtual ~TalkService_updateProfileAttribute_presult() noexcept;
  TalkException e;

  _TalkService_updateProfileAttribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TalkServiceClient : virtual public TalkServiceIf {
 public:
  TalkServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TalkServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void acceptChatInvitation(AcceptChatInvitationResponse& _return, const AcceptChatInvitationRequest& request);
  void send_acceptChatInvitation(const AcceptChatInvitationRequest& request);
  void recv_acceptChatInvitation(AcceptChatInvitationResponse& _return);
  void acceptChatInvitationByTicket(AcceptChatInvitationByTicketResponse& _return, const AcceptChatInvitationByTicketRequest& request);
  void send_acceptChatInvitationByTicket(const AcceptChatInvitationByTicketRequest& request);
  void recv_acceptChatInvitationByTicket(AcceptChatInvitationByTicketResponse& _return);
  void blockContact(const int32_t reqSeq, const std::string& id);
  void send_blockContact(const int32_t reqSeq, const std::string& id);
  void recv_blockContact();
  void cancelChatInvitation(CancelChatInvitationResponse& _return, const CancelChatInvitationRequest& request);
  void send_cancelChatInvitation(const CancelChatInvitationRequest& request);
  void recv_cancelChatInvitation(CancelChatInvitationResponse& _return);
  void createChat(CreateChatResponse& _return, const CreateChatRequest& request);
  void send_createChat(const CreateChatRequest& request);
  void recv_createChat(CreateChatResponse& _return);
  void deleteSelfFromChat(DeleteSelfFromChatResponse& _return, const DeleteSelfFromChatRequest& request);
  void send_deleteSelfFromChat(const DeleteSelfFromChatRequest& request);
  void recv_deleteSelfFromChat(DeleteSelfFromChatResponse& _return);
  void deleteOtherFromChat(DeleteOtherFromChatResponse& _return, const DeleteOtherFromChatRequest& request);
  void send_deleteOtherFromChat(const DeleteOtherFromChatRequest& request);
  void recv_deleteOtherFromChat(DeleteOtherFromChatResponse& _return);
  void fetchOperations(FetchOperationsResponse& _return, const FetchOperationsRequest& request);
  void send_fetchOperations(const FetchOperationsRequest& request);
  void recv_fetchOperations(FetchOperationsResponse& _return);
  void fetchOps(std::vector<Operation> & _return, const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev);
  void send_fetchOps(const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev);
  void recv_fetchOps(std::vector<Operation> & _return);
  void findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference);
  void send_findAndAddContactsByMid(const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference);
  void recv_findAndAddContactsByMid(std::map<std::string, Contact> & _return);
  void findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& searchId, const std::string& reference);
  void send_findAndAddContactsByUserid(const int32_t reqSeq, const std::string& searchId, const std::string& reference);
  void recv_findAndAddContactsByUserid(std::map<std::string, Contact> & _return);
  void findContactByUserid(Contact& _return, const std::string& userid);
  void send_findContactByUserid(const std::string& userid);
  void recv_findContactByUserid(Contact& _return);
  void findChatByTicket(FindChatByTicketResponse& _return, const FindChatByTicketRequest& request);
  void send_findChatByTicket(const FindChatByTicketRequest& request);
  void recv_findChatByTicket(FindChatByTicketResponse& _return);
  void getAllChatMids(GetAllChatMidsResponse& _return, const GetAllChatMidsRequest& request, const SyncReason::type syncReason);
  void send_getAllChatMids(const GetAllChatMidsRequest& request, const SyncReason::type syncReason);
  void recv_getAllChatMids(GetAllChatMidsResponse& _return);
  void getProfile(Profile& _return, const SyncReason::type syncReason);
  void send_getProfile(const SyncReason::type syncReason);
  void recv_getProfile(Profile& _return);
  void getContact(Contact& _return, const std::string& id);
  void send_getContact(const std::string& id);
  void recv_getContact(Contact& _return);
  void getCountryWithRequestIp(std::string& _return);
  void send_getCountryWithRequestIp();
  void recv_getCountryWithRequestIp(std::string& _return);
  int64_t getServerTime();
  void send_getServerTime();
  int64_t recv_getServerTime();
  void getContacts(std::vector<Contact> & _return, const std::vector<std::string> & ids);
  void send_getContacts(const std::vector<std::string> & ids);
  void recv_getContacts(std::vector<Contact> & _return);
  void getAllContactIds(std::vector<std::string> & _return, const SyncReason::type syncReason);
  void send_getAllContactIds(const SyncReason::type syncReason);
  void recv_getAllContactIds(std::vector<std::string> & _return);
  void getChats(GetChatsResponse& _return, const GetChatsRequest& request);
  void send_getChats(const GetChatsRequest& request);
  void recv_getChats(GetChatsResponse& _return);
  void inviteIntoChat(InviteIntoChatResponse& _return, const InviteIntoChatRequest& request);
  void send_inviteIntoChat(const InviteIntoChatRequest& request);
  void recv_inviteIntoChat(InviteIntoChatResponse& _return);
  void reissueChatTicket(ReissueChatTicketResponse& _return, const ReissueChatTicketRequest& request);
  void send_reissueChatTicket(const ReissueChatTicketRequest& request);
  void recv_reissueChatTicket(ReissueChatTicketResponse& _return);
  void rejectChatInvitation(RejectChatInvitationResponse& _return, const RejectChatInvitationRequest& request);
  void send_rejectChatInvitation(const RejectChatInvitationRequest& request);
  void recv_rejectChatInvitation(RejectChatInvitationResponse& _return);
  void sendMessage(Message& _return, const int32_t seq, const Message& message);
  void send_sendMessage(const int32_t seq, const Message& message);
  void recv_sendMessage(Message& _return);
  void unsendMessage(const int32_t seq, const std::string& messageId);
  void send_unsendMessage(const int32_t seq, const std::string& messageId);
  void recv_unsendMessage();
  void updateChat(UpdateChatResponse& _return, const UpdateChatRequest& request);
  void send_updateChat(const UpdateChatRequest& request);
  void recv_updateChat(UpdateChatResponse& _return);
  void updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value);
  void send_updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value);
  void recv_updateProfileAttribute();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TalkServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<TalkServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TalkServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_acceptChatInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acceptChatInvitationByTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_blockContact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelChatInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createChat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSelfFromChat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteOtherFromChat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchOperations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchOps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAndAddContactsByMid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAndAddContactsByUserid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findContactByUserid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findChatByTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllChatMids(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCountryWithRequestIp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServerTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllContactIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_inviteIntoChat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reissueChatTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rejectChatInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unsendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateChat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProfileAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TalkServiceProcessor(::std::shared_ptr<TalkServiceIf> iface) :
    iface_(iface) {
    processMap_["acceptChatInvitation"] = &TalkServiceProcessor::process_acceptChatInvitation;
    processMap_["acceptChatInvitationByTicket"] = &TalkServiceProcessor::process_acceptChatInvitationByTicket;
    processMap_["blockContact"] = &TalkServiceProcessor::process_blockContact;
    processMap_["cancelChatInvitation"] = &TalkServiceProcessor::process_cancelChatInvitation;
    processMap_["createChat"] = &TalkServiceProcessor::process_createChat;
    processMap_["deleteSelfFromChat"] = &TalkServiceProcessor::process_deleteSelfFromChat;
    processMap_["deleteOtherFromChat"] = &TalkServiceProcessor::process_deleteOtherFromChat;
    processMap_["fetchOperations"] = &TalkServiceProcessor::process_fetchOperations;
    processMap_["fetchOps"] = &TalkServiceProcessor::process_fetchOps;
    processMap_["findAndAddContactsByMid"] = &TalkServiceProcessor::process_findAndAddContactsByMid;
    processMap_["findAndAddContactsByUserid"] = &TalkServiceProcessor::process_findAndAddContactsByUserid;
    processMap_["findContactByUserid"] = &TalkServiceProcessor::process_findContactByUserid;
    processMap_["findChatByTicket"] = &TalkServiceProcessor::process_findChatByTicket;
    processMap_["getAllChatMids"] = &TalkServiceProcessor::process_getAllChatMids;
    processMap_["getProfile"] = &TalkServiceProcessor::process_getProfile;
    processMap_["getContact"] = &TalkServiceProcessor::process_getContact;
    processMap_["getCountryWithRequestIp"] = &TalkServiceProcessor::process_getCountryWithRequestIp;
    processMap_["getServerTime"] = &TalkServiceProcessor::process_getServerTime;
    processMap_["getContacts"] = &TalkServiceProcessor::process_getContacts;
    processMap_["getAllContactIds"] = &TalkServiceProcessor::process_getAllContactIds;
    processMap_["getChats"] = &TalkServiceProcessor::process_getChats;
    processMap_["inviteIntoChat"] = &TalkServiceProcessor::process_inviteIntoChat;
    processMap_["reissueChatTicket"] = &TalkServiceProcessor::process_reissueChatTicket;
    processMap_["rejectChatInvitation"] = &TalkServiceProcessor::process_rejectChatInvitation;
    processMap_["sendMessage"] = &TalkServiceProcessor::process_sendMessage;
    processMap_["unsendMessage"] = &TalkServiceProcessor::process_unsendMessage;
    processMap_["updateChat"] = &TalkServiceProcessor::process_updateChat;
    processMap_["updateProfileAttribute"] = &TalkServiceProcessor::process_updateProfileAttribute;
  }

  virtual ~TalkServiceProcessor() {}
};

class TalkServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TalkServiceProcessorFactory(const ::std::shared_ptr< TalkServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< TalkServiceIfFactory > handlerFactory_;
};

class TalkServiceMultiface : virtual public TalkServiceIf {
 public:
  TalkServiceMultiface(std::vector<std::shared_ptr<TalkServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TalkServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<TalkServiceIf> > ifaces_;
  TalkServiceMultiface() {}
  void add(::std::shared_ptr<TalkServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void acceptChatInvitation(AcceptChatInvitationResponse& _return, const AcceptChatInvitationRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acceptChatInvitation(_return, request);
    }
    ifaces_[i]->acceptChatInvitation(_return, request);
    return;
  }

  void acceptChatInvitationByTicket(AcceptChatInvitationByTicketResponse& _return, const AcceptChatInvitationByTicketRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acceptChatInvitationByTicket(_return, request);
    }
    ifaces_[i]->acceptChatInvitationByTicket(_return, request);
    return;
  }

  void blockContact(const int32_t reqSeq, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->blockContact(reqSeq, id);
    }
    ifaces_[i]->blockContact(reqSeq, id);
  }

  void cancelChatInvitation(CancelChatInvitationResponse& _return, const CancelChatInvitationRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelChatInvitation(_return, request);
    }
    ifaces_[i]->cancelChatInvitation(_return, request);
    return;
  }

  void createChat(CreateChatResponse& _return, const CreateChatRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createChat(_return, request);
    }
    ifaces_[i]->createChat(_return, request);
    return;
  }

  void deleteSelfFromChat(DeleteSelfFromChatResponse& _return, const DeleteSelfFromChatRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSelfFromChat(_return, request);
    }
    ifaces_[i]->deleteSelfFromChat(_return, request);
    return;
  }

  void deleteOtherFromChat(DeleteOtherFromChatResponse& _return, const DeleteOtherFromChatRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteOtherFromChat(_return, request);
    }
    ifaces_[i]->deleteOtherFromChat(_return, request);
    return;
  }

  void fetchOperations(FetchOperationsResponse& _return, const FetchOperationsRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchOperations(_return, request);
    }
    ifaces_[i]->fetchOperations(_return, request);
    return;
  }

  void fetchOps(std::vector<Operation> & _return, const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchOps(_return, localRev, count, globalRev, individualRev);
    }
    ifaces_[i]->fetchOps(_return, localRev, count, globalRev, individualRev);
    return;
  }

  void findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAndAddContactsByMid(_return, reqSeq, mid, type, reference);
    }
    ifaces_[i]->findAndAddContactsByMid(_return, reqSeq, mid, type, reference);
    return;
  }

  void findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& searchId, const std::string& reference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAndAddContactsByUserid(_return, reqSeq, searchId, reference);
    }
    ifaces_[i]->findAndAddContactsByUserid(_return, reqSeq, searchId, reference);
    return;
  }

  void findContactByUserid(Contact& _return, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findContactByUserid(_return, userid);
    }
    ifaces_[i]->findContactByUserid(_return, userid);
    return;
  }

  void findChatByTicket(FindChatByTicketResponse& _return, const FindChatByTicketRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findChatByTicket(_return, request);
    }
    ifaces_[i]->findChatByTicket(_return, request);
    return;
  }

  void getAllChatMids(GetAllChatMidsResponse& _return, const GetAllChatMidsRequest& request, const SyncReason::type syncReason) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllChatMids(_return, request, syncReason);
    }
    ifaces_[i]->getAllChatMids(_return, request, syncReason);
    return;
  }

  void getProfile(Profile& _return, const SyncReason::type syncReason) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProfile(_return, syncReason);
    }
    ifaces_[i]->getProfile(_return, syncReason);
    return;
  }

  void getContact(Contact& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContact(_return, id);
    }
    ifaces_[i]->getContact(_return, id);
    return;
  }

  void getCountryWithRequestIp(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCountryWithRequestIp(_return);
    }
    ifaces_[i]->getCountryWithRequestIp(_return);
    return;
  }

  int64_t getServerTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServerTime();
    }
    return ifaces_[i]->getServerTime();
  }

  void getContacts(std::vector<Contact> & _return, const std::vector<std::string> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContacts(_return, ids);
    }
    ifaces_[i]->getContacts(_return, ids);
    return;
  }

  void getAllContactIds(std::vector<std::string> & _return, const SyncReason::type syncReason) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllContactIds(_return, syncReason);
    }
    ifaces_[i]->getAllContactIds(_return, syncReason);
    return;
  }

  void getChats(GetChatsResponse& _return, const GetChatsRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChats(_return, request);
    }
    ifaces_[i]->getChats(_return, request);
    return;
  }

  void inviteIntoChat(InviteIntoChatResponse& _return, const InviteIntoChatRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->inviteIntoChat(_return, request);
    }
    ifaces_[i]->inviteIntoChat(_return, request);
    return;
  }

  void reissueChatTicket(ReissueChatTicketResponse& _return, const ReissueChatTicketRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reissueChatTicket(_return, request);
    }
    ifaces_[i]->reissueChatTicket(_return, request);
    return;
  }

  void rejectChatInvitation(RejectChatInvitationResponse& _return, const RejectChatInvitationRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rejectChatInvitation(_return, request);
    }
    ifaces_[i]->rejectChatInvitation(_return, request);
    return;
  }

  void sendMessage(Message& _return, const int32_t seq, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(_return, seq, message);
    }
    ifaces_[i]->sendMessage(_return, seq, message);
    return;
  }

  void unsendMessage(const int32_t seq, const std::string& messageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unsendMessage(seq, messageId);
    }
    ifaces_[i]->unsendMessage(seq, messageId);
  }

  void updateChat(UpdateChatResponse& _return, const UpdateChatRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateChat(_return, request);
    }
    ifaces_[i]->updateChat(_return, request);
    return;
  }

  void updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProfileAttribute(reqSeq, attr, value);
    }
    ifaces_[i]->updateProfileAttribute(reqSeq, attr, value);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TalkServiceConcurrentClient : virtual public TalkServiceIf {
 public:
  TalkServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  TalkServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void acceptChatInvitation(AcceptChatInvitationResponse& _return, const AcceptChatInvitationRequest& request);
  int32_t send_acceptChatInvitation(const AcceptChatInvitationRequest& request);
  void recv_acceptChatInvitation(AcceptChatInvitationResponse& _return, const int32_t seqid);
  void acceptChatInvitationByTicket(AcceptChatInvitationByTicketResponse& _return, const AcceptChatInvitationByTicketRequest& request);
  int32_t send_acceptChatInvitationByTicket(const AcceptChatInvitationByTicketRequest& request);
  void recv_acceptChatInvitationByTicket(AcceptChatInvitationByTicketResponse& _return, const int32_t seqid);
  void blockContact(const int32_t reqSeq, const std::string& id);
  int32_t send_blockContact(const int32_t reqSeq, const std::string& id);
  void recv_blockContact(const int32_t seqid);
  void cancelChatInvitation(CancelChatInvitationResponse& _return, const CancelChatInvitationRequest& request);
  int32_t send_cancelChatInvitation(const CancelChatInvitationRequest& request);
  void recv_cancelChatInvitation(CancelChatInvitationResponse& _return, const int32_t seqid);
  void createChat(CreateChatResponse& _return, const CreateChatRequest& request);
  int32_t send_createChat(const CreateChatRequest& request);
  void recv_createChat(CreateChatResponse& _return, const int32_t seqid);
  void deleteSelfFromChat(DeleteSelfFromChatResponse& _return, const DeleteSelfFromChatRequest& request);
  int32_t send_deleteSelfFromChat(const DeleteSelfFromChatRequest& request);
  void recv_deleteSelfFromChat(DeleteSelfFromChatResponse& _return, const int32_t seqid);
  void deleteOtherFromChat(DeleteOtherFromChatResponse& _return, const DeleteOtherFromChatRequest& request);
  int32_t send_deleteOtherFromChat(const DeleteOtherFromChatRequest& request);
  void recv_deleteOtherFromChat(DeleteOtherFromChatResponse& _return, const int32_t seqid);
  void fetchOperations(FetchOperationsResponse& _return, const FetchOperationsRequest& request);
  int32_t send_fetchOperations(const FetchOperationsRequest& request);
  void recv_fetchOperations(FetchOperationsResponse& _return, const int32_t seqid);
  void fetchOps(std::vector<Operation> & _return, const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev);
  int32_t send_fetchOps(const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev);
  void recv_fetchOps(std::vector<Operation> & _return, const int32_t seqid);
  void findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference);
  int32_t send_findAndAddContactsByMid(const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference);
  void recv_findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t seqid);
  void findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& searchId, const std::string& reference);
  int32_t send_findAndAddContactsByUserid(const int32_t reqSeq, const std::string& searchId, const std::string& reference);
  void recv_findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t seqid);
  void findContactByUserid(Contact& _return, const std::string& userid);
  int32_t send_findContactByUserid(const std::string& userid);
  void recv_findContactByUserid(Contact& _return, const int32_t seqid);
  void findChatByTicket(FindChatByTicketResponse& _return, const FindChatByTicketRequest& request);
  int32_t send_findChatByTicket(const FindChatByTicketRequest& request);
  void recv_findChatByTicket(FindChatByTicketResponse& _return, const int32_t seqid);
  void getAllChatMids(GetAllChatMidsResponse& _return, const GetAllChatMidsRequest& request, const SyncReason::type syncReason);
  int32_t send_getAllChatMids(const GetAllChatMidsRequest& request, const SyncReason::type syncReason);
  void recv_getAllChatMids(GetAllChatMidsResponse& _return, const int32_t seqid);
  void getProfile(Profile& _return, const SyncReason::type syncReason);
  int32_t send_getProfile(const SyncReason::type syncReason);
  void recv_getProfile(Profile& _return, const int32_t seqid);
  void getContact(Contact& _return, const std::string& id);
  int32_t send_getContact(const std::string& id);
  void recv_getContact(Contact& _return, const int32_t seqid);
  void getCountryWithRequestIp(std::string& _return);
  int32_t send_getCountryWithRequestIp();
  void recv_getCountryWithRequestIp(std::string& _return, const int32_t seqid);
  int64_t getServerTime();
  int32_t send_getServerTime();
  int64_t recv_getServerTime(const int32_t seqid);
  void getContacts(std::vector<Contact> & _return, const std::vector<std::string> & ids);
  int32_t send_getContacts(const std::vector<std::string> & ids);
  void recv_getContacts(std::vector<Contact> & _return, const int32_t seqid);
  void getAllContactIds(std::vector<std::string> & _return, const SyncReason::type syncReason);
  int32_t send_getAllContactIds(const SyncReason::type syncReason);
  void recv_getAllContactIds(std::vector<std::string> & _return, const int32_t seqid);
  void getChats(GetChatsResponse& _return, const GetChatsRequest& request);
  int32_t send_getChats(const GetChatsRequest& request);
  void recv_getChats(GetChatsResponse& _return, const int32_t seqid);
  void inviteIntoChat(InviteIntoChatResponse& _return, const InviteIntoChatRequest& request);
  int32_t send_inviteIntoChat(const InviteIntoChatRequest& request);
  void recv_inviteIntoChat(InviteIntoChatResponse& _return, const int32_t seqid);
  void reissueChatTicket(ReissueChatTicketResponse& _return, const ReissueChatTicketRequest& request);
  int32_t send_reissueChatTicket(const ReissueChatTicketRequest& request);
  void recv_reissueChatTicket(ReissueChatTicketResponse& _return, const int32_t seqid);
  void rejectChatInvitation(RejectChatInvitationResponse& _return, const RejectChatInvitationRequest& request);
  int32_t send_rejectChatInvitation(const RejectChatInvitationRequest& request);
  void recv_rejectChatInvitation(RejectChatInvitationResponse& _return, const int32_t seqid);
  void sendMessage(Message& _return, const int32_t seq, const Message& message);
  int32_t send_sendMessage(const int32_t seq, const Message& message);
  void recv_sendMessage(Message& _return, const int32_t seqid);
  void unsendMessage(const int32_t seq, const std::string& messageId);
  int32_t send_unsendMessage(const int32_t seq, const std::string& messageId);
  void recv_unsendMessage(const int32_t seqid);
  void updateChat(UpdateChatResponse& _return, const UpdateChatRequest& request);
  int32_t send_updateChat(const UpdateChatRequest& request);
  void recv_updateChat(UpdateChatResponse& _return, const int32_t seqid);
  void updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value);
  int32_t send_updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value);
  void recv_updateProfileAttribute(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
