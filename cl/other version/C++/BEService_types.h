/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BEService_TYPES_H
#define BEService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct AccuracyMode {
  enum type {
    UNKNOWN = 0,
    IOS_REDUCED_ACCURACY = 1,
    IOS_FULL_ACCURACY = 2
  };
};

extern const std::map<int, const char*> _AccuracyMode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AccuracyMode::type& val);

std::string to_string(const AccuracyMode::type& val);

struct AppExtensionType {
  enum type {
    SIRI = 1,
    GOOGLE_ASSISTANT = 2,
    OS_SHARE = 3
  };
};

extern const std::map<int, const char*> _AppExtensionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AppExtensionType::type& val);

std::string to_string(const AppExtensionType::type& val);

struct ContactStatus {
  enum type {
    UNSPECIFIED = 0,
    FRIEND = 1,
    FRIEND_BLOCKED = 2,
    RECOMMEND = 3,
    RECOMMEND_BLOCKED = 4,
    DELETED = 5,
    DELETED_BLOCKED = 6
  };
};

extern const std::map<int, const char*> _ContactStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactStatus::type& val);

std::string to_string(const ContactStatus::type& val);

struct ChatType {
  enum type {
    GROUP = 0,
    ROOM = 1,
    PEER = 2
  };
};

extern const std::map<int, const char*> _ChatType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChatType::type& val);

std::string to_string(const ChatType::type& val);

struct ContentType {
  enum type {
    NONE = 0,
    IMAGE = 1,
    VIDEO = 2,
    AUDIO = 3,
    HTML = 4,
    PDF = 5,
    CALL = 6,
    STICKER = 7,
    PRESENCE = 8,
    GIFT = 9,
    GROUPBOARD = 10,
    APPLINK = 11,
    LINK = 12,
    CONTACT = 13,
    FILE = 14,
    LOCATION = 15,
    POSTNOTIFICATION = 16,
    RICH = 17,
    CHATEVENT = 18,
    MUSIC = 19,
    PAYMENT = 20,
    EXTIMAGE = 21,
    FLEX = 22
  };
};

extern const std::map<int, const char*> _ContentType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContentType::type& val);

std::string to_string(const ContentType::type& val);

struct ContactType {
  enum type {
    MID = 0,
    PHONE = 1,
    EMAIL = 2,
    USERID = 3,
    PROXIMITY = 4,
    GROUP = 5,
    USER = 6,
    QRCODE = 7,
    PROMOTION_BOT = 8,
    CONTACT_MESSAGE = 9,
    FRIEND_REQUEST = 10,
    REPAIR = 128,
    FACEBOOK = 2305,
    SINA = 2306,
    RENREN = 2307,
    FEIXIN = 2308,
    BBM = 2309,
    BEACON = 11
  };
};

extern const std::map<int, const char*> _ContactType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactType::type& val);

std::string to_string(const ContactType::type& val);

struct FriendRequestStatus {
  enum type {
    NONE = 0,
    AVAILABLE = 1,
    ALREADY_REQUESTED = 2,
    UNAVAILABLE = 3
  };
};

extern const std::map<int, const char*> _FriendRequestStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const FriendRequestStatus::type& val);

std::string to_string(const FriendRequestStatus::type& val);

struct MessageRelationType {
  enum type {
    FORWARD = 0,
    AUTO_REPLY = 1,
    SUBORDINATE = 2,
    REPLY = 3
  };
};

extern const std::map<int, const char*> _MessageRelationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MessageRelationType::type& val);

std::string to_string(const MessageRelationType::type& val);

struct OperationType {
  enum type {
    END_OF_OPERATION = 0,
    UPDATE_PROFILE = 1,
    UPDATE_SETTINGS = 36,
    NOTIFIED_UPDATE_PROFILE = 2,
    REGISTER_USERID = 3,
    ADD_CONTACT = 4,
    NOTIFIED_ADD_CONTACT = 5,
    BLOCK_CONTACT = 6,
    UNBLOCK_CONTACT = 7,
    NOTIFIED_RECOMMEND_CONTACT = 8,
    CREATE_GROUP = 9,
    UPDATE_GROUP = 10,
    NOTIFIED_UPDATE_GROUP = 11,
    INVITE_INTO_GROUP = 12,
    NOTIFIED_INVITE_INTO_GROUP = 13,
    CANCEL_INVITATION_GROUP = 31,
    NOTIFIED_CANCEL_INVITATION_GROUP = 32,
    LEAVE_GROUP = 14,
    NOTIFIED_LEAVE_GROUP = 15,
    ACCEPT_GROUP_INVITATION = 16,
    NOTIFIED_ACCEPT_GROUP_INVITATION = 17,
    REJECT_GROUP_INVITATION = 34,
    NOTIFIED_REJECT_GROUP_INVITATION = 35,
    KICKOUT_FROM_GROUP = 18,
    NOTIFIED_KICKOUT_FROM_GROUP = 19,
    CREATE_ROOM = 20,
    INVITE_INTO_ROOM = 21,
    NOTIFIED_INVITE_INTO_ROOM = 22,
    LEAVE_ROOM = 23,
    NOTIFIED_LEAVE_ROOM = 24,
    SEND_MESSAGE = 25,
    RECEIVE_MESSAGE = 26,
    SEND_MESSAGE_RECEIPT = 27,
    RECEIVE_MESSAGE_RECEIPT = 28,
    SEND_CONTENT_RECEIPT = 29,
    SEND_CHAT_CHECKED = 40,
    SEND_CHAT_REMOVED = 41,
    RECEIVE_ANNOUNCEMENT = 30,
    INVITE_VIA_EMAIL = 38,
    NOTIFIED_REGISTER_USER = 37,
    NOTIFIED_UNREGISTER_USER = 33,
    NOTIFIED_REQUEST_RECOVERY = 39,
    NOTIFIED_FORCE_SYNC = 42,
    SEND_CONTENT = 43,
    SEND_MESSAGE_MYHOME = 44,
    NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,
    REMOVE_ALL_MESSAGES = 46,
    NOTIFIED_UPDATE_PURCHASES = 47,
    DUMMY = 48,
    UPDATE_CONTACT = 49,
    NOTIFIED_RECEIVED_CALL = 50,
    CANCEL_CALL = 51,
    NOTIFIED_REDIRECT = 52,
    NOTIFIED_CHANNEL_SYNC = 53,
    FAILED_SEND_MESSAGE = 54,
    NOTIFIED_READ_MESSAGE = 55,
    FAILED_EMAIL_CONFIRMATION = 56,
    NOTIFIED_PUSH_NOTICENTER_ITEM = 59,
    NOTIFIED_CHAT_CONTENT = 58,
    NOTIFIED_JOIN_CHAT = 60,
    NOTIFIED_LEAVE_CHAT = 61,
    NOTIFIED_TYPING = 62,
    FRIEND_REQUEST_ACCEPTED = 63,
    DESTROY_MESSAGE = 64,
    NOTIFIED_DESTROY_MESSAGE = 65,
    UPDATE_PUBLICKEYCHAIN = 66,
    NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67,
    NOTIFIED_BLOCK_CONTACT = 68,
    NOTIFIED_UNBLOCK_CONTACT = 69,
    UPDATE_GROUPPREFERENCE = 70,
    NOTIFIED_PAYMENT_EVENT = 71,
    REGISTER_E2EE_PUBLICKEY = 72,
    NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73,
    NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74,
    NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75,
    NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76,
    NOTIFIED_E2EE_KEY_UPDATE = 77,
    NOTIFIED_BUDDY_UPDATE_PROFILE = 78,
    NOTIFIED_UPDATE_LINEAT_TABS = 79,
    UPDATE_ROOM = 80,
    NOTIFIED_BEACON_DETECTED = 81,
    UPDATE_EXTENDED_PROFILE = 82,
    ADD_FOLLOW = 83,
    NOTIFIED_ADD_FOLLOW = 84,
    DELETE_FOLLOW = 85,
    NOTIFIED_DELETE_FOLLOW = 86,
    UPDATE_TIMELINE_SETTINGS = 87,
    NOTIFIED_FRIEND_REQUEST = 88,
    UPDATE_RINGBACK_TONE = 89,
    NOTIFIED_POSTBACK = 90,
    RECEIVE_READ_WATERMARK = 91,
    NOTIFIED_MESSAGE_DELIVERED = 92,
    NOTIFIED_UPDATE_CHAT_BAR = 93,
    NOTIFIED_CHATAPP_INSTALLED = 94,
    NOTIFIED_CHATAPP_UPDATED = 95,
    NOTIFIED_CHATAPP_NEW_MARK = 96,
    NOTIFIED_CHATAPP_DELETED = 97,
    NOTIFIED_CHATAPP_SYNC = 98,
    NOTIFIED_UPDATE_MESSAGE = 99,
    UPDATE_CHATROOMBGM = 100,
    NOTIFIED_UPDATE_CHATROOMBGM = 101,
    UPDATE_RINGTONE = 102,
    UPDATE_USER_SETTINGS = 118,
    NOTIFIED_UPDATE_STATUS_BAR = 119,
    CREATE_CHAT = 120,
    UPDATE_CHAT = 121,
    NOTIFIED_UPDATE_CHAT = 122,
    INVITE_INTO_CHAT = 123,
    NOTIFIED_INVITE_INTO_CHAT = 124,
    CANCEL_CHAT_INVITATION = 125,
    NOTIFIED_CANCEL_CHAT_INVITATION = 126,
    DELETE_SELF_FROM_CHAT = 127,
    NOTIFIED_DELETE_SELF_FROM_CHAT = 128,
    ACCEPT_CHAT_INVITATION = 129,
    NOTIFIED_ACCEPT_CHAT_INVITATION = 130,
    REJECT_CHAT_INVITATION = 131,
    DELETE_OTHER_FROM_CHAT = 132,
    NOTIFIED_DELETE_OTHER_FROM_CHAT = 133,
    NOTIFIED_CONTACT_CALENDAR_EVENT = 134,
    NOTIFIED_CONTACT_CALENDAR_EVENT_ALL = 135,
    UPDATE_THINGS_OPERATIONS = 136,
    SEND_CHAT_HIDDEN = 137,
    CHAT_META_SYNC_ALL = 138,
    SEND_REACTION = 139,
    NOTIFIED_SEND_REACTION = 140
  };
};

extern const std::map<int, const char*> _OperationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const OperationType::type& val);

std::string to_string(const OperationType::type& val);

struct OperationStatus {
  enum type {
    NORMAL = 0,
    ALERT_DISABLED = 1,
    ALWAYS = 2
  };
};

extern const std::map<int, const char*> _OperationStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const OperationStatus::type& val);

std::string to_string(const OperationStatus::type& val);

struct ProfileAttribute {
  enum type {
    ALL = 0,
    EMAIL = 1,
    DISPLAY_NAME = 2,
    PHONETIC_NAME = 4,
    PICTURE = 8,
    STATUS_MESSAGE = 16,
    ALLOW_SEARCH_BY_USERID = 32,
    ALLOW_SEARCH_BY_EMAIL = 64,
    BUDDY_STATUS = 128,
    MUSIC_PROFILE = 256,
    AVATAR_PROFILE = 512
  };
};

extern const std::map<int, const char*> _ProfileAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ProfileAttribute::type& val);

std::string to_string(const ProfileAttribute::type& val);

struct Provider {
  enum type {
    GOOGLE = 0,
    BAIDU = 1,
    FOURSQUARE = 2
  };
};

extern const std::map<int, const char*> _Provider_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Provider::type& val);

std::string to_string(const Provider::type& val);

struct RelatedMessageServiceCode {
  enum type {
    UNKNOWN = 0,
    TALK = 1,
    SQUARE = 2
  };
};

extern const std::map<int, const char*> _RelatedMessageServiceCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const RelatedMessageServiceCode::type& val);

std::string to_string(const RelatedMessageServiceCode::type& val);

struct Relation {
  enum type {
    ONEWAY = 0,
    BOTH = 1,
    NOT_REGISTERED = 2
  };
};

extern const std::map<int, const char*> _Relation_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Relation::type& val);

std::string to_string(const Relation::type& val);

struct SyncReason {
  enum type {
    UNSPECIFIED = 0,
    UNKNOWN = 1,
    INITIALIZATION = 2,
    OPERATION = 3,
    FULL_SYNC = 4,
    AUTO_REPAIR = 5,
    MANUAL_REPAIR = 6,
    INTERNAL = 7
  };
};

extern const std::map<int, const char*> _SyncReason_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SyncReason::type& val);

std::string to_string(const SyncReason::type& val);

struct ThingsExceptionCode {
  enum type {
    INTERNAL_SERVER_ERROR = 0,
    UNAUTHORIZED = 1,
    INVALID_REQUEST = 2,
    INVALID_STATE = 3,
    DEVICE_LIMIT_EXCEEDED = 4096,
    UNSUPPORTED_REGION = 4097
  };
};

extern const std::map<int, const char*> _ThingsExceptionCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ThingsExceptionCode::type& val);

std::string to_string(const ThingsExceptionCode::type& val);

struct TalkExceptionCode {
  enum type {
    ILLEGAL_ARGUMENT = 0,
    AUTHENTICATION_FAILED = 1,
    DB_FAILED = 2,
    INVALID_STATE = 3,
    EXCESSIVE_ACCESS = 4,
    NOT_FOUND = 5,
    INVALID_LENGTH = 6,
    NOT_AVAILABLE_USER = 7,
    NOT_AUTHORIZED_DEVICE = 8,
    INVALID_MID = 9,
    NOT_A_MEMBER = 10,
    INCOMPATIBLE_APP_VERSION = 11,
    NOT_READY = 12,
    NOT_AVAILABLE_SESSION = 13,
    NOT_AUTHORIZED_SESSION = 14,
    SYSTEM_ERROR = 15,
    NO_AVAILABLE_VERIFICATION_METHOD = 16,
    NOT_AUTHENTICATED = 17,
    INVALID_IDENTITY_CREDENTIAL = 18,
    NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,
    INTERNAL_ERROR = 20,
    NO_SUCH_IDENTITY_IDENFIER = 21,
    DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,
    ILLEGAL_IDENTITY_CREDENTIAL = 23,
    UNKNOWN_CHANNEL = 24,
    NO_SUCH_MESSAGE_BOX = 25,
    NOT_AVAILABLE_MESSAGE_BOX = 26,
    CHANNEL_DOES_NOT_MATCH = 27,
    NOT_YOUR_MESSAGE = 28,
    MESSAGE_DEFINED_ERROR = 29,
    USER_CANNOT_ACCEPT_PRESENTS = 30,
    USER_NOT_STICKER_OWNER = 32,
    MAINTENANCE_ERROR = 33,
    ACCOUNT_NOT_MATCHED = 34,
    ABUSE_BLOCK = 35,
    NOT_FRIEND = 36,
    NOT_ALLOWED_CALL = 37,
    BLOCK_FRIEND = 38,
    INCOMPATIBLE_VOIP_VERSION = 39,
    INVALID_SNS_ACCESS_TOKEN = 40,
    EXTERNAL_SERVICE_NOT_AVAILABLE = 41,
    NOT_ALLOWED_ADD_CONTACT = 42,
    NOT_CERTIFICATED = 43,
    NOT_ALLOWED_SECONDARY_DEVICE = 44,
    INVALID_PIN_CODE = 45,
    NOT_FOUND_IDENTITY_CREDENTIAL = 46,
    EXCEED_FILE_MAX_SIZE = 47,
    EXCEED_DAILY_QUOTA = 48,
    NOT_SUPPORT_SEND_FILE = 49,
    MUST_UPGRADE = 50,
    NOT_AVAILABLE_PIN_CODE_SESSION = 51,
    EXPIRED_REVISION = 52,
    NOT_YET_PHONE_NUMBER = 54,
    BAD_CALL_NUMBER = 55,
    UNAVAILABLE_CALL_NUMBER = 56,
    NOT_SUPPORT_CALL_SERVICE = 57,
    CONGESTION_CONTROL = 58,
    NO_BALANCE = 59,
    NOT_PERMITTED_CALLER_ID = 60,
    NO_CALLER_ID_LIMIT_EXCEEDED = 61,
    CALLER_ID_VERIFICATION_REQUIRED = 62,
    NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63,
    MESSAGE_NOT_FOUND = 64,
    INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65,
    ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66,
    ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67,
    INVALID_PASSWORD_FORMAT = 69,
    FEATURE_RESTRICTED = 70,
    MESSAGE_NOT_DESTRUCTIBLE = 71,
    PAID_CALL_REDEEM_FAILED = 72,
    PREVENTED_JOIN_BY_TICKET = 73,
    SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75,
    SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76,
    SECURITY_CENTER_NOT_VERIFIED = 77,
    SECURITY_CENTER_BLOCKED_BY_SETTING = 78,
    SECURITY_CENTER_BLOCKED = 79,
    TALK_PROXY_EXCEPTION = 80,
    E2EE_INVALID_PROTOCOL = 81,
    E2EE_RETRY_ENCRYPT = 82,
    E2EE_UPDATE_SENDER_KEY = 83,
    E2EE_UPDATE_RECEIVER_KEY = 84,
    E2EE_INVALID_ARGUMENT = 85,
    E2EE_INVALID_VERSION = 86,
    E2EE_SENDER_DISABLED = 87,
    E2EE_RECEIVER_DISABLED = 88,
    E2EE_SENDER_NOT_ALLOWED = 89,
    E2EE_RECEIVER_NOT_ALLOWED = 90,
    E2EE_RESEND_FAIL = 91,
    E2EE_RESEND_OK = 92,
    HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93,
    E2EE_UPDATE_PRIMARY_DEVICE = 94,
    SUCCESS = 95,
    CANCEL = 96,
    E2EE_PRIMARY_NOT_SUPPORT = 97,
    E2EE_RETRY_PLAIN = 98,
    E2EE_RECREATE_GROUP_KEY = 99,
    E2EE_GROUP_TOO_MANY_MEMBERS = 100,
    SERVER_BUSY = 101,
    NOT_ALLOWED_ADD_FOLLOW = 102,
    INCOMING_FRIEND_REQUEST_LIMIT = 103,
    OUTGOING_FRIEND_REQUEST_LIMIT = 104,
    OUTGOING_FRIEND_REQUEST_QUOTA = 105,
    DUPLICATED = 106,
    BANNED = 107,
    NOT_AN_INVITEE = 108,
    NOT_AN_OUTSIDER = 109,
    EMPTY_GROUP = 111,
    EXCEED_FOLLOW_LIMIT = 112,
    UNSUPPORTED_ACCOUNT_TYPE = 113,
    AGREEMENT_REQUIRED = 114,
    SHOULD_RETRY = 115,
    OVER_MAX_CHATS_PER_USER = 116,
    NOT_AVAILABLE_API = 117,
    INVALID_OTP = 118
  };
};

extern const std::map<int, const char*> _TalkExceptionCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TalkExceptionCode::type& val);

std::string to_string(const TalkExceptionCode::type& val);

struct ToType {
  enum type {
    USER = 0,
    ROOM = 1,
    GROUP = 2,
    SQUARE = 3,
    SQUARE_CHAT = 4,
    SQUARE_MEMBER = 5,
    BOT = 6
  };
};

extern const std::map<int, const char*> _ToType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ToType::type& val);

std::string to_string(const ToType::type& val);

struct UpdatedAttribute {
  enum type {
    NAME = 1,
    PICTURE_STATUS = 2,
    PREVENTED_JOIN_BY_TICKET = 4,
    NOTIFICATION_SETTING = 8,
    INVITATION_TICKET = 16,
    FAVORITE_TIMESTAMP = 32,
    CHAT_TYPE = 64
  };
};

extern const std::map<int, const char*> _UpdatedAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const UpdatedAttribute::type& val);

std::string to_string(const UpdatedAttribute::type& val);

class AvatarProfile;

class Chat;

class AcceptChatInvitationRequest;

class AcceptChatInvitationResponse;

class AcceptChatInvitationByTicketRequest;

class AcceptChatInvitationByTicketResponse;

class CancelChatInvitationRequest;

class CancelChatInvitationResponse;

class CreateChatRequest;

class CreateChatResponse;

class Contact;

class DeleteSelfFromChatRequest;

class DeleteSelfFromChatResponse;

class DeleteOtherFromChatRequest;

class DeleteOtherFromChatResponse;

class Extra;

class FindChatByTicketRequest;

class FindChatByTicketResponse;

class FetchOperationsRequest;

class FetchOperationsResponse;

class GroupExtra;

class GetAllChatMidsRequest;

class GetAllChatMidsResponse;

class GetChatsRequest;

class GetChatsResponse;

class GeolocationAccuracy;

class InviteIntoChatRequest;

class InviteIntoChatResponse;

class Location;

class Message;

class Operation;

class Profile;

class PeerExtra;

class RejectChatInvitationRequest;

class RejectChatInvitationResponse;

class ReissueChatTicketRequest;

class ReissueChatTicketResponse;

class UpdateChatRequest;

class UpdateChatResponse;

class TalkException;

class ThingsException;

typedef struct _AvatarProfile__isset {
  _AvatarProfile__isset() : version(false), updatedMillis(false), thumbnail(false) {}
  bool version :1;
  bool updatedMillis :1;
  bool thumbnail :1;
} _AvatarProfile__isset;

class AvatarProfile : public virtual ::apache::thrift::TBase {
 public:

  AvatarProfile(const AvatarProfile&);
  AvatarProfile& operator=(const AvatarProfile&);
  AvatarProfile() : version(), updatedMillis(0), thumbnail() {
  }

  virtual ~AvatarProfile() noexcept;
  std::string version;
  int64_t updatedMillis;
  std::string thumbnail;

  _AvatarProfile__isset __isset;

  void __set_version(const std::string& val);

  void __set_updatedMillis(const int64_t val);

  void __set_thumbnail(const std::string& val);

  bool operator == (const AvatarProfile & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(updatedMillis == rhs.updatedMillis))
      return false;
    if (!(thumbnail == rhs.thumbnail))
      return false;
    return true;
  }
  bool operator != (const AvatarProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AvatarProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AvatarProfile &a, AvatarProfile &b);

std::ostream& operator<<(std::ostream& out, const AvatarProfile& obj);

typedef struct _Chat__isset {
  _Chat__isset() : type(false), chatMid(false), createdTime(false), notificationDisabled(false), favoriteTimestamp(false), chatName(false), picturePath(false), extra(false) {}
  bool type :1;
  bool chatMid :1;
  bool createdTime :1;
  bool notificationDisabled :1;
  bool favoriteTimestamp :1;
  bool chatName :1;
  bool picturePath :1;
  bool extra :1;
} _Chat__isset;

class Chat : public virtual ::apache::thrift::TBase {
 public:

  Chat(const Chat&);
  Chat& operator=(const Chat&);
  Chat() : type((ChatType::type)0), chatMid(), createdTime(0), notificationDisabled(0), favoriteTimestamp(0), chatName(), picturePath() {
  }

  virtual ~Chat() noexcept;
  ChatType::type type;
  std::string chatMid;
  int64_t createdTime;
  bool notificationDisabled;
  int64_t favoriteTimestamp;
  std::string chatName;
  std::string picturePath;
  Extra extra;

  _Chat__isset __isset;

  void __set_type(const ChatType::type val);

  void __set_chatMid(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_notificationDisabled(const bool val);

  void __set_favoriteTimestamp(const int64_t val);

  void __set_chatName(const std::string& val);

  void __set_picturePath(const std::string& val);

  void __set_extra(const Extra& val);

  bool operator == (const Chat & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(notificationDisabled == rhs.notificationDisabled))
      return false;
    if (!(favoriteTimestamp == rhs.favoriteTimestamp))
      return false;
    if (!(chatName == rhs.chatName))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(extra == rhs.extra))
      return false;
    return true;
  }
  bool operator != (const Chat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Chat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Chat &a, Chat &b);

std::ostream& operator<<(std::ostream& out, const Chat& obj);

typedef struct _AcceptChatInvitationRequest__isset {
  _AcceptChatInvitationRequest__isset() : reqSeq(false), chatMid(false) {}
  bool reqSeq :1;
  bool chatMid :1;
} _AcceptChatInvitationRequest__isset;

class AcceptChatInvitationRequest : public virtual ::apache::thrift::TBase {
 public:

  AcceptChatInvitationRequest(const AcceptChatInvitationRequest&);
  AcceptChatInvitationRequest& operator=(const AcceptChatInvitationRequest&);
  AcceptChatInvitationRequest() : reqSeq(0), chatMid() {
  }

  virtual ~AcceptChatInvitationRequest() noexcept;
  int32_t reqSeq;
  std::string chatMid;

  _AcceptChatInvitationRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chatMid(const std::string& val);

  bool operator == (const AcceptChatInvitationRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chatMid == rhs.chatMid))
      return false;
    return true;
  }
  bool operator != (const AcceptChatInvitationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AcceptChatInvitationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AcceptChatInvitationRequest &a, AcceptChatInvitationRequest &b);

std::ostream& operator<<(std::ostream& out, const AcceptChatInvitationRequest& obj);


class AcceptChatInvitationResponse : public virtual ::apache::thrift::TBase {
 public:

  AcceptChatInvitationResponse(const AcceptChatInvitationResponse&);
  AcceptChatInvitationResponse& operator=(const AcceptChatInvitationResponse&);
  AcceptChatInvitationResponse() {
  }

  virtual ~AcceptChatInvitationResponse() noexcept;

  bool operator == (const AcceptChatInvitationResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AcceptChatInvitationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AcceptChatInvitationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AcceptChatInvitationResponse &a, AcceptChatInvitationResponse &b);

std::ostream& operator<<(std::ostream& out, const AcceptChatInvitationResponse& obj);

typedef struct _AcceptChatInvitationByTicketRequest__isset {
  _AcceptChatInvitationByTicketRequest__isset() : reqSeq(false), chatMid(false), ticketId(false) {}
  bool reqSeq :1;
  bool chatMid :1;
  bool ticketId :1;
} _AcceptChatInvitationByTicketRequest__isset;

class AcceptChatInvitationByTicketRequest : public virtual ::apache::thrift::TBase {
 public:

  AcceptChatInvitationByTicketRequest(const AcceptChatInvitationByTicketRequest&);
  AcceptChatInvitationByTicketRequest& operator=(const AcceptChatInvitationByTicketRequest&);
  AcceptChatInvitationByTicketRequest() : reqSeq(0), chatMid(), ticketId() {
  }

  virtual ~AcceptChatInvitationByTicketRequest() noexcept;
  int32_t reqSeq;
  std::string chatMid;
  std::string ticketId;

  _AcceptChatInvitationByTicketRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chatMid(const std::string& val);

  void __set_ticketId(const std::string& val);

  bool operator == (const AcceptChatInvitationByTicketRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(ticketId == rhs.ticketId))
      return false;
    return true;
  }
  bool operator != (const AcceptChatInvitationByTicketRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AcceptChatInvitationByTicketRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AcceptChatInvitationByTicketRequest &a, AcceptChatInvitationByTicketRequest &b);

std::ostream& operator<<(std::ostream& out, const AcceptChatInvitationByTicketRequest& obj);


class AcceptChatInvitationByTicketResponse : public virtual ::apache::thrift::TBase {
 public:

  AcceptChatInvitationByTicketResponse(const AcceptChatInvitationByTicketResponse&);
  AcceptChatInvitationByTicketResponse& operator=(const AcceptChatInvitationByTicketResponse&);
  AcceptChatInvitationByTicketResponse() {
  }

  virtual ~AcceptChatInvitationByTicketResponse() noexcept;

  bool operator == (const AcceptChatInvitationByTicketResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AcceptChatInvitationByTicketResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AcceptChatInvitationByTicketResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AcceptChatInvitationByTicketResponse &a, AcceptChatInvitationByTicketResponse &b);

std::ostream& operator<<(std::ostream& out, const AcceptChatInvitationByTicketResponse& obj);

typedef struct _CancelChatInvitationRequest__isset {
  _CancelChatInvitationRequest__isset() : reqSeq(false), chatMid(false), targetUserMids(false) {}
  bool reqSeq :1;
  bool chatMid :1;
  bool targetUserMids :1;
} _CancelChatInvitationRequest__isset;

class CancelChatInvitationRequest : public virtual ::apache::thrift::TBase {
 public:

  CancelChatInvitationRequest(const CancelChatInvitationRequest&);
  CancelChatInvitationRequest& operator=(const CancelChatInvitationRequest&);
  CancelChatInvitationRequest() : reqSeq(0), chatMid() {
  }

  virtual ~CancelChatInvitationRequest() noexcept;
  int32_t reqSeq;
  std::string chatMid;
  std::set<std::string>  targetUserMids;

  _CancelChatInvitationRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chatMid(const std::string& val);

  void __set_targetUserMids(const std::set<std::string> & val);

  bool operator == (const CancelChatInvitationRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(targetUserMids == rhs.targetUserMids))
      return false;
    return true;
  }
  bool operator != (const CancelChatInvitationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CancelChatInvitationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CancelChatInvitationRequest &a, CancelChatInvitationRequest &b);

std::ostream& operator<<(std::ostream& out, const CancelChatInvitationRequest& obj);


class CancelChatInvitationResponse : public virtual ::apache::thrift::TBase {
 public:

  CancelChatInvitationResponse(const CancelChatInvitationResponse&);
  CancelChatInvitationResponse& operator=(const CancelChatInvitationResponse&);
  CancelChatInvitationResponse() {
  }

  virtual ~CancelChatInvitationResponse() noexcept;

  bool operator == (const CancelChatInvitationResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CancelChatInvitationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CancelChatInvitationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CancelChatInvitationResponse &a, CancelChatInvitationResponse &b);

std::ostream& operator<<(std::ostream& out, const CancelChatInvitationResponse& obj);

typedef struct _CreateChatRequest__isset {
  _CreateChatRequest__isset() : reqSeq(false), type(false), name(false), targetUserMids(false), picturePath(false) {}
  bool reqSeq :1;
  bool type :1;
  bool name :1;
  bool targetUserMids :1;
  bool picturePath :1;
} _CreateChatRequest__isset;

class CreateChatRequest : public virtual ::apache::thrift::TBase {
 public:

  CreateChatRequest(const CreateChatRequest&);
  CreateChatRequest& operator=(const CreateChatRequest&);
  CreateChatRequest() : reqSeq(0), type((ChatType::type)0), name(), picturePath() {
  }

  virtual ~CreateChatRequest() noexcept;
  int32_t reqSeq;
  ChatType::type type;
  std::string name;
  std::set<std::string>  targetUserMids;
  std::string picturePath;

  _CreateChatRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_type(const ChatType::type val);

  void __set_name(const std::string& val);

  void __set_targetUserMids(const std::set<std::string> & val);

  void __set_picturePath(const std::string& val);

  bool operator == (const CreateChatRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(targetUserMids == rhs.targetUserMids))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    return true;
  }
  bool operator != (const CreateChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateChatRequest &a, CreateChatRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateChatRequest& obj);

typedef struct _CreateChatResponse__isset {
  _CreateChatResponse__isset() : chat(false) {}
  bool chat :1;
} _CreateChatResponse__isset;

class CreateChatResponse : public virtual ::apache::thrift::TBase {
 public:

  CreateChatResponse(const CreateChatResponse&);
  CreateChatResponse& operator=(const CreateChatResponse&);
  CreateChatResponse() {
  }

  virtual ~CreateChatResponse() noexcept;
  Chat chat;

  _CreateChatResponse__isset __isset;

  void __set_chat(const Chat& val);

  bool operator == (const CreateChatResponse & rhs) const
  {
    if (!(chat == rhs.chat))
      return false;
    return true;
  }
  bool operator != (const CreateChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateChatResponse &a, CreateChatResponse &b);

std::ostream& operator<<(std::ostream& out, const CreateChatResponse& obj);

typedef struct _Contact__isset {
  _Contact__isset() : mid(false), createdTime(false), type(false), status(false), relation(false), displayName(false), phoneticName(false), pictureStatus(false), thumbnailUrl(false), statusMessage(false), displayNameOverridden(false), favoriteTime(false), capableVoiceCall(false), capableVideoCall(false), capableMyhome(false), capableBuddy(false), attributes(false), settings(false), picturePath(false), recommendParams(false), friendRequestStatus(false), musicProfile(false), videoProfile(false), statusMessageContentMetadata(false), avatarProfile(false) {}
  bool mid :1;
  bool createdTime :1;
  bool type :1;
  bool status :1;
  bool relation :1;
  bool displayName :1;
  bool phoneticName :1;
  bool pictureStatus :1;
  bool thumbnailUrl :1;
  bool statusMessage :1;
  bool displayNameOverridden :1;
  bool favoriteTime :1;
  bool capableVoiceCall :1;
  bool capableVideoCall :1;
  bool capableMyhome :1;
  bool capableBuddy :1;
  bool attributes :1;
  bool settings :1;
  bool picturePath :1;
  bool recommendParams :1;
  bool friendRequestStatus :1;
  bool musicProfile :1;
  bool videoProfile :1;
  bool statusMessageContentMetadata :1;
  bool avatarProfile :1;
} _Contact__isset;

class Contact : public virtual ::apache::thrift::TBase {
 public:

  Contact(const Contact&);
  Contact& operator=(const Contact&);
  Contact() : mid(), createdTime(0), type((ContactType::type)0), status((ContactStatus::type)0), relation((Relation::type)0), displayName(), phoneticName(), pictureStatus(), thumbnailUrl(), statusMessage(), displayNameOverridden(), favoriteTime(0), capableVoiceCall(0), capableVideoCall(0), capableMyhome(0), capableBuddy(0), attributes(0), settings(0), picturePath(), recommendParams(), friendRequestStatus((FriendRequestStatus::type)0), musicProfile(), videoProfile() {
  }

  virtual ~Contact() noexcept;
  std::string mid;
  int64_t createdTime;
  ContactType::type type;
  ContactStatus::type status;
  Relation::type relation;
  std::string displayName;
  std::string phoneticName;
  std::string pictureStatus;
  std::string thumbnailUrl;
  std::string statusMessage;
  std::string displayNameOverridden;
  int64_t favoriteTime;
  bool capableVoiceCall;
  bool capableVideoCall;
  bool capableMyhome;
  bool capableBuddy;
  int32_t attributes;
  int64_t settings;
  std::string picturePath;
  std::string recommendParams;
  FriendRequestStatus::type friendRequestStatus;
  std::string musicProfile;
  std::string videoProfile;
  std::map<std::string, std::string>  statusMessageContentMetadata;
  AvatarProfile avatarProfile;

  _Contact__isset __isset;

  void __set_mid(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_type(const ContactType::type val);

  void __set_status(const ContactStatus::type val);

  void __set_relation(const Relation::type val);

  void __set_displayName(const std::string& val);

  void __set_phoneticName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_displayNameOverridden(const std::string& val);

  void __set_favoriteTime(const int64_t val);

  void __set_capableVoiceCall(const bool val);

  void __set_capableVideoCall(const bool val);

  void __set_capableMyhome(const bool val);

  void __set_capableBuddy(const bool val);

  void __set_attributes(const int32_t val);

  void __set_settings(const int64_t val);

  void __set_picturePath(const std::string& val);

  void __set_recommendParams(const std::string& val);

  void __set_friendRequestStatus(const FriendRequestStatus::type val);

  void __set_musicProfile(const std::string& val);

  void __set_videoProfile(const std::string& val);

  void __set_statusMessageContentMetadata(const std::map<std::string, std::string> & val);

  void __set_avatarProfile(const AvatarProfile& val);

  bool operator == (const Contact & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(relation == rhs.relation))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(phoneticName == rhs.phoneticName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(displayNameOverridden == rhs.displayNameOverridden))
      return false;
    if (!(favoriteTime == rhs.favoriteTime))
      return false;
    if (!(capableVoiceCall == rhs.capableVoiceCall))
      return false;
    if (!(capableVideoCall == rhs.capableVideoCall))
      return false;
    if (!(capableMyhome == rhs.capableMyhome))
      return false;
    if (!(capableBuddy == rhs.capableBuddy))
      return false;
    if (!(attributes == rhs.attributes))
      return false;
    if (!(settings == rhs.settings))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(recommendParams == rhs.recommendParams))
      return false;
    if (!(friendRequestStatus == rhs.friendRequestStatus))
      return false;
    if (!(musicProfile == rhs.musicProfile))
      return false;
    if (!(videoProfile == rhs.videoProfile))
      return false;
    if (!(statusMessageContentMetadata == rhs.statusMessageContentMetadata))
      return false;
    if (!(avatarProfile == rhs.avatarProfile))
      return false;
    return true;
  }
  bool operator != (const Contact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Contact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Contact &a, Contact &b);

std::ostream& operator<<(std::ostream& out, const Contact& obj);

typedef struct _DeleteSelfFromChatRequest__isset {
  _DeleteSelfFromChatRequest__isset() : reqSeq(false), chatMid(false), lastSeenMessageDeliveredTime(false), lastSeenMessageId(false), lastMessageDeliveredTime(false), lastMessageId(false) {}
  bool reqSeq :1;
  bool chatMid :1;
  bool lastSeenMessageDeliveredTime :1;
  bool lastSeenMessageId :1;
  bool lastMessageDeliveredTime :1;
  bool lastMessageId :1;
} _DeleteSelfFromChatRequest__isset;

class DeleteSelfFromChatRequest : public virtual ::apache::thrift::TBase {
 public:

  DeleteSelfFromChatRequest(const DeleteSelfFromChatRequest&);
  DeleteSelfFromChatRequest& operator=(const DeleteSelfFromChatRequest&);
  DeleteSelfFromChatRequest() : reqSeq(0), chatMid(), lastSeenMessageDeliveredTime(0), lastSeenMessageId(), lastMessageDeliveredTime(0), lastMessageId() {
  }

  virtual ~DeleteSelfFromChatRequest() noexcept;
  int32_t reqSeq;
  std::string chatMid;
  int64_t lastSeenMessageDeliveredTime;
  std::string lastSeenMessageId;
  int64_t lastMessageDeliveredTime;
  std::string lastMessageId;

  _DeleteSelfFromChatRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chatMid(const std::string& val);

  void __set_lastSeenMessageDeliveredTime(const int64_t val);

  void __set_lastSeenMessageId(const std::string& val);

  void __set_lastMessageDeliveredTime(const int64_t val);

  void __set_lastMessageId(const std::string& val);

  bool operator == (const DeleteSelfFromChatRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(lastSeenMessageDeliveredTime == rhs.lastSeenMessageDeliveredTime))
      return false;
    if (!(lastSeenMessageId == rhs.lastSeenMessageId))
      return false;
    if (!(lastMessageDeliveredTime == rhs.lastMessageDeliveredTime))
      return false;
    if (!(lastMessageId == rhs.lastMessageId))
      return false;
    return true;
  }
  bool operator != (const DeleteSelfFromChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteSelfFromChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteSelfFromChatRequest &a, DeleteSelfFromChatRequest &b);

std::ostream& operator<<(std::ostream& out, const DeleteSelfFromChatRequest& obj);


class DeleteSelfFromChatResponse : public virtual ::apache::thrift::TBase {
 public:

  DeleteSelfFromChatResponse(const DeleteSelfFromChatResponse&);
  DeleteSelfFromChatResponse& operator=(const DeleteSelfFromChatResponse&);
  DeleteSelfFromChatResponse() {
  }

  virtual ~DeleteSelfFromChatResponse() noexcept;

  bool operator == (const DeleteSelfFromChatResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeleteSelfFromChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteSelfFromChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteSelfFromChatResponse &a, DeleteSelfFromChatResponse &b);

std::ostream& operator<<(std::ostream& out, const DeleteSelfFromChatResponse& obj);

typedef struct _DeleteOtherFromChatRequest__isset {
  _DeleteOtherFromChatRequest__isset() : reqSeq(false), chatMid(false), targetUserMids(false) {}
  bool reqSeq :1;
  bool chatMid :1;
  bool targetUserMids :1;
} _DeleteOtherFromChatRequest__isset;

class DeleteOtherFromChatRequest : public virtual ::apache::thrift::TBase {
 public:

  DeleteOtherFromChatRequest(const DeleteOtherFromChatRequest&);
  DeleteOtherFromChatRequest& operator=(const DeleteOtherFromChatRequest&);
  DeleteOtherFromChatRequest() : reqSeq(0), chatMid() {
  }

  virtual ~DeleteOtherFromChatRequest() noexcept;
  int32_t reqSeq;
  std::string chatMid;
  std::set<std::string>  targetUserMids;

  _DeleteOtherFromChatRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chatMid(const std::string& val);

  void __set_targetUserMids(const std::set<std::string> & val);

  bool operator == (const DeleteOtherFromChatRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(targetUserMids == rhs.targetUserMids))
      return false;
    return true;
  }
  bool operator != (const DeleteOtherFromChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteOtherFromChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteOtherFromChatRequest &a, DeleteOtherFromChatRequest &b);

std::ostream& operator<<(std::ostream& out, const DeleteOtherFromChatRequest& obj);


class DeleteOtherFromChatResponse : public virtual ::apache::thrift::TBase {
 public:

  DeleteOtherFromChatResponse(const DeleteOtherFromChatResponse&);
  DeleteOtherFromChatResponse& operator=(const DeleteOtherFromChatResponse&);
  DeleteOtherFromChatResponse() {
  }

  virtual ~DeleteOtherFromChatResponse() noexcept;

  bool operator == (const DeleteOtherFromChatResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeleteOtherFromChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteOtherFromChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteOtherFromChatResponse &a, DeleteOtherFromChatResponse &b);

std::ostream& operator<<(std::ostream& out, const DeleteOtherFromChatResponse& obj);

typedef struct _Extra__isset {
  _Extra__isset() : groupExtra(false), peerExtra(false) {}
  bool groupExtra :1;
  bool peerExtra :1;
} _Extra__isset;

class Extra : public virtual ::apache::thrift::TBase {
 public:

  Extra(const Extra&);
  Extra& operator=(const Extra&);
  Extra() {
  }

  virtual ~Extra() noexcept;
  GroupExtra groupExtra;
  PeerExtra peerExtra;

  _Extra__isset __isset;

  void __set_groupExtra(const GroupExtra& val);

  void __set_peerExtra(const PeerExtra& val);

  bool operator == (const Extra & rhs) const
  {
    if (!(groupExtra == rhs.groupExtra))
      return false;
    if (!(peerExtra == rhs.peerExtra))
      return false;
    return true;
  }
  bool operator != (const Extra &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Extra & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Extra &a, Extra &b);

std::ostream& operator<<(std::ostream& out, const Extra& obj);

typedef struct _FindChatByTicketRequest__isset {
  _FindChatByTicketRequest__isset() : ticketId(false) {}
  bool ticketId :1;
} _FindChatByTicketRequest__isset;

class FindChatByTicketRequest : public virtual ::apache::thrift::TBase {
 public:

  FindChatByTicketRequest(const FindChatByTicketRequest&);
  FindChatByTicketRequest& operator=(const FindChatByTicketRequest&);
  FindChatByTicketRequest() : ticketId() {
  }

  virtual ~FindChatByTicketRequest() noexcept;
  std::string ticketId;

  _FindChatByTicketRequest__isset __isset;

  void __set_ticketId(const std::string& val);

  bool operator == (const FindChatByTicketRequest & rhs) const
  {
    if (!(ticketId == rhs.ticketId))
      return false;
    return true;
  }
  bool operator != (const FindChatByTicketRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FindChatByTicketRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FindChatByTicketRequest &a, FindChatByTicketRequest &b);

std::ostream& operator<<(std::ostream& out, const FindChatByTicketRequest& obj);

typedef struct _FindChatByTicketResponse__isset {
  _FindChatByTicketResponse__isset() : chat(false) {}
  bool chat :1;
} _FindChatByTicketResponse__isset;

class FindChatByTicketResponse : public virtual ::apache::thrift::TBase {
 public:

  FindChatByTicketResponse(const FindChatByTicketResponse&);
  FindChatByTicketResponse& operator=(const FindChatByTicketResponse&);
  FindChatByTicketResponse() {
  }

  virtual ~FindChatByTicketResponse() noexcept;
  Chat chat;

  _FindChatByTicketResponse__isset __isset;

  void __set_chat(const Chat& val);

  bool operator == (const FindChatByTicketResponse & rhs) const
  {
    if (!(chat == rhs.chat))
      return false;
    return true;
  }
  bool operator != (const FindChatByTicketResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FindChatByTicketResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FindChatByTicketResponse &a, FindChatByTicketResponse &b);

std::ostream& operator<<(std::ostream& out, const FindChatByTicketResponse& obj);

typedef struct _FetchOperationsRequest__isset {
  _FetchOperationsRequest__isset() : deviceId(false), offsetFrom(false) {}
  bool deviceId :1;
  bool offsetFrom :1;
} _FetchOperationsRequest__isset;

class FetchOperationsRequest : public virtual ::apache::thrift::TBase {
 public:

  FetchOperationsRequest(const FetchOperationsRequest&);
  FetchOperationsRequest& operator=(const FetchOperationsRequest&);
  FetchOperationsRequest() : deviceId(), offsetFrom(0) {
  }

  virtual ~FetchOperationsRequest() noexcept;
  std::string deviceId;
  int64_t offsetFrom;

  _FetchOperationsRequest__isset __isset;

  void __set_deviceId(const std::string& val);

  void __set_offsetFrom(const int64_t val);

  bool operator == (const FetchOperationsRequest & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(offsetFrom == rhs.offsetFrom))
      return false;
    return true;
  }
  bool operator != (const FetchOperationsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchOperationsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FetchOperationsRequest &a, FetchOperationsRequest &b);

std::ostream& operator<<(std::ostream& out, const FetchOperationsRequest& obj);

typedef struct _FetchOperationsResponse__isset {
  _FetchOperationsResponse__isset() : operations(false), hasNext(false) {}
  bool operations :1;
  bool hasNext :1;
} _FetchOperationsResponse__isset;

class FetchOperationsResponse : public virtual ::apache::thrift::TBase {
 public:

  FetchOperationsResponse(const FetchOperationsResponse&);
  FetchOperationsResponse& operator=(const FetchOperationsResponse&);
  FetchOperationsResponse() : hasNext(0) {
  }

  virtual ~FetchOperationsResponse() noexcept;
  std::vector<Operation>  operations;
  bool hasNext;

  _FetchOperationsResponse__isset __isset;

  void __set_operations(const std::vector<Operation> & val);

  void __set_hasNext(const bool val);

  bool operator == (const FetchOperationsResponse & rhs) const
  {
    if (!(operations == rhs.operations))
      return false;
    if (!(hasNext == rhs.hasNext))
      return false;
    return true;
  }
  bool operator != (const FetchOperationsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchOperationsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FetchOperationsResponse &a, FetchOperationsResponse &b);

std::ostream& operator<<(std::ostream& out, const FetchOperationsResponse& obj);

typedef struct _GroupExtra__isset {
  _GroupExtra__isset() : creator(false), preventedJoinByTicket(false), invitationTicket(false), memberMids(false), inviteeMids(false) {}
  bool creator :1;
  bool preventedJoinByTicket :1;
  bool invitationTicket :1;
  bool memberMids :1;
  bool inviteeMids :1;
} _GroupExtra__isset;

class GroupExtra : public virtual ::apache::thrift::TBase {
 public:

  GroupExtra(const GroupExtra&);
  GroupExtra& operator=(const GroupExtra&);
  GroupExtra() : creator(), preventedJoinByTicket(0), invitationTicket() {
  }

  virtual ~GroupExtra() noexcept;
  std::string creator;
  bool preventedJoinByTicket;
  std::string invitationTicket;
  std::map<std::string, int64_t>  memberMids;
  std::map<std::string, int64_t>  inviteeMids;

  _GroupExtra__isset __isset;

  void __set_creator(const std::string& val);

  void __set_preventedJoinByTicket(const bool val);

  void __set_invitationTicket(const std::string& val);

  void __set_memberMids(const std::map<std::string, int64_t> & val);

  void __set_inviteeMids(const std::map<std::string, int64_t> & val);

  bool operator == (const GroupExtra & rhs) const
  {
    if (!(creator == rhs.creator))
      return false;
    if (!(preventedJoinByTicket == rhs.preventedJoinByTicket))
      return false;
    if (!(invitationTicket == rhs.invitationTicket))
      return false;
    if (!(memberMids == rhs.memberMids))
      return false;
    if (!(inviteeMids == rhs.inviteeMids))
      return false;
    return true;
  }
  bool operator != (const GroupExtra &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupExtra & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GroupExtra &a, GroupExtra &b);

std::ostream& operator<<(std::ostream& out, const GroupExtra& obj);

typedef struct _GetAllChatMidsRequest__isset {
  _GetAllChatMidsRequest__isset() : withMemberChats(false), withInvitedChats(false) {}
  bool withMemberChats :1;
  bool withInvitedChats :1;
} _GetAllChatMidsRequest__isset;

class GetAllChatMidsRequest : public virtual ::apache::thrift::TBase {
 public:

  GetAllChatMidsRequest(const GetAllChatMidsRequest&);
  GetAllChatMidsRequest& operator=(const GetAllChatMidsRequest&);
  GetAllChatMidsRequest() : withMemberChats(0), withInvitedChats(0) {
  }

  virtual ~GetAllChatMidsRequest() noexcept;
  bool withMemberChats;
  bool withInvitedChats;

  _GetAllChatMidsRequest__isset __isset;

  void __set_withMemberChats(const bool val);

  void __set_withInvitedChats(const bool val);

  bool operator == (const GetAllChatMidsRequest & rhs) const
  {
    if (!(withMemberChats == rhs.withMemberChats))
      return false;
    if (!(withInvitedChats == rhs.withInvitedChats))
      return false;
    return true;
  }
  bool operator != (const GetAllChatMidsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetAllChatMidsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetAllChatMidsRequest &a, GetAllChatMidsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetAllChatMidsRequest& obj);

typedef struct _GetAllChatMidsResponse__isset {
  _GetAllChatMidsResponse__isset() : memberChatMids(false), invitedChatMids(false) {}
  bool memberChatMids :1;
  bool invitedChatMids :1;
} _GetAllChatMidsResponse__isset;

class GetAllChatMidsResponse : public virtual ::apache::thrift::TBase {
 public:

  GetAllChatMidsResponse(const GetAllChatMidsResponse&);
  GetAllChatMidsResponse& operator=(const GetAllChatMidsResponse&);
  GetAllChatMidsResponse() {
  }

  virtual ~GetAllChatMidsResponse() noexcept;
  std::set<std::string>  memberChatMids;
  std::set<std::string>  invitedChatMids;

  _GetAllChatMidsResponse__isset __isset;

  void __set_memberChatMids(const std::set<std::string> & val);

  void __set_invitedChatMids(const std::set<std::string> & val);

  bool operator == (const GetAllChatMidsResponse & rhs) const
  {
    if (!(memberChatMids == rhs.memberChatMids))
      return false;
    if (!(invitedChatMids == rhs.invitedChatMids))
      return false;
    return true;
  }
  bool operator != (const GetAllChatMidsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetAllChatMidsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetAllChatMidsResponse &a, GetAllChatMidsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetAllChatMidsResponse& obj);

typedef struct _GetChatsRequest__isset {
  _GetChatsRequest__isset() : chatMids(false), withMembers(false), withInvitees(false) {}
  bool chatMids :1;
  bool withMembers :1;
  bool withInvitees :1;
} _GetChatsRequest__isset;

class GetChatsRequest : public virtual ::apache::thrift::TBase {
 public:

  GetChatsRequest(const GetChatsRequest&);
  GetChatsRequest& operator=(const GetChatsRequest&);
  GetChatsRequest() : withMembers(0), withInvitees(0) {
  }

  virtual ~GetChatsRequest() noexcept;
  std::vector<std::string>  chatMids;
  bool withMembers;
  bool withInvitees;

  _GetChatsRequest__isset __isset;

  void __set_chatMids(const std::vector<std::string> & val);

  void __set_withMembers(const bool val);

  void __set_withInvitees(const bool val);

  bool operator == (const GetChatsRequest & rhs) const
  {
    if (!(chatMids == rhs.chatMids))
      return false;
    if (!(withMembers == rhs.withMembers))
      return false;
    if (!(withInvitees == rhs.withInvitees))
      return false;
    return true;
  }
  bool operator != (const GetChatsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetChatsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetChatsRequest &a, GetChatsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetChatsRequest& obj);

typedef struct _GetChatsResponse__isset {
  _GetChatsResponse__isset() : chats(false) {}
  bool chats :1;
} _GetChatsResponse__isset;

class GetChatsResponse : public virtual ::apache::thrift::TBase {
 public:

  GetChatsResponse(const GetChatsResponse&);
  GetChatsResponse& operator=(const GetChatsResponse&);
  GetChatsResponse() {
  }

  virtual ~GetChatsResponse() noexcept;
  std::vector<Chat>  chats;

  _GetChatsResponse__isset __isset;

  void __set_chats(const std::vector<Chat> & val);

  bool operator == (const GetChatsResponse & rhs) const
  {
    if (!(chats == rhs.chats))
      return false;
    return true;
  }
  bool operator != (const GetChatsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetChatsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetChatsResponse &a, GetChatsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetChatsResponse& obj);

typedef struct _GeolocationAccuracy__isset {
  _GeolocationAccuracy__isset() : radiusMeters(false), radiusConfidence(false), altitudeAccuracy(false), velocityAccuracy(false), bearingAccuracy(false), accuracyMode(false) {}
  bool radiusMeters :1;
  bool radiusConfidence :1;
  bool altitudeAccuracy :1;
  bool velocityAccuracy :1;
  bool bearingAccuracy :1;
  bool accuracyMode :1;
} _GeolocationAccuracy__isset;

class GeolocationAccuracy : public virtual ::apache::thrift::TBase {
 public:

  GeolocationAccuracy(const GeolocationAccuracy&);
  GeolocationAccuracy& operator=(const GeolocationAccuracy&);
  GeolocationAccuracy() : radiusMeters(0), radiusConfidence(0), altitudeAccuracy(0), velocityAccuracy(0), bearingAccuracy(0), accuracyMode((AccuracyMode::type)0) {
  }

  virtual ~GeolocationAccuracy() noexcept;
  double radiusMeters;
  double radiusConfidence;
  double altitudeAccuracy;
  double velocityAccuracy;
  double bearingAccuracy;
  AccuracyMode::type accuracyMode;

  _GeolocationAccuracy__isset __isset;

  void __set_radiusMeters(const double val);

  void __set_radiusConfidence(const double val);

  void __set_altitudeAccuracy(const double val);

  void __set_velocityAccuracy(const double val);

  void __set_bearingAccuracy(const double val);

  void __set_accuracyMode(const AccuracyMode::type val);

  bool operator == (const GeolocationAccuracy & rhs) const
  {
    if (!(radiusMeters == rhs.radiusMeters))
      return false;
    if (!(radiusConfidence == rhs.radiusConfidence))
      return false;
    if (!(altitudeAccuracy == rhs.altitudeAccuracy))
      return false;
    if (!(velocityAccuracy == rhs.velocityAccuracy))
      return false;
    if (!(bearingAccuracy == rhs.bearingAccuracy))
      return false;
    if (!(accuracyMode == rhs.accuracyMode))
      return false;
    return true;
  }
  bool operator != (const GeolocationAccuracy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GeolocationAccuracy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GeolocationAccuracy &a, GeolocationAccuracy &b);

std::ostream& operator<<(std::ostream& out, const GeolocationAccuracy& obj);

typedef struct _InviteIntoChatRequest__isset {
  _InviteIntoChatRequest__isset() : reqSeq(false), chatMid(false), targetUserMids(false) {}
  bool reqSeq :1;
  bool chatMid :1;
  bool targetUserMids :1;
} _InviteIntoChatRequest__isset;

class InviteIntoChatRequest : public virtual ::apache::thrift::TBase {
 public:

  InviteIntoChatRequest(const InviteIntoChatRequest&);
  InviteIntoChatRequest& operator=(const InviteIntoChatRequest&);
  InviteIntoChatRequest() : reqSeq(0), chatMid() {
  }

  virtual ~InviteIntoChatRequest() noexcept;
  int32_t reqSeq;
  std::string chatMid;
  std::set<std::string>  targetUserMids;

  _InviteIntoChatRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chatMid(const std::string& val);

  void __set_targetUserMids(const std::set<std::string> & val);

  bool operator == (const InviteIntoChatRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(targetUserMids == rhs.targetUserMids))
      return false;
    return true;
  }
  bool operator != (const InviteIntoChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InviteIntoChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InviteIntoChatRequest &a, InviteIntoChatRequest &b);

std::ostream& operator<<(std::ostream& out, const InviteIntoChatRequest& obj);


class InviteIntoChatResponse : public virtual ::apache::thrift::TBase {
 public:

  InviteIntoChatResponse(const InviteIntoChatResponse&);
  InviteIntoChatResponse& operator=(const InviteIntoChatResponse&);
  InviteIntoChatResponse() {
  }

  virtual ~InviteIntoChatResponse() noexcept;

  bool operator == (const InviteIntoChatResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InviteIntoChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InviteIntoChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InviteIntoChatResponse &a, InviteIntoChatResponse &b);

std::ostream& operator<<(std::ostream& out, const InviteIntoChatResponse& obj);

typedef struct _Location__isset {
  _Location__isset() : title(false), address(false), latitude(false), longitude(false), phone(false), categoryId(false), provider(false), accuracy(false), altitudeMeters(false) {}
  bool title :1;
  bool address :1;
  bool latitude :1;
  bool longitude :1;
  bool phone :1;
  bool categoryId :1;
  bool provider :1;
  bool accuracy :1;
  bool altitudeMeters :1;
} _Location__isset;

class Location : public virtual ::apache::thrift::TBase {
 public:

  Location(const Location&);
  Location& operator=(const Location&);
  Location() : title(), address(), latitude(0), longitude(0), phone(), categoryId(), provider((Provider::type)0), altitudeMeters(0) {
  }

  virtual ~Location() noexcept;
  std::string title;
  std::string address;
  double latitude;
  double longitude;
  std::string phone;
  std::string categoryId;
  Provider::type provider;
  GeolocationAccuracy accuracy;
  double altitudeMeters;

  _Location__isset __isset;

  void __set_title(const std::string& val);

  void __set_address(const std::string& val);

  void __set_latitude(const double val);

  void __set_longitude(const double val);

  void __set_phone(const std::string& val);

  void __set_categoryId(const std::string& val);

  void __set_provider(const Provider::type val);

  void __set_accuracy(const GeolocationAccuracy& val);

  void __set_altitudeMeters(const double val);

  bool operator == (const Location & rhs) const
  {
    if (!(title == rhs.title))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(categoryId == rhs.categoryId))
      return false;
    if (!(provider == rhs.provider))
      return false;
    if (!(accuracy == rhs.accuracy))
      return false;
    if (!(altitudeMeters == rhs.altitudeMeters))
      return false;
    return true;
  }
  bool operator != (const Location &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Location & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Location &a, Location &b);

std::ostream& operator<<(std::ostream& out, const Location& obj);

typedef struct _Message__isset {
  _Message__isset() : _from(false), to(false), toType(false), id(false), createdTime(false), deliveredTime(false), text(false), location(false), hasContent(false), contentType(false), contentMetadata(false), contentPreview(false), sessionId(false), chunks(false), relatedMessageId(false), messageRelationType(false), readCount(false), relatedMessageServiceCode(false), appExtensionType(false) {}
  bool _from :1;
  bool to :1;
  bool toType :1;
  bool id :1;
  bool createdTime :1;
  bool deliveredTime :1;
  bool text :1;
  bool location :1;
  bool hasContent :1;
  bool contentType :1;
  bool contentMetadata :1;
  bool contentPreview :1;
  bool sessionId :1;
  bool chunks :1;
  bool relatedMessageId :1;
  bool messageRelationType :1;
  bool readCount :1;
  bool relatedMessageServiceCode :1;
  bool appExtensionType :1;
} _Message__isset;

class Message : public virtual ::apache::thrift::TBase {
 public:

  Message(const Message&);
  Message& operator=(const Message&);
  Message() : _from(), to(), toType((ToType::type)0), id(), createdTime(0), deliveredTime(0), text(), hasContent(0), contentType((ContentType::type)0), contentPreview(), sessionId(0), relatedMessageId(), messageRelationType((MessageRelationType::type)0), readCount(0), relatedMessageServiceCode((RelatedMessageServiceCode::type)0), appExtensionType((AppExtensionType::type)0) {
  }

  virtual ~Message() noexcept;
  std::string _from;
  std::string to;
  ToType::type toType;
  std::string id;
  int64_t createdTime;
  int64_t deliveredTime;
  std::string text;
  Location location;
  bool hasContent;
  ContentType::type contentType;
  std::map<std::string, std::string>  contentMetadata;
  std::string contentPreview;
  int64_t sessionId;
  std::vector<std::string>  chunks;
  std::string relatedMessageId;
  MessageRelationType::type messageRelationType;
  int32_t readCount;
  RelatedMessageServiceCode::type relatedMessageServiceCode;
  AppExtensionType::type appExtensionType;

  _Message__isset __isset;

  void __set__from(const std::string& val);

  void __set_to(const std::string& val);

  void __set_toType(const ToType::type val);

  void __set_id(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_deliveredTime(const int64_t val);

  void __set_text(const std::string& val);

  void __set_location(const Location& val);

  void __set_hasContent(const bool val);

  void __set_contentType(const ContentType::type val);

  void __set_contentMetadata(const std::map<std::string, std::string> & val);

  void __set_contentPreview(const std::string& val);

  void __set_sessionId(const int64_t val);

  void __set_chunks(const std::vector<std::string> & val);

  void __set_relatedMessageId(const std::string& val);

  void __set_messageRelationType(const MessageRelationType::type val);

  void __set_readCount(const int32_t val);

  void __set_relatedMessageServiceCode(const RelatedMessageServiceCode::type val);

  void __set_appExtensionType(const AppExtensionType::type val);

  bool operator == (const Message & rhs) const
  {
    if (!(_from == rhs._from))
      return false;
    if (!(to == rhs.to))
      return false;
    if (!(toType == rhs.toType))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(deliveredTime == rhs.deliveredTime))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(hasContent == rhs.hasContent))
      return false;
    if (!(contentType == rhs.contentType))
      return false;
    if (!(contentMetadata == rhs.contentMetadata))
      return false;
    if (!(contentPreview == rhs.contentPreview))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(chunks == rhs.chunks))
      return false;
    if (!(relatedMessageId == rhs.relatedMessageId))
      return false;
    if (!(messageRelationType == rhs.messageRelationType))
      return false;
    if (!(readCount == rhs.readCount))
      return false;
    if (!(relatedMessageServiceCode == rhs.relatedMessageServiceCode))
      return false;
    if (!(appExtensionType == rhs.appExtensionType))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Message &a, Message &b);

std::ostream& operator<<(std::ostream& out, const Message& obj);

typedef struct _Operation__isset {
  _Operation__isset() : revision(false), createdTime(false), type(false), reqSeq(false), checksum(false), status(false), param1(false), param2(false), param3(false), message(false) {}
  bool revision :1;
  bool createdTime :1;
  bool type :1;
  bool reqSeq :1;
  bool checksum :1;
  bool status :1;
  bool param1 :1;
  bool param2 :1;
  bool param3 :1;
  bool message :1;
} _Operation__isset;

class Operation : public virtual ::apache::thrift::TBase {
 public:

  Operation(const Operation&);
  Operation& operator=(const Operation&);
  Operation() : revision(0), createdTime(0), type((OperationType::type)0), reqSeq(0), checksum(), status((OperationStatus::type)0), param1(), param2(), param3() {
  }

  virtual ~Operation() noexcept;
  int64_t revision;
  int64_t createdTime;
  OperationType::type type;
  int32_t reqSeq;
  std::string checksum;
  OperationStatus::type status;
  std::string param1;
  std::string param2;
  std::string param3;
  Message message;

  _Operation__isset __isset;

  void __set_revision(const int64_t val);

  void __set_createdTime(const int64_t val);

  void __set_type(const OperationType::type val);

  void __set_reqSeq(const int32_t val);

  void __set_checksum(const std::string& val);

  void __set_status(const OperationStatus::type val);

  void __set_param1(const std::string& val);

  void __set_param2(const std::string& val);

  void __set_param3(const std::string& val);

  void __set_message(const Message& val);

  bool operator == (const Operation & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(checksum == rhs.checksum))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Operation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Operation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Operation &a, Operation &b);

std::ostream& operator<<(std::ostream& out, const Operation& obj);

typedef struct _Profile__isset {
  _Profile__isset() : mid(false), userid(false), regionCode(false), phone(false), email(false), displayName(false), phoneticName(false), pictureStatus(false), thumbnailUrl(false), statusMessage(false), allowSearchByUserid(false), allowSearchByEmail(false), picturePath(false), musicProfile(false), videoProfile(false), statusMessageContentMetadata(false), avatarProfile(false) {}
  bool mid :1;
  bool userid :1;
  bool regionCode :1;
  bool phone :1;
  bool email :1;
  bool displayName :1;
  bool phoneticName :1;
  bool pictureStatus :1;
  bool thumbnailUrl :1;
  bool statusMessage :1;
  bool allowSearchByUserid :1;
  bool allowSearchByEmail :1;
  bool picturePath :1;
  bool musicProfile :1;
  bool videoProfile :1;
  bool statusMessageContentMetadata :1;
  bool avatarProfile :1;
} _Profile__isset;

class Profile : public virtual ::apache::thrift::TBase {
 public:

  Profile(const Profile&);
  Profile& operator=(const Profile&);
  Profile() : mid(), userid(), regionCode(), phone(), email(), displayName(), phoneticName(), pictureStatus(), thumbnailUrl(), statusMessage(), allowSearchByUserid(0), allowSearchByEmail(0), picturePath(), musicProfile(), videoProfile() {
  }

  virtual ~Profile() noexcept;
  std::string mid;
  std::string userid;
  std::string regionCode;
  std::string phone;
  std::string email;
  std::string displayName;
  std::string phoneticName;
  std::string pictureStatus;
  std::string thumbnailUrl;
  std::string statusMessage;
  bool allowSearchByUserid;
  bool allowSearchByEmail;
  std::string picturePath;
  std::string musicProfile;
  std::string videoProfile;
  std::map<std::string, std::string>  statusMessageContentMetadata;
  AvatarProfile avatarProfile;

  _Profile__isset __isset;

  void __set_mid(const std::string& val);

  void __set_userid(const std::string& val);

  void __set_regionCode(const std::string& val);

  void __set_phone(const std::string& val);

  void __set_email(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_phoneticName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_allowSearchByUserid(const bool val);

  void __set_allowSearchByEmail(const bool val);

  void __set_picturePath(const std::string& val);

  void __set_musicProfile(const std::string& val);

  void __set_videoProfile(const std::string& val);

  void __set_statusMessageContentMetadata(const std::map<std::string, std::string> & val);

  void __set_avatarProfile(const AvatarProfile& val);

  bool operator == (const Profile & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(regionCode == rhs.regionCode))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(phoneticName == rhs.phoneticName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(allowSearchByUserid == rhs.allowSearchByUserid))
      return false;
    if (!(allowSearchByEmail == rhs.allowSearchByEmail))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(musicProfile == rhs.musicProfile))
      return false;
    if (!(videoProfile == rhs.videoProfile))
      return false;
    if (!(statusMessageContentMetadata == rhs.statusMessageContentMetadata))
      return false;
    if (!(avatarProfile == rhs.avatarProfile))
      return false;
    return true;
  }
  bool operator != (const Profile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Profile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Profile &a, Profile &b);

std::ostream& operator<<(std::ostream& out, const Profile& obj);


class PeerExtra : public virtual ::apache::thrift::TBase {
 public:

  PeerExtra(const PeerExtra&);
  PeerExtra& operator=(const PeerExtra&);
  PeerExtra() {
  }

  virtual ~PeerExtra() noexcept;

  bool operator == (const PeerExtra & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PeerExtra &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PeerExtra & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PeerExtra &a, PeerExtra &b);

std::ostream& operator<<(std::ostream& out, const PeerExtra& obj);

typedef struct _RejectChatInvitationRequest__isset {
  _RejectChatInvitationRequest__isset() : reqSeq(false), chatMid(false) {}
  bool reqSeq :1;
  bool chatMid :1;
} _RejectChatInvitationRequest__isset;

class RejectChatInvitationRequest : public virtual ::apache::thrift::TBase {
 public:

  RejectChatInvitationRequest(const RejectChatInvitationRequest&);
  RejectChatInvitationRequest& operator=(const RejectChatInvitationRequest&);
  RejectChatInvitationRequest() : reqSeq(0), chatMid() {
  }

  virtual ~RejectChatInvitationRequest() noexcept;
  int32_t reqSeq;
  std::string chatMid;

  _RejectChatInvitationRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chatMid(const std::string& val);

  bool operator == (const RejectChatInvitationRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chatMid == rhs.chatMid))
      return false;
    return true;
  }
  bool operator != (const RejectChatInvitationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RejectChatInvitationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RejectChatInvitationRequest &a, RejectChatInvitationRequest &b);

std::ostream& operator<<(std::ostream& out, const RejectChatInvitationRequest& obj);


class RejectChatInvitationResponse : public virtual ::apache::thrift::TBase {
 public:

  RejectChatInvitationResponse(const RejectChatInvitationResponse&);
  RejectChatInvitationResponse& operator=(const RejectChatInvitationResponse&);
  RejectChatInvitationResponse() {
  }

  virtual ~RejectChatInvitationResponse() noexcept;

  bool operator == (const RejectChatInvitationResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RejectChatInvitationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RejectChatInvitationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RejectChatInvitationResponse &a, RejectChatInvitationResponse &b);

std::ostream& operator<<(std::ostream& out, const RejectChatInvitationResponse& obj);

typedef struct _ReissueChatTicketRequest__isset {
  _ReissueChatTicketRequest__isset() : reqSeq(false), groupMid(false) {}
  bool reqSeq :1;
  bool groupMid :1;
} _ReissueChatTicketRequest__isset;

class ReissueChatTicketRequest : public virtual ::apache::thrift::TBase {
 public:

  ReissueChatTicketRequest(const ReissueChatTicketRequest&);
  ReissueChatTicketRequest& operator=(const ReissueChatTicketRequest&);
  ReissueChatTicketRequest() : reqSeq(0), groupMid() {
  }

  virtual ~ReissueChatTicketRequest() noexcept;
  int32_t reqSeq;
  std::string groupMid;

  _ReissueChatTicketRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_groupMid(const std::string& val);

  bool operator == (const ReissueChatTicketRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(groupMid == rhs.groupMid))
      return false;
    return true;
  }
  bool operator != (const ReissueChatTicketRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReissueChatTicketRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReissueChatTicketRequest &a, ReissueChatTicketRequest &b);

std::ostream& operator<<(std::ostream& out, const ReissueChatTicketRequest& obj);

typedef struct _ReissueChatTicketResponse__isset {
  _ReissueChatTicketResponse__isset() : ticketId(false) {}
  bool ticketId :1;
} _ReissueChatTicketResponse__isset;

class ReissueChatTicketResponse : public virtual ::apache::thrift::TBase {
 public:

  ReissueChatTicketResponse(const ReissueChatTicketResponse&);
  ReissueChatTicketResponse& operator=(const ReissueChatTicketResponse&);
  ReissueChatTicketResponse() : ticketId() {
  }

  virtual ~ReissueChatTicketResponse() noexcept;
  std::string ticketId;

  _ReissueChatTicketResponse__isset __isset;

  void __set_ticketId(const std::string& val);

  bool operator == (const ReissueChatTicketResponse & rhs) const
  {
    if (!(ticketId == rhs.ticketId))
      return false;
    return true;
  }
  bool operator != (const ReissueChatTicketResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReissueChatTicketResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReissueChatTicketResponse &a, ReissueChatTicketResponse &b);

std::ostream& operator<<(std::ostream& out, const ReissueChatTicketResponse& obj);

typedef struct _UpdateChatRequest__isset {
  _UpdateChatRequest__isset() : reqSeq(false), chat(false), updatedAttribute(false) {}
  bool reqSeq :1;
  bool chat :1;
  bool updatedAttribute :1;
} _UpdateChatRequest__isset;

class UpdateChatRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateChatRequest(const UpdateChatRequest&);
  UpdateChatRequest& operator=(const UpdateChatRequest&);
  UpdateChatRequest() : reqSeq(0), updatedAttribute((UpdatedAttribute::type)0) {
  }

  virtual ~UpdateChatRequest() noexcept;
  int32_t reqSeq;
  Chat chat;
  UpdatedAttribute::type updatedAttribute;

  _UpdateChatRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chat(const Chat& val);

  void __set_updatedAttribute(const UpdatedAttribute::type val);

  bool operator == (const UpdateChatRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chat == rhs.chat))
      return false;
    if (!(updatedAttribute == rhs.updatedAttribute))
      return false;
    return true;
  }
  bool operator != (const UpdateChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateChatRequest &a, UpdateChatRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateChatRequest& obj);


class UpdateChatResponse : public virtual ::apache::thrift::TBase {
 public:

  UpdateChatResponse(const UpdateChatResponse&);
  UpdateChatResponse& operator=(const UpdateChatResponse&);
  UpdateChatResponse() {
  }

  virtual ~UpdateChatResponse() noexcept;

  bool operator == (const UpdateChatResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UpdateChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateChatResponse &a, UpdateChatResponse &b);

std::ostream& operator<<(std::ostream& out, const UpdateChatResponse& obj);

typedef struct _TalkException__isset {
  _TalkException__isset() : code(false), reason(false), parameterMap(false) {}
  bool code :1;
  bool reason :1;
  bool parameterMap :1;
} _TalkException__isset;

class TalkException : public ::apache::thrift::TException {
 public:

  TalkException(const TalkException&);
  TalkException& operator=(const TalkException&);
  TalkException() : code((TalkExceptionCode::type)0), reason() {
  }

  virtual ~TalkException() noexcept;
  TalkExceptionCode::type code;
  std::string reason;
  std::map<std::string, std::string>  parameterMap;

  _TalkException__isset __isset;

  void __set_code(const TalkExceptionCode::type val);

  void __set_reason(const std::string& val);

  void __set_parameterMap(const std::map<std::string, std::string> & val);

  bool operator == (const TalkException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    if (!(parameterMap == rhs.parameterMap))
      return false;
    return true;
  }
  bool operator != (const TalkException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(TalkException &a, TalkException &b);

std::ostream& operator<<(std::ostream& out, const TalkException& obj);

typedef struct _ThingsException__isset {
  _ThingsException__isset() : code(false), reason(false) {}
  bool code :1;
  bool reason :1;
} _ThingsException__isset;

class ThingsException : public ::apache::thrift::TException {
 public:

  ThingsException(const ThingsException&);
  ThingsException& operator=(const ThingsException&);
  ThingsException() : code((ThingsExceptionCode::type)0), reason() {
  }

  virtual ~ThingsException() noexcept;
  ThingsExceptionCode::type code;
  std::string reason;

  _ThingsException__isset __isset;

  void __set_code(const ThingsExceptionCode::type val);

  void __set_reason(const std::string& val);

  bool operator == (const ThingsException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const ThingsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThingsException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(ThingsException &a, ThingsException &b);

std::ostream& operator<<(std::ostream& out, const ThingsException& obj);



#endif
