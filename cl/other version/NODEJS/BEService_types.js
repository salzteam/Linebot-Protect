//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


AccuracyMode = {
  'UNKNOWN' : 0,
  'IOS_REDUCED_ACCURACY' : 1,
  'IOS_FULL_ACCURACY' : 2
};
AppExtensionType = {
  'SIRI' : 1,
  'GOOGLE_ASSISTANT' : 2,
  'OS_SHARE' : 3
};
ContactStatus = {
  'UNSPECIFIED' : 0,
  'FRIEND' : 1,
  'FRIEND_BLOCKED' : 2,
  'RECOMMEND' : 3,
  'RECOMMEND_BLOCKED' : 4,
  'DELETED' : 5,
  'DELETED_BLOCKED' : 6
};
ChatType = {
  'GROUP' : 0,
  'ROOM' : 1,
  'PEER' : 2
};
ContentType = {
  'NONE' : 0,
  'IMAGE' : 1,
  'VIDEO' : 2,
  'AUDIO' : 3,
  'HTML' : 4,
  'PDF' : 5,
  'CALL' : 6,
  'STICKER' : 7,
  'PRESENCE' : 8,
  'GIFT' : 9,
  'GROUPBOARD' : 10,
  'APPLINK' : 11,
  'LINK' : 12,
  'CONTACT' : 13,
  'FILE' : 14,
  'LOCATION' : 15,
  'POSTNOTIFICATION' : 16,
  'RICH' : 17,
  'CHATEVENT' : 18,
  'MUSIC' : 19,
  'PAYMENT' : 20,
  'EXTIMAGE' : 21,
  'FLEX' : 22
};
ContactType = {
  'MID' : 0,
  'PHONE' : 1,
  'EMAIL' : 2,
  'USERID' : 3,
  'PROXIMITY' : 4,
  'GROUP' : 5,
  'USER' : 6,
  'QRCODE' : 7,
  'PROMOTION_BOT' : 8,
  'CONTACT_MESSAGE' : 9,
  'FRIEND_REQUEST' : 10,
  'REPAIR' : 128,
  'FACEBOOK' : 2305,
  'SINA' : 2306,
  'RENREN' : 2307,
  'FEIXIN' : 2308,
  'BBM' : 2309,
  'BEACON' : 11
};
FriendRequestStatus = {
  'NONE' : 0,
  'AVAILABLE' : 1,
  'ALREADY_REQUESTED' : 2,
  'UNAVAILABLE' : 3
};
MessageRelationType = {
  'FORWARD' : 0,
  'AUTO_REPLY' : 1,
  'SUBORDINATE' : 2,
  'REPLY' : 3
};
OperationType = {
  'END_OF_OPERATION' : 0,
  'UPDATE_PROFILE' : 1,
  'UPDATE_SETTINGS' : 36,
  'NOTIFIED_UPDATE_PROFILE' : 2,
  'REGISTER_USERID' : 3,
  'ADD_CONTACT' : 4,
  'NOTIFIED_ADD_CONTACT' : 5,
  'BLOCK_CONTACT' : 6,
  'UNBLOCK_CONTACT' : 7,
  'NOTIFIED_RECOMMEND_CONTACT' : 8,
  'CREATE_GROUP' : 9,
  'UPDATE_GROUP' : 10,
  'NOTIFIED_UPDATE_GROUP' : 11,
  'INVITE_INTO_GROUP' : 12,
  'NOTIFIED_INVITE_INTO_GROUP' : 13,
  'CANCEL_INVITATION_GROUP' : 31,
  'NOTIFIED_CANCEL_INVITATION_GROUP' : 32,
  'LEAVE_GROUP' : 14,
  'NOTIFIED_LEAVE_GROUP' : 15,
  'ACCEPT_GROUP_INVITATION' : 16,
  'NOTIFIED_ACCEPT_GROUP_INVITATION' : 17,
  'REJECT_GROUP_INVITATION' : 34,
  'NOTIFIED_REJECT_GROUP_INVITATION' : 35,
  'KICKOUT_FROM_GROUP' : 18,
  'NOTIFIED_KICKOUT_FROM_GROUP' : 19,
  'CREATE_ROOM' : 20,
  'INVITE_INTO_ROOM' : 21,
  'NOTIFIED_INVITE_INTO_ROOM' : 22,
  'LEAVE_ROOM' : 23,
  'NOTIFIED_LEAVE_ROOM' : 24,
  'SEND_MESSAGE' : 25,
  'RECEIVE_MESSAGE' : 26,
  'SEND_MESSAGE_RECEIPT' : 27,
  'RECEIVE_MESSAGE_RECEIPT' : 28,
  'SEND_CONTENT_RECEIPT' : 29,
  'SEND_CHAT_CHECKED' : 40,
  'SEND_CHAT_REMOVED' : 41,
  'RECEIVE_ANNOUNCEMENT' : 30,
  'INVITE_VIA_EMAIL' : 38,
  'NOTIFIED_REGISTER_USER' : 37,
  'NOTIFIED_UNREGISTER_USER' : 33,
  'NOTIFIED_REQUEST_RECOVERY' : 39,
  'NOTIFIED_FORCE_SYNC' : 42,
  'SEND_CONTENT' : 43,
  'SEND_MESSAGE_MYHOME' : 44,
  'NOTIFIED_UPDATE_CONTENT_PREVIEW' : 45,
  'REMOVE_ALL_MESSAGES' : 46,
  'NOTIFIED_UPDATE_PURCHASES' : 47,
  'DUMMY' : 48,
  'UPDATE_CONTACT' : 49,
  'NOTIFIED_RECEIVED_CALL' : 50,
  'CANCEL_CALL' : 51,
  'NOTIFIED_REDIRECT' : 52,
  'NOTIFIED_CHANNEL_SYNC' : 53,
  'FAILED_SEND_MESSAGE' : 54,
  'NOTIFIED_READ_MESSAGE' : 55,
  'FAILED_EMAIL_CONFIRMATION' : 56,
  'NOTIFIED_PUSH_NOTICENTER_ITEM' : 59,
  'NOTIFIED_CHAT_CONTENT' : 58,
  'NOTIFIED_JOIN_CHAT' : 60,
  'NOTIFIED_LEAVE_CHAT' : 61,
  'NOTIFIED_TYPING' : 62,
  'FRIEND_REQUEST_ACCEPTED' : 63,
  'DESTROY_MESSAGE' : 64,
  'NOTIFIED_DESTROY_MESSAGE' : 65,
  'UPDATE_PUBLICKEYCHAIN' : 66,
  'NOTIFIED_UPDATE_PUBLICKEYCHAIN' : 67,
  'NOTIFIED_BLOCK_CONTACT' : 68,
  'NOTIFIED_UNBLOCK_CONTACT' : 69,
  'UPDATE_GROUPPREFERENCE' : 70,
  'NOTIFIED_PAYMENT_EVENT' : 71,
  'REGISTER_E2EE_PUBLICKEY' : 72,
  'NOTIFIED_E2EE_KEY_EXCHANGE_REQ' : 73,
  'NOTIFIED_E2EE_KEY_EXCHANGE_RESP' : 74,
  'NOTIFIED_E2EE_MESSAGE_RESEND_REQ' : 75,
  'NOTIFIED_E2EE_MESSAGE_RESEND_RESP' : 76,
  'NOTIFIED_E2EE_KEY_UPDATE' : 77,
  'NOTIFIED_BUDDY_UPDATE_PROFILE' : 78,
  'NOTIFIED_UPDATE_LINEAT_TABS' : 79,
  'UPDATE_ROOM' : 80,
  'NOTIFIED_BEACON_DETECTED' : 81,
  'UPDATE_EXTENDED_PROFILE' : 82,
  'ADD_FOLLOW' : 83,
  'NOTIFIED_ADD_FOLLOW' : 84,
  'DELETE_FOLLOW' : 85,
  'NOTIFIED_DELETE_FOLLOW' : 86,
  'UPDATE_TIMELINE_SETTINGS' : 87,
  'NOTIFIED_FRIEND_REQUEST' : 88,
  'UPDATE_RINGBACK_TONE' : 89,
  'NOTIFIED_POSTBACK' : 90,
  'RECEIVE_READ_WATERMARK' : 91,
  'NOTIFIED_MESSAGE_DELIVERED' : 92,
  'NOTIFIED_UPDATE_CHAT_BAR' : 93,
  'NOTIFIED_CHATAPP_INSTALLED' : 94,
  'NOTIFIED_CHATAPP_UPDATED' : 95,
  'NOTIFIED_CHATAPP_NEW_MARK' : 96,
  'NOTIFIED_CHATAPP_DELETED' : 97,
  'NOTIFIED_CHATAPP_SYNC' : 98,
  'NOTIFIED_UPDATE_MESSAGE' : 99,
  'UPDATE_CHATROOMBGM' : 100,
  'NOTIFIED_UPDATE_CHATROOMBGM' : 101,
  'UPDATE_RINGTONE' : 102,
  'UPDATE_USER_SETTINGS' : 118,
  'NOTIFIED_UPDATE_STATUS_BAR' : 119,
  'CREATE_CHAT' : 120,
  'UPDATE_CHAT' : 121,
  'NOTIFIED_UPDATE_CHAT' : 122,
  'INVITE_INTO_CHAT' : 123,
  'NOTIFIED_INVITE_INTO_CHAT' : 124,
  'CANCEL_CHAT_INVITATION' : 125,
  'NOTIFIED_CANCEL_CHAT_INVITATION' : 126,
  'DELETE_SELF_FROM_CHAT' : 127,
  'NOTIFIED_DELETE_SELF_FROM_CHAT' : 128,
  'ACCEPT_CHAT_INVITATION' : 129,
  'NOTIFIED_ACCEPT_CHAT_INVITATION' : 130,
  'REJECT_CHAT_INVITATION' : 131,
  'DELETE_OTHER_FROM_CHAT' : 132,
  'NOTIFIED_DELETE_OTHER_FROM_CHAT' : 133,
  'NOTIFIED_CONTACT_CALENDAR_EVENT' : 134,
  'NOTIFIED_CONTACT_CALENDAR_EVENT_ALL' : 135,
  'UPDATE_THINGS_OPERATIONS' : 136,
  'SEND_CHAT_HIDDEN' : 137,
  'CHAT_META_SYNC_ALL' : 138,
  'SEND_REACTION' : 139,
  'NOTIFIED_SEND_REACTION' : 140
};
OperationStatus = {
  'NORMAL' : 0,
  'ALERT_DISABLED' : 1,
  'ALWAYS' : 2
};
ProfileAttribute = {
  'ALL' : 0,
  'EMAIL' : 1,
  'DISPLAY_NAME' : 2,
  'PHONETIC_NAME' : 4,
  'PICTURE' : 8,
  'STATUS_MESSAGE' : 16,
  'ALLOW_SEARCH_BY_USERID' : 32,
  'ALLOW_SEARCH_BY_EMAIL' : 64,
  'BUDDY_STATUS' : 128,
  'MUSIC_PROFILE' : 256,
  'AVATAR_PROFILE' : 512
};
Provider = {
  'GOOGLE' : 0,
  'BAIDU' : 1,
  'FOURSQUARE' : 2
};
RelatedMessageServiceCode = {
  'UNKNOWN' : 0,
  'TALK' : 1,
  'SQUARE' : 2
};
Relation = {
  'ONEWAY' : 0,
  'BOTH' : 1,
  'NOT_REGISTERED' : 2
};
SyncReason = {
  'UNSPECIFIED' : 0,
  'UNKNOWN' : 1,
  'INITIALIZATION' : 2,
  'OPERATION' : 3,
  'FULL_SYNC' : 4,
  'AUTO_REPAIR' : 5,
  'MANUAL_REPAIR' : 6,
  'INTERNAL' : 7
};
ThingsExceptionCode = {
  'INTERNAL_SERVER_ERROR' : 0,
  'UNAUTHORIZED' : 1,
  'INVALID_REQUEST' : 2,
  'INVALID_STATE' : 3,
  'DEVICE_LIMIT_EXCEEDED' : 4096,
  'UNSUPPORTED_REGION' : 4097
};
TalkExceptionCode = {
  'ILLEGAL_ARGUMENT' : 0,
  'AUTHENTICATION_FAILED' : 1,
  'DB_FAILED' : 2,
  'INVALID_STATE' : 3,
  'EXCESSIVE_ACCESS' : 4,
  'NOT_FOUND' : 5,
  'INVALID_LENGTH' : 6,
  'NOT_AVAILABLE_USER' : 7,
  'NOT_AUTHORIZED_DEVICE' : 8,
  'INVALID_MID' : 9,
  'NOT_A_MEMBER' : 10,
  'INCOMPATIBLE_APP_VERSION' : 11,
  'NOT_READY' : 12,
  'NOT_AVAILABLE_SESSION' : 13,
  'NOT_AUTHORIZED_SESSION' : 14,
  'SYSTEM_ERROR' : 15,
  'NO_AVAILABLE_VERIFICATION_METHOD' : 16,
  'NOT_AUTHENTICATED' : 17,
  'INVALID_IDENTITY_CREDENTIAL' : 18,
  'NOT_AVAILABLE_IDENTITY_IDENTIFIER' : 19,
  'INTERNAL_ERROR' : 20,
  'NO_SUCH_IDENTITY_IDENFIER' : 21,
  'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY' : 22,
  'ILLEGAL_IDENTITY_CREDENTIAL' : 23,
  'UNKNOWN_CHANNEL' : 24,
  'NO_SUCH_MESSAGE_BOX' : 25,
  'NOT_AVAILABLE_MESSAGE_BOX' : 26,
  'CHANNEL_DOES_NOT_MATCH' : 27,
  'NOT_YOUR_MESSAGE' : 28,
  'MESSAGE_DEFINED_ERROR' : 29,
  'USER_CANNOT_ACCEPT_PRESENTS' : 30,
  'USER_NOT_STICKER_OWNER' : 32,
  'MAINTENANCE_ERROR' : 33,
  'ACCOUNT_NOT_MATCHED' : 34,
  'ABUSE_BLOCK' : 35,
  'NOT_FRIEND' : 36,
  'NOT_ALLOWED_CALL' : 37,
  'BLOCK_FRIEND' : 38,
  'INCOMPATIBLE_VOIP_VERSION' : 39,
  'INVALID_SNS_ACCESS_TOKEN' : 40,
  'EXTERNAL_SERVICE_NOT_AVAILABLE' : 41,
  'NOT_ALLOWED_ADD_CONTACT' : 42,
  'NOT_CERTIFICATED' : 43,
  'NOT_ALLOWED_SECONDARY_DEVICE' : 44,
  'INVALID_PIN_CODE' : 45,
  'NOT_FOUND_IDENTITY_CREDENTIAL' : 46,
  'EXCEED_FILE_MAX_SIZE' : 47,
  'EXCEED_DAILY_QUOTA' : 48,
  'NOT_SUPPORT_SEND_FILE' : 49,
  'MUST_UPGRADE' : 50,
  'NOT_AVAILABLE_PIN_CODE_SESSION' : 51,
  'EXPIRED_REVISION' : 52,
  'NOT_YET_PHONE_NUMBER' : 54,
  'BAD_CALL_NUMBER' : 55,
  'UNAVAILABLE_CALL_NUMBER' : 56,
  'NOT_SUPPORT_CALL_SERVICE' : 57,
  'CONGESTION_CONTROL' : 58,
  'NO_BALANCE' : 59,
  'NOT_PERMITTED_CALLER_ID' : 60,
  'NO_CALLER_ID_LIMIT_EXCEEDED' : 61,
  'CALLER_ID_VERIFICATION_REQUIRED' : 62,
  'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED' : 63,
  'MESSAGE_NOT_FOUND' : 64,
  'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT' : 65,
  'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED' : 66,
  'ACCOUNT_MIGRATION_PINCODE_BLOCKED' : 67,
  'INVALID_PASSWORD_FORMAT' : 69,
  'FEATURE_RESTRICTED' : 70,
  'MESSAGE_NOT_DESTRUCTIBLE' : 71,
  'PAID_CALL_REDEEM_FAILED' : 72,
  'PREVENTED_JOIN_BY_TICKET' : 73,
  'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT' : 75,
  'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY' : 76,
  'SECURITY_CENTER_NOT_VERIFIED' : 77,
  'SECURITY_CENTER_BLOCKED_BY_SETTING' : 78,
  'SECURITY_CENTER_BLOCKED' : 79,
  'TALK_PROXY_EXCEPTION' : 80,
  'E2EE_INVALID_PROTOCOL' : 81,
  'E2EE_RETRY_ENCRYPT' : 82,
  'E2EE_UPDATE_SENDER_KEY' : 83,
  'E2EE_UPDATE_RECEIVER_KEY' : 84,
  'E2EE_INVALID_ARGUMENT' : 85,
  'E2EE_INVALID_VERSION' : 86,
  'E2EE_SENDER_DISABLED' : 87,
  'E2EE_RECEIVER_DISABLED' : 88,
  'E2EE_SENDER_NOT_ALLOWED' : 89,
  'E2EE_RECEIVER_NOT_ALLOWED' : 90,
  'E2EE_RESEND_FAIL' : 91,
  'E2EE_RESEND_OK' : 92,
  'HITOKOTO_BACKUP_NO_AVAILABLE_DATA' : 93,
  'E2EE_UPDATE_PRIMARY_DEVICE' : 94,
  'SUCCESS' : 95,
  'CANCEL' : 96,
  'E2EE_PRIMARY_NOT_SUPPORT' : 97,
  'E2EE_RETRY_PLAIN' : 98,
  'E2EE_RECREATE_GROUP_KEY' : 99,
  'E2EE_GROUP_TOO_MANY_MEMBERS' : 100,
  'SERVER_BUSY' : 101,
  'NOT_ALLOWED_ADD_FOLLOW' : 102,
  'INCOMING_FRIEND_REQUEST_LIMIT' : 103,
  'OUTGOING_FRIEND_REQUEST_LIMIT' : 104,
  'OUTGOING_FRIEND_REQUEST_QUOTA' : 105,
  'DUPLICATED' : 106,
  'BANNED' : 107,
  'NOT_AN_INVITEE' : 108,
  'NOT_AN_OUTSIDER' : 109,
  'EMPTY_GROUP' : 111,
  'EXCEED_FOLLOW_LIMIT' : 112,
  'UNSUPPORTED_ACCOUNT_TYPE' : 113,
  'AGREEMENT_REQUIRED' : 114,
  'SHOULD_RETRY' : 115,
  'OVER_MAX_CHATS_PER_USER' : 116,
  'NOT_AVAILABLE_API' : 117,
  'INVALID_OTP' : 118
};
ToType = {
  'USER' : 0,
  'ROOM' : 1,
  'GROUP' : 2,
  'SQUARE' : 3,
  'SQUARE_CHAT' : 4,
  'SQUARE_MEMBER' : 5,
  'BOT' : 6
};
UpdatedAttribute = {
  'NAME' : 1,
  'PICTURE_STATUS' : 2,
  'PREVENTED_JOIN_BY_TICKET' : 4,
  'NOTIFICATION_SETTING' : 8,
  'INVITATION_TICKET' : 16,
  'FAVORITE_TIMESTAMP' : 32,
  'CHAT_TYPE' : 64
};
AvatarProfile = function(args) {
  this.version = null;
  this.updatedMillis = null;
  this.thumbnail = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.updatedMillis !== undefined && args.updatedMillis !== null) {
      this.updatedMillis = args.updatedMillis;
    }
    if (args.thumbnail !== undefined && args.thumbnail !== null) {
      this.thumbnail = args.thumbnail;
    }
  }
};
AvatarProfile.prototype = {};
AvatarProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updatedMillis = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AvatarProfile.prototype.write = function(output) {
  output.writeStructBegin('AvatarProfile');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.updatedMillis !== null && this.updatedMillis !== undefined) {
    output.writeFieldBegin('updatedMillis', Thrift.Type.I64, 2);
    output.writeI64(this.updatedMillis);
    output.writeFieldEnd();
  }
  if (this.thumbnail !== null && this.thumbnail !== undefined) {
    output.writeFieldBegin('thumbnail', Thrift.Type.STRING, 3);
    output.writeString(this.thumbnail);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Chat = function(args) {
  this.type = null;
  this.chatMid = null;
  this.createdTime = null;
  this.notificationDisabled = null;
  this.favoriteTimestamp = null;
  this.chatName = null;
  this.picturePath = null;
  this.extra = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
    if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
      this.favoriteTimestamp = args.favoriteTimestamp;
    }
    if (args.chatName !== undefined && args.chatName !== null) {
      this.chatName = args.chatName;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = new Extra(args.extra);
    }
  }
};
Chat.prototype = {};
Chat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.chatName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.extra = new Extra();
        this.extra.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Chat.prototype.write = function(output) {
  output.writeStructBegin('Chat');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 3);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  if (this.favoriteTimestamp !== null && this.favoriteTimestamp !== undefined) {
    output.writeFieldBegin('favoriteTimestamp', Thrift.Type.I64, 5);
    output.writeI64(this.favoriteTimestamp);
    output.writeFieldEnd();
  }
  if (this.chatName !== null && this.chatName !== undefined) {
    output.writeFieldBegin('chatName', Thrift.Type.STRING, 6);
    output.writeString(this.chatName);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 7);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.STRUCT, 8);
    this.extra.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AcceptChatInvitationRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
AcceptChatInvitationRequest.prototype = {};
AcceptChatInvitationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationRequest.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AcceptChatInvitationResponse = function(args) {
};
AcceptChatInvitationResponse.prototype = {};
AcceptChatInvitationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationResponse.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AcceptChatInvitationByTicketRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.ticketId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
AcceptChatInvitationByTicketRequest.prototype = {};
AcceptChatInvitationByTicketRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationByTicketRequest.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationByTicketRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 3);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AcceptChatInvitationByTicketResponse = function(args) {
};
AcceptChatInvitationByTicketResponse.prototype = {};
AcceptChatInvitationByTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationByTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationByTicketResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CancelChatInvitationRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.targetUserMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
  }
};
CancelChatInvitationRequest.prototype = {};
CancelChatInvitationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        this.targetUserMids = [];
        var _rtmp31 = input.readSetBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString().value;
          this.targetUserMids.push(elem3);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CancelChatInvitationRequest.prototype.write = function(output) {
  output.writeStructBegin('CancelChatInvitationRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter4 in this.targetUserMids) {
      if (this.targetUserMids.hasOwnProperty(iter4)) {
        iter4 = this.targetUserMids[iter4];
        output.writeString(iter4);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CancelChatInvitationResponse = function(args) {
};
CancelChatInvitationResponse.prototype = {};
CancelChatInvitationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CancelChatInvitationResponse.prototype.write = function(output) {
  output.writeStructBegin('CancelChatInvitationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateChatRequest = function(args) {
  this.reqSeq = null;
  this.type = null;
  this.name = null;
  this.targetUserMids = null;
  this.picturePath = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
  }
};
CreateChatRequest.prototype = {};
CreateChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        this.targetUserMids = [];
        var _rtmp36 = input.readSetBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readString().value;
          this.targetUserMids.push(elem8);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateChatRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter9 in this.targetUserMids) {
      if (this.targetUserMids.hasOwnProperty(iter9)) {
        iter9 = this.targetUserMids[iter9];
        output.writeString(iter9);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 5);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateChatResponse = function(args) {
  this.chat = null;
  if (args) {
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new Chat(args.chat);
    }
  }
};
CreateChatResponse.prototype = {};
CreateChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new Chat();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateChatResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateChatResponse');
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 1);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Contact = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.type = null;
  this.status = null;
  this.relation = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.displayNameOverridden = null;
  this.favoriteTime = null;
  this.capableVoiceCall = null;
  this.capableVideoCall = null;
  this.capableMyhome = null;
  this.capableBuddy = null;
  this.attributes = null;
  this.settings = null;
  this.picturePath = null;
  this.recommendParams = null;
  this.friendRequestStatus = null;
  this.musicProfile = null;
  this.videoProfile = null;
  this.statusMessageContentMetadata = null;
  this.avatarProfile = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = args.relation;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
      this.displayNameOverridden = args.displayNameOverridden;
    }
    if (args.favoriteTime !== undefined && args.favoriteTime !== null) {
      this.favoriteTime = args.favoriteTime;
    }
    if (args.capableVoiceCall !== undefined && args.capableVoiceCall !== null) {
      this.capableVoiceCall = args.capableVoiceCall;
    }
    if (args.capableVideoCall !== undefined && args.capableVideoCall !== null) {
      this.capableVideoCall = args.capableVideoCall;
    }
    if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
      this.capableMyhome = args.capableMyhome;
    }
    if (args.capableBuddy !== undefined && args.capableBuddy !== null) {
      this.capableBuddy = args.capableBuddy;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = args.attributes;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = args.settings;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.recommendParams !== undefined && args.recommendParams !== null) {
      this.recommendParams = args.recommendParams;
    }
    if (args.friendRequestStatus !== undefined && args.friendRequestStatus !== null) {
      this.friendRequestStatus = args.friendRequestStatus;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
    if (args.statusMessageContentMetadata !== undefined && args.statusMessageContentMetadata !== null) {
      this.statusMessageContentMetadata = Thrift.copyMap(args.statusMessageContentMetadata, [null]);
    }
    if (args.avatarProfile !== undefined && args.avatarProfile !== null) {
      this.avatarProfile = new AvatarProfile(args.avatarProfile);
    }
  }
};
Contact.prototype = {};
Contact.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.relation = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.displayNameOverridden = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVoiceCall = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVideoCall = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.capableMyhome = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.BOOL) {
        this.capableBuddy = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I32) {
        this.attributes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I64) {
        this.settings = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRING) {
        this.recommendParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.I32) {
        this.friendRequestStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.MAP) {
        this.statusMessageContentMetadata = {};
        var _rtmp311 = input.readMapBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          if (_i12 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key13 = null;
          var val14 = null;
          key13 = input.readString().value;
          val14 = input.readString().value;
          this.statusMessageContentMetadata[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRUCT) {
        this.avatarProfile = new AvatarProfile();
        this.avatarProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contact.prototype.write = function(output) {
  output.writeStructBegin('Contact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 10);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 11);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.I32, 21);
    output.writeI32(this.relation);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 22);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 23);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 24);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 25);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 26);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.displayNameOverridden !== null && this.displayNameOverridden !== undefined) {
    output.writeFieldBegin('displayNameOverridden', Thrift.Type.STRING, 27);
    output.writeString(this.displayNameOverridden);
    output.writeFieldEnd();
  }
  if (this.favoriteTime !== null && this.favoriteTime !== undefined) {
    output.writeFieldBegin('favoriteTime', Thrift.Type.I64, 28);
    output.writeI64(this.favoriteTime);
    output.writeFieldEnd();
  }
  if (this.capableVoiceCall !== null && this.capableVoiceCall !== undefined) {
    output.writeFieldBegin('capableVoiceCall', Thrift.Type.BOOL, 31);
    output.writeBool(this.capableVoiceCall);
    output.writeFieldEnd();
  }
  if (this.capableVideoCall !== null && this.capableVideoCall !== undefined) {
    output.writeFieldBegin('capableVideoCall', Thrift.Type.BOOL, 32);
    output.writeBool(this.capableVideoCall);
    output.writeFieldEnd();
  }
  if (this.capableMyhome !== null && this.capableMyhome !== undefined) {
    output.writeFieldBegin('capableMyhome', Thrift.Type.BOOL, 33);
    output.writeBool(this.capableMyhome);
    output.writeFieldEnd();
  }
  if (this.capableBuddy !== null && this.capableBuddy !== undefined) {
    output.writeFieldBegin('capableBuddy', Thrift.Type.BOOL, 34);
    output.writeBool(this.capableBuddy);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.I32, 35);
    output.writeI32(this.attributes);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.I64, 36);
    output.writeI64(this.settings);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 37);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.recommendParams !== null && this.recommendParams !== undefined) {
    output.writeFieldBegin('recommendParams', Thrift.Type.STRING, 38);
    output.writeString(this.recommendParams);
    output.writeFieldEnd();
  }
  if (this.friendRequestStatus !== null && this.friendRequestStatus !== undefined) {
    output.writeFieldBegin('friendRequestStatus', Thrift.Type.I32, 39);
    output.writeI32(this.friendRequestStatus);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 40);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 42);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  if (this.statusMessageContentMetadata !== null && this.statusMessageContentMetadata !== undefined) {
    output.writeFieldBegin('statusMessageContentMetadata', Thrift.Type.MAP, 43);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.statusMessageContentMetadata));
    for (var kiter15 in this.statusMessageContentMetadata) {
      if (this.statusMessageContentMetadata.hasOwnProperty(kiter15)) {
        var viter16 = this.statusMessageContentMetadata[kiter15];
        output.writeString(kiter15);
        output.writeString(viter16);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.avatarProfile !== null && this.avatarProfile !== undefined) {
    output.writeFieldBegin('avatarProfile', Thrift.Type.STRUCT, 44);
    this.avatarProfile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteSelfFromChatRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.lastSeenMessageDeliveredTime = null;
  this.lastSeenMessageId = null;
  this.lastMessageDeliveredTime = null;
  this.lastMessageId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.lastSeenMessageDeliveredTime !== undefined && args.lastSeenMessageDeliveredTime !== null) {
      this.lastSeenMessageDeliveredTime = args.lastSeenMessageDeliveredTime;
    }
    if (args.lastSeenMessageId !== undefined && args.lastSeenMessageId !== null) {
      this.lastSeenMessageId = args.lastSeenMessageId;
    }
    if (args.lastMessageDeliveredTime !== undefined && args.lastMessageDeliveredTime !== null) {
      this.lastMessageDeliveredTime = args.lastMessageDeliveredTime;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
DeleteSelfFromChatRequest.prototype = {};
DeleteSelfFromChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastSeenMessageDeliveredTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lastSeenMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastMessageDeliveredTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSelfFromChatRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteSelfFromChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.lastSeenMessageDeliveredTime !== null && this.lastSeenMessageDeliveredTime !== undefined) {
    output.writeFieldBegin('lastSeenMessageDeliveredTime', Thrift.Type.I64, 3);
    output.writeI64(this.lastSeenMessageDeliveredTime);
    output.writeFieldEnd();
  }
  if (this.lastSeenMessageId !== null && this.lastSeenMessageId !== undefined) {
    output.writeFieldBegin('lastSeenMessageId', Thrift.Type.STRING, 4);
    output.writeString(this.lastSeenMessageId);
    output.writeFieldEnd();
  }
  if (this.lastMessageDeliveredTime !== null && this.lastMessageDeliveredTime !== undefined) {
    output.writeFieldBegin('lastMessageDeliveredTime', Thrift.Type.I64, 5);
    output.writeI64(this.lastMessageDeliveredTime);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 6);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteSelfFromChatResponse = function(args) {
};
DeleteSelfFromChatResponse.prototype = {};
DeleteSelfFromChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSelfFromChatResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteSelfFromChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteOtherFromChatRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.targetUserMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
  }
};
DeleteOtherFromChatRequest.prototype = {};
DeleteOtherFromChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        this.targetUserMids = [];
        var _rtmp318 = input.readSetBegin();
        var _size17 = _rtmp318.size || 0;
        for (var _i19 = 0; _i19 < _size17; ++_i19) {
          var elem20 = null;
          elem20 = input.readString().value;
          this.targetUserMids.push(elem20);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteOtherFromChatRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteOtherFromChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter21 in this.targetUserMids) {
      if (this.targetUserMids.hasOwnProperty(iter21)) {
        iter21 = this.targetUserMids[iter21];
        output.writeString(iter21);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteOtherFromChatResponse = function(args) {
};
DeleteOtherFromChatResponse.prototype = {};
DeleteOtherFromChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteOtherFromChatResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteOtherFromChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Extra = function(args) {
  this.groupExtra = null;
  this.peerExtra = null;
  if (args) {
    if (args.groupExtra !== undefined && args.groupExtra !== null) {
      this.groupExtra = new GroupExtra(args.groupExtra);
    }
    if (args.peerExtra !== undefined && args.peerExtra !== null) {
      this.peerExtra = new PeerExtra(args.peerExtra);
    }
  }
};
Extra.prototype = {};
Extra.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupExtra = new GroupExtra();
        this.groupExtra.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.peerExtra = new PeerExtra();
        this.peerExtra.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Extra.prototype.write = function(output) {
  output.writeStructBegin('Extra');
  if (this.groupExtra !== null && this.groupExtra !== undefined) {
    output.writeFieldBegin('groupExtra', Thrift.Type.STRUCT, 1);
    this.groupExtra.write(output);
    output.writeFieldEnd();
  }
  if (this.peerExtra !== null && this.peerExtra !== undefined) {
    output.writeFieldBegin('peerExtra', Thrift.Type.STRUCT, 2);
    this.peerExtra.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FindChatByTicketRequest = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
FindChatByTicketRequest.prototype = {};
FindChatByTicketRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FindChatByTicketRequest.prototype.write = function(output) {
  output.writeStructBegin('FindChatByTicketRequest');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 1);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FindChatByTicketResponse = function(args) {
  this.chat = null;
  if (args) {
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new Chat(args.chat);
    }
  }
};
FindChatByTicketResponse.prototype = {};
FindChatByTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new Chat();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FindChatByTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('FindChatByTicketResponse');
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 1);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchOperationsRequest = function(args) {
  this.deviceId = null;
  this.offsetFrom = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.offsetFrom !== undefined && args.offsetFrom !== null) {
      this.offsetFrom = args.offsetFrom;
    }
  }
};
FetchOperationsRequest.prototype = {};
FetchOperationsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.offsetFrom = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchOperationsRequest.prototype.write = function(output) {
  output.writeStructBegin('FetchOperationsRequest');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.offsetFrom !== null && this.offsetFrom !== undefined) {
    output.writeFieldBegin('offsetFrom', Thrift.Type.I64, 2);
    output.writeI64(this.offsetFrom);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchOperationsResponse = function(args) {
  this.operations = null;
  this.hasNext = null;
  if (args) {
    if (args.operations !== undefined && args.operations !== null) {
      this.operations = Thrift.copyList(args.operations, [null]);
    }
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
  }
};
FetchOperationsResponse.prototype = {};
FetchOperationsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.operations = [];
        var _rtmp323 = input.readListBegin();
        var _size22 = _rtmp323.size || 0;
        for (var _i24 = 0; _i24 < _size22; ++_i24) {
          var elem25 = null;
          elem25 = new Operation();
          elem25.read(input);
          this.operations.push(elem25);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchOperationsResponse.prototype.write = function(output) {
  output.writeStructBegin('FetchOperationsResponse');
  if (this.operations !== null && this.operations !== undefined) {
    output.writeFieldBegin('operations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.operations.length);
    for (var iter26 in this.operations) {
      if (this.operations.hasOwnProperty(iter26)) {
        iter26 = this.operations[iter26];
        iter26.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GroupExtra = function(args) {
  this.creator = null;
  this.preventedJoinByTicket = null;
  this.invitationTicket = null;
  this.memberMids = null;
  this.inviteeMids = null;
  if (args) {
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.preventedJoinByTicket !== undefined && args.preventedJoinByTicket !== null) {
      this.preventedJoinByTicket = args.preventedJoinByTicket;
    }
    if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
      this.invitationTicket = args.invitationTicket;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyMap(args.memberMids, [null]);
    }
    if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
      this.inviteeMids = Thrift.copyMap(args.inviteeMids, [null]);
    }
  }
};
GroupExtra.prototype = {};
GroupExtra.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.preventedJoinByTicket = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.invitationTicket = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.memberMids = {};
        var _rtmp328 = input.readMapBegin();
        var _size27 = _rtmp328.size || 0;
        for (var _i29 = 0; _i29 < _size27; ++_i29) {
          if (_i29 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key30 = null;
          var val31 = null;
          key30 = input.readString().value;
          val31 = input.readI64().value;
          this.memberMids[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.inviteeMids = {};
        var _rtmp333 = input.readMapBegin();
        var _size32 = _rtmp333.size || 0;
        for (var _i34 = 0; _i34 < _size32; ++_i34) {
          if (_i34 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key35 = null;
          var val36 = null;
          key35 = input.readString().value;
          val36 = input.readI64().value;
          this.inviteeMids[key35] = val36;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupExtra.prototype.write = function(output) {
  output.writeStructBegin('GroupExtra');
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 1);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.preventedJoinByTicket !== null && this.preventedJoinByTicket !== undefined) {
    output.writeFieldBegin('preventedJoinByTicket', Thrift.Type.BOOL, 2);
    output.writeBool(this.preventedJoinByTicket);
    output.writeFieldEnd();
  }
  if (this.invitationTicket !== null && this.invitationTicket !== undefined) {
    output.writeFieldBegin('invitationTicket', Thrift.Type.STRING, 3);
    output.writeString(this.invitationTicket);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.memberMids));
    for (var kiter37 in this.memberMids) {
      if (this.memberMids.hasOwnProperty(kiter37)) {
        var viter38 = this.memberMids[kiter37];
        output.writeString(kiter37);
        output.writeI64(viter38);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.inviteeMids !== null && this.inviteeMids !== undefined) {
    output.writeFieldBegin('inviteeMids', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.inviteeMids));
    for (var kiter39 in this.inviteeMids) {
      if (this.inviteeMids.hasOwnProperty(kiter39)) {
        var viter40 = this.inviteeMids[kiter39];
        output.writeString(kiter39);
        output.writeI64(viter40);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetAllChatMidsRequest = function(args) {
  this.withMemberChats = null;
  this.withInvitedChats = null;
  if (args) {
    if (args.withMemberChats !== undefined && args.withMemberChats !== null) {
      this.withMemberChats = args.withMemberChats;
    }
    if (args.withInvitedChats !== undefined && args.withInvitedChats !== null) {
      this.withInvitedChats = args.withInvitedChats;
    }
  }
};
GetAllChatMidsRequest.prototype = {};
GetAllChatMidsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.withMemberChats = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withInvitedChats = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAllChatMidsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetAllChatMidsRequest');
  if (this.withMemberChats !== null && this.withMemberChats !== undefined) {
    output.writeFieldBegin('withMemberChats', Thrift.Type.BOOL, 1);
    output.writeBool(this.withMemberChats);
    output.writeFieldEnd();
  }
  if (this.withInvitedChats !== null && this.withInvitedChats !== undefined) {
    output.writeFieldBegin('withInvitedChats', Thrift.Type.BOOL, 2);
    output.writeBool(this.withInvitedChats);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetAllChatMidsResponse = function(args) {
  this.memberChatMids = null;
  this.invitedChatMids = null;
  if (args) {
    if (args.memberChatMids !== undefined && args.memberChatMids !== null) {
      this.memberChatMids = Thrift.copyList(args.memberChatMids, [null]);
    }
    if (args.invitedChatMids !== undefined && args.invitedChatMids !== null) {
      this.invitedChatMids = Thrift.copyList(args.invitedChatMids, [null]);
    }
  }
};
GetAllChatMidsResponse.prototype = {};
GetAllChatMidsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.memberChatMids = [];
        var _rtmp342 = input.readSetBegin();
        var _size41 = _rtmp342.size || 0;
        for (var _i43 = 0; _i43 < _size41; ++_i43) {
          var elem44 = null;
          elem44 = input.readString().value;
          this.memberChatMids.push(elem44);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.invitedChatMids = [];
        var _rtmp346 = input.readSetBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = input.readString().value;
          this.invitedChatMids.push(elem48);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAllChatMidsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetAllChatMidsResponse');
  if (this.memberChatMids !== null && this.memberChatMids !== undefined) {
    output.writeFieldBegin('memberChatMids', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.memberChatMids.length);
    for (var iter49 in this.memberChatMids) {
      if (this.memberChatMids.hasOwnProperty(iter49)) {
        iter49 = this.memberChatMids[iter49];
        output.writeString(iter49);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.invitedChatMids !== null && this.invitedChatMids !== undefined) {
    output.writeFieldBegin('invitedChatMids', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.invitedChatMids.length);
    for (var iter50 in this.invitedChatMids) {
      if (this.invitedChatMids.hasOwnProperty(iter50)) {
        iter50 = this.invitedChatMids[iter50];
        output.writeString(iter50);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetChatsRequest = function(args) {
  this.chatMids = null;
  this.withMembers = null;
  this.withInvitees = null;
  if (args) {
    if (args.chatMids !== undefined && args.chatMids !== null) {
      this.chatMids = Thrift.copyList(args.chatMids, [null]);
    }
    if (args.withMembers !== undefined && args.withMembers !== null) {
      this.withMembers = args.withMembers;
    }
    if (args.withInvitees !== undefined && args.withInvitees !== null) {
      this.withInvitees = args.withInvitees;
    }
  }
};
GetChatsRequest.prototype = {};
GetChatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.chatMids = [];
        var _rtmp352 = input.readListBegin();
        var _size51 = _rtmp352.size || 0;
        for (var _i53 = 0; _i53 < _size51; ++_i53) {
          var elem54 = null;
          elem54 = input.readString().value;
          this.chatMids.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withMembers = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withInvitees = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetChatsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetChatsRequest');
  if (this.chatMids !== null && this.chatMids !== undefined) {
    output.writeFieldBegin('chatMids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.chatMids.length);
    for (var iter55 in this.chatMids) {
      if (this.chatMids.hasOwnProperty(iter55)) {
        iter55 = this.chatMids[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.withMembers !== null && this.withMembers !== undefined) {
    output.writeFieldBegin('withMembers', Thrift.Type.BOOL, 2);
    output.writeBool(this.withMembers);
    output.writeFieldEnd();
  }
  if (this.withInvitees !== null && this.withInvitees !== undefined) {
    output.writeFieldBegin('withInvitees', Thrift.Type.BOOL, 3);
    output.writeBool(this.withInvitees);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetChatsResponse = function(args) {
  this.chats = null;
  if (args) {
    if (args.chats !== undefined && args.chats !== null) {
      this.chats = Thrift.copyList(args.chats, [Chat]);
    }
  }
};
GetChatsResponse.prototype = {};
GetChatsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.chats = [];
        var _rtmp357 = input.readListBegin();
        var _size56 = _rtmp357.size || 0;
        for (var _i58 = 0; _i58 < _size56; ++_i58) {
          var elem59 = null;
          elem59 = new Chat();
          elem59.read(input);
          this.chats.push(elem59);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetChatsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetChatsResponse');
  if (this.chats !== null && this.chats !== undefined) {
    output.writeFieldBegin('chats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.chats.length);
    for (var iter60 in this.chats) {
      if (this.chats.hasOwnProperty(iter60)) {
        iter60 = this.chats[iter60];
        iter60.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationAccuracy = function(args) {
  this.radiusMeters = null;
  this.radiusConfidence = null;
  this.altitudeAccuracy = null;
  this.velocityAccuracy = null;
  this.bearingAccuracy = null;
  this.accuracyMode = null;
  if (args) {
    if (args.radiusMeters !== undefined && args.radiusMeters !== null) {
      this.radiusMeters = args.radiusMeters;
    }
    if (args.radiusConfidence !== undefined && args.radiusConfidence !== null) {
      this.radiusConfidence = args.radiusConfidence;
    }
    if (args.altitudeAccuracy !== undefined && args.altitudeAccuracy !== null) {
      this.altitudeAccuracy = args.altitudeAccuracy;
    }
    if (args.velocityAccuracy !== undefined && args.velocityAccuracy !== null) {
      this.velocityAccuracy = args.velocityAccuracy;
    }
    if (args.bearingAccuracy !== undefined && args.bearingAccuracy !== null) {
      this.bearingAccuracy = args.bearingAccuracy;
    }
    if (args.accuracyMode !== undefined && args.accuracyMode !== null) {
      this.accuracyMode = args.accuracyMode;
    }
  }
};
GeolocationAccuracy.prototype = {};
GeolocationAccuracy.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radiusMeters = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radiusConfidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitudeAccuracy = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.velocityAccuracy = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.bearingAccuracy = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.accuracyMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationAccuracy.prototype.write = function(output) {
  output.writeStructBegin('GeolocationAccuracy');
  if (this.radiusMeters !== null && this.radiusMeters !== undefined) {
    output.writeFieldBegin('radiusMeters', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.radiusMeters);
    output.writeFieldEnd();
  }
  if (this.radiusConfidence !== null && this.radiusConfidence !== undefined) {
    output.writeFieldBegin('radiusConfidence', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.radiusConfidence);
    output.writeFieldEnd();
  }
  if (this.altitudeAccuracy !== null && this.altitudeAccuracy !== undefined) {
    output.writeFieldBegin('altitudeAccuracy', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.altitudeAccuracy);
    output.writeFieldEnd();
  }
  if (this.velocityAccuracy !== null && this.velocityAccuracy !== undefined) {
    output.writeFieldBegin('velocityAccuracy', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.velocityAccuracy);
    output.writeFieldEnd();
  }
  if (this.bearingAccuracy !== null && this.bearingAccuracy !== undefined) {
    output.writeFieldBegin('bearingAccuracy', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.bearingAccuracy);
    output.writeFieldEnd();
  }
  if (this.accuracyMode !== null && this.accuracyMode !== undefined) {
    output.writeFieldBegin('accuracyMode', Thrift.Type.I32, 6);
    output.writeI32(this.accuracyMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InviteIntoChatRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.targetUserMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
  }
};
InviteIntoChatRequest.prototype = {};
InviteIntoChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        this.targetUserMids = [];
        var _rtmp362 = input.readSetBegin();
        var _size61 = _rtmp362.size || 0;
        for (var _i63 = 0; _i63 < _size61; ++_i63) {
          var elem64 = null;
          elem64 = input.readString().value;
          this.targetUserMids.push(elem64);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteIntoChatRequest.prototype.write = function(output) {
  output.writeStructBegin('InviteIntoChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter65 in this.targetUserMids) {
      if (this.targetUserMids.hasOwnProperty(iter65)) {
        iter65 = this.targetUserMids[iter65];
        output.writeString(iter65);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InviteIntoChatResponse = function(args) {
};
InviteIntoChatResponse.prototype = {};
InviteIntoChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteIntoChatResponse.prototype.write = function(output) {
  output.writeStructBegin('InviteIntoChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Location = function(args) {
  this.title = null;
  this.address = null;
  this.latitude = null;
  this.longitude = null;
  this.phone = null;
  this.categoryId = null;
  this.provider = null;
  this.accuracy = null;
  this.altitudeMeters = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.accuracy !== undefined && args.accuracy !== null) {
      this.accuracy = new GeolocationAccuracy(args.accuracy);
    }
    if (args.altitudeMeters !== undefined && args.altitudeMeters !== null) {
      this.altitudeMeters = args.altitudeMeters;
    }
  }
};
Location.prototype = {};
Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.categoryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.accuracy = new GeolocationAccuracy();
        this.accuracy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitudeMeters = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 5);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.STRING, 6);
    output.writeString(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 7);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.accuracy !== null && this.accuracy !== undefined) {
    output.writeFieldBegin('accuracy', Thrift.Type.STRUCT, 8);
    this.accuracy.write(output);
    output.writeFieldEnd();
  }
  if (this.altitudeMeters !== null && this.altitudeMeters !== undefined) {
    output.writeFieldBegin('altitudeMeters', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.altitudeMeters);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Message = function(args) {
  this._from = null;
  this.to = null;
  this.toType = null;
  this.id = null;
  this.createdTime = null;
  this.deliveredTime = null;
  this.text = null;
  this.location = null;
  this.hasContent = null;
  this.contentType = null;
  this.contentMetadata = null;
  this.contentPreview = null;
  this.sessionId = null;
  this.chunks = null;
  this.relatedMessageId = null;
  this.messageRelationType = null;
  this.readCount = null;
  this.relatedMessageServiceCode = null;
  this.appExtensionType = null;
  if (args) {
    if (args._from !== undefined && args._from !== null) {
      this._from = args._from;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.toType !== undefined && args.toType !== null) {
      this.toType = args.toType;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
      this.deliveredTime = args.deliveredTime;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new Location(args.location);
    }
    if (args.hasContent !== undefined && args.hasContent !== null) {
      this.hasContent = args.hasContent;
    }
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
      this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
    }
    if (args.contentPreview !== undefined && args.contentPreview !== null) {
      this.contentPreview = args.contentPreview;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.chunks !== undefined && args.chunks !== null) {
      this.chunks = Thrift.copyList(args.chunks, [null]);
    }
    if (args.relatedMessageId !== undefined && args.relatedMessageId !== null) {
      this.relatedMessageId = args.relatedMessageId;
    }
    if (args.messageRelationType !== undefined && args.messageRelationType !== null) {
      this.messageRelationType = args.messageRelationType;
    }
    if (args.readCount !== undefined && args.readCount !== null) {
      this.readCount = args.readCount;
    }
    if (args.relatedMessageServiceCode !== undefined && args.relatedMessageServiceCode !== null) {
      this.relatedMessageServiceCode = args.relatedMessageServiceCode;
    }
    if (args.appExtensionType !== undefined && args.appExtensionType !== null) {
      this.appExtensionType = args.appExtensionType;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._from = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.toType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.deliveredTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.hasContent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.MAP) {
        this.contentMetadata = {};
        var _rtmp367 = input.readMapBegin();
        var _size66 = _rtmp367.size || 0;
        for (var _i68 = 0; _i68 < _size66; ++_i68) {
          if (_i68 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key69 = null;
          var val70 = null;
          key69 = input.readString().value;
          val70 = input.readString().value;
          this.contentMetadata[key69] = val70;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.contentPreview = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        this.chunks = [];
        var _rtmp372 = input.readListBegin();
        var _size71 = _rtmp372.size || 0;
        for (var _i73 = 0; _i73 < _size71; ++_i73) {
          var elem74 = null;
          elem74 = input.readBinary().value;
          this.chunks.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.relatedMessageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.messageRelationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.readCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.relatedMessageServiceCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.appExtensionType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this._from !== null && this._from !== undefined) {
    output.writeFieldBegin('_from', Thrift.Type.STRING, 1);
    output.writeString(this._from);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.toType !== null && this.toType !== undefined) {
    output.writeFieldBegin('toType', Thrift.Type.I32, 3);
    output.writeI32(this.toType);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.deliveredTime !== null && this.deliveredTime !== undefined) {
    output.writeFieldBegin('deliveredTime', Thrift.Type.I64, 6);
    output.writeI64(this.deliveredTime);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 10);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 11);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.hasContent !== null && this.hasContent !== undefined) {
    output.writeFieldBegin('hasContent', Thrift.Type.BOOL, 14);
    output.writeBool(this.hasContent);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 15);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
    output.writeFieldBegin('contentMetadata', Thrift.Type.MAP, 18);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contentMetadata));
    for (var kiter75 in this.contentMetadata) {
      if (this.contentMetadata.hasOwnProperty(kiter75)) {
        var viter76 = this.contentMetadata[kiter75];
        output.writeString(kiter75);
        output.writeString(viter76);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.contentPreview !== null && this.contentPreview !== undefined) {
    output.writeFieldBegin('contentPreview', Thrift.Type.STRING, 17);
    output.writeBinary(this.contentPreview);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 19);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.chunks !== null && this.chunks !== undefined) {
    output.writeFieldBegin('chunks', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRING, this.chunks.length);
    for (var iter77 in this.chunks) {
      if (this.chunks.hasOwnProperty(iter77)) {
        iter77 = this.chunks[iter77];
        output.writeBinary(iter77);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relatedMessageId !== null && this.relatedMessageId !== undefined) {
    output.writeFieldBegin('relatedMessageId', Thrift.Type.STRING, 21);
    output.writeString(this.relatedMessageId);
    output.writeFieldEnd();
  }
  if (this.messageRelationType !== null && this.messageRelationType !== undefined) {
    output.writeFieldBegin('messageRelationType', Thrift.Type.I32, 22);
    output.writeI32(this.messageRelationType);
    output.writeFieldEnd();
  }
  if (this.readCount !== null && this.readCount !== undefined) {
    output.writeFieldBegin('readCount', Thrift.Type.I32, 23);
    output.writeI32(this.readCount);
    output.writeFieldEnd();
  }
  if (this.relatedMessageServiceCode !== null && this.relatedMessageServiceCode !== undefined) {
    output.writeFieldBegin('relatedMessageServiceCode', Thrift.Type.I32, 24);
    output.writeI32(this.relatedMessageServiceCode);
    output.writeFieldEnd();
  }
  if (this.appExtensionType !== null && this.appExtensionType !== undefined) {
    output.writeFieldBegin('appExtensionType', Thrift.Type.I32, 25);
    output.writeI32(this.appExtensionType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Operation = function(args) {
  this.revision = null;
  this.createdTime = null;
  this.type = null;
  this.reqSeq = null;
  this.checksum = null;
  this.status = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  this.message = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.checksum !== undefined && args.checksum !== null) {
      this.checksum = args.checksum;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.param1 !== undefined && args.param1 !== null) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined && args.param2 !== null) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined && args.param3 !== null) {
      this.param3 = args.param3;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
Operation.prototype = {};
Operation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.checksum = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Operation.prototype.write = function(output) {
  output.writeStructBegin('Operation');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 4);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.checksum !== null && this.checksum !== undefined) {
    output.writeFieldBegin('checksum', Thrift.Type.STRING, 5);
    output.writeString(this.checksum);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 10);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 11);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 12);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 20);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Profile = function(args) {
  this.mid = null;
  this.userid = null;
  this.regionCode = null;
  this.phone = null;
  this.email = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.allowSearchByUserid = null;
  this.allowSearchByEmail = null;
  this.picturePath = null;
  this.musicProfile = null;
  this.videoProfile = null;
  this.statusMessageContentMetadata = null;
  this.avatarProfile = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
    if (args.regionCode !== undefined && args.regionCode !== null) {
      this.regionCode = args.regionCode;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.allowSearchByUserid !== undefined && args.allowSearchByUserid !== null) {
      this.allowSearchByUserid = args.allowSearchByUserid;
    }
    if (args.allowSearchByEmail !== undefined && args.allowSearchByEmail !== null) {
      this.allowSearchByEmail = args.allowSearchByEmail;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
    if (args.statusMessageContentMetadata !== undefined && args.statusMessageContentMetadata !== null) {
      this.statusMessageContentMetadata = Thrift.copyMap(args.statusMessageContentMetadata, [null]);
    }
    if (args.avatarProfile !== undefined && args.avatarProfile !== null) {
      this.avatarProfile = new AvatarProfile(args.avatarProfile);
    }
  }
};
Profile.prototype = {};
Profile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.regionCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByUserid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByEmail = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.MAP) {
        this.statusMessageContentMetadata = {};
        var _rtmp379 = input.readMapBegin();
        var _size78 = _rtmp379.size || 0;
        for (var _i80 = 0; _i80 < _size78; ++_i80) {
          if (_i80 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key81 = null;
          var val82 = null;
          key81 = input.readString().value;
          val82 = input.readString().value;
          this.statusMessageContentMetadata[key81] = val82;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRUCT) {
        this.avatarProfile = new AvatarProfile();
        this.avatarProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Profile.prototype.write = function(output) {
  output.writeStructBegin('Profile');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 3);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  if (this.regionCode !== null && this.regionCode !== undefined) {
    output.writeFieldBegin('regionCode', Thrift.Type.STRING, 12);
    output.writeString(this.regionCode);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 10);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 11);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 20);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 21);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 22);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 23);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 24);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.allowSearchByUserid !== null && this.allowSearchByUserid !== undefined) {
    output.writeFieldBegin('allowSearchByUserid', Thrift.Type.BOOL, 31);
    output.writeBool(this.allowSearchByUserid);
    output.writeFieldEnd();
  }
  if (this.allowSearchByEmail !== null && this.allowSearchByEmail !== undefined) {
    output.writeFieldBegin('allowSearchByEmail', Thrift.Type.BOOL, 32);
    output.writeBool(this.allowSearchByEmail);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 33);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 34);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 35);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  if (this.statusMessageContentMetadata !== null && this.statusMessageContentMetadata !== undefined) {
    output.writeFieldBegin('statusMessageContentMetadata', Thrift.Type.MAP, 36);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.statusMessageContentMetadata));
    for (var kiter83 in this.statusMessageContentMetadata) {
      if (this.statusMessageContentMetadata.hasOwnProperty(kiter83)) {
        var viter84 = this.statusMessageContentMetadata[kiter83];
        output.writeString(kiter83);
        output.writeString(viter84);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.avatarProfile !== null && this.avatarProfile !== undefined) {
    output.writeFieldBegin('avatarProfile', Thrift.Type.STRUCT, 37);
    this.avatarProfile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PeerExtra = function(args) {
};
PeerExtra.prototype = {};
PeerExtra.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeerExtra.prototype.write = function(output) {
  output.writeStructBegin('PeerExtra');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RejectChatInvitationRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
RejectChatInvitationRequest.prototype = {};
RejectChatInvitationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RejectChatInvitationRequest.prototype.write = function(output) {
  output.writeStructBegin('RejectChatInvitationRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RejectChatInvitationResponse = function(args) {
};
RejectChatInvitationResponse.prototype = {};
RejectChatInvitationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RejectChatInvitationResponse.prototype.write = function(output) {
  output.writeStructBegin('RejectChatInvitationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReissueChatTicketRequest = function(args) {
  this.reqSeq = null;
  this.groupMid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupMid !== undefined && args.groupMid !== null) {
      this.groupMid = args.groupMid;
    }
  }
};
ReissueChatTicketRequest.prototype = {};
ReissueChatTicketRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupMid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReissueChatTicketRequest.prototype.write = function(output) {
  output.writeStructBegin('ReissueChatTicketRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupMid !== null && this.groupMid !== undefined) {
    output.writeFieldBegin('groupMid', Thrift.Type.STRING, 2);
    output.writeString(this.groupMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReissueChatTicketResponse = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
ReissueChatTicketResponse.prototype = {};
ReissueChatTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReissueChatTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('ReissueChatTicketResponse');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 1);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateChatRequest = function(args) {
  this.reqSeq = null;
  this.chat = null;
  this.updatedAttribute = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new Chat(args.chat);
    }
    if (args.updatedAttribute !== undefined && args.updatedAttribute !== null) {
      this.updatedAttribute = args.updatedAttribute;
    }
  }
};
UpdateChatRequest.prototype = {};
UpdateChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new Chat();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updatedAttribute = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateChatRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 2);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  if (this.updatedAttribute !== null && this.updatedAttribute !== undefined) {
    output.writeFieldBegin('updatedAttribute', Thrift.Type.I32, 3);
    output.writeI32(this.updatedAttribute);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateChatResponse = function(args) {
};
UpdateChatResponse.prototype = {};
UpdateChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateChatResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TalkException = function(args) {
  this.code = null;
  this.reason = null;
  this.parameterMap = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
Thrift.inherits(TalkException, Thrift.TException);
TalkException.prototype.name = 'TalkException';
TalkException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.parameterMap = {};
        var _rtmp386 = input.readMapBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          if (_i87 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key88 = null;
          var val89 = null;
          key88 = input.readString().value;
          val89 = input.readString().value;
          this.parameterMap[key88] = val89;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkException.prototype.write = function(output) {
  output.writeStructBegin('TalkException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter90 in this.parameterMap) {
      if (this.parameterMap.hasOwnProperty(kiter90)) {
        var viter91 = this.parameterMap[kiter90];
        output.writeString(kiter90);
        output.writeString(viter91);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThingsException = function(args) {
  this.code = null;
  this.reason = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
Thrift.inherits(ThingsException, Thrift.TException);
ThingsException.prototype.name = 'ThingsException';
ThingsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThingsException.prototype.write = function(output) {
  output.writeStructBegin('ThingsException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

