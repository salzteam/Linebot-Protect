// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"beservice"
)

var _ = beservice.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  FetchOperationsResponse fetchOperations(FetchOperationsRequest request)")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string userid)")
  fmt.Fprintln(os.Stderr, "  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
  fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
  fmt.Fprintln(os.Stderr, "  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := beservice.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "acceptChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
      flag.Usage()
    }
    arg88 := flag.Arg(1)
    mbTrans89 := thrift.NewTMemoryBufferLen(len(arg88))
    defer mbTrans89.Close()
    _, err90 := mbTrans89.WriteString(arg88)
    if err90 != nil {
      Usage()
      return
    }
    factory91 := thrift.NewTJSONProtocolFactory()
    jsProt92 := factory91.GetProtocol(mbTrans89)
    argvalue0 := beservice.NewAcceptChatInvitationRequest()
    err93 := argvalue0.Read(jsProt92)
    if err93 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptChatInvitationByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitationByTicket requires 1 args")
      flag.Usage()
    }
    arg94 := flag.Arg(1)
    mbTrans95 := thrift.NewTMemoryBufferLen(len(arg94))
    defer mbTrans95.Close()
    _, err96 := mbTrans95.WriteString(arg94)
    if err96 != nil {
      Usage()
      return
    }
    factory97 := thrift.NewTJSONProtocolFactory()
    jsProt98 := factory97.GetProtocol(mbTrans95)
    argvalue0 := beservice.NewAcceptChatInvitationByTicketRequest()
    err99 := argvalue0.Read(jsProt98)
    if err99 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitationByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err100 := (strconv.Atoi(flag.Arg(1)))
    if err100 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cancelChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
      flag.Usage()
    }
    arg102 := flag.Arg(1)
    mbTrans103 := thrift.NewTMemoryBufferLen(len(arg102))
    defer mbTrans103.Close()
    _, err104 := mbTrans103.WriteString(arg102)
    if err104 != nil {
      Usage()
      return
    }
    factory105 := thrift.NewTJSONProtocolFactory()
    jsProt106 := factory105.GetProtocol(mbTrans103)
    argvalue0 := beservice.NewCancelChatInvitationRequest()
    err107 := argvalue0.Read(jsProt106)
    if err107 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
      flag.Usage()
    }
    arg108 := flag.Arg(1)
    mbTrans109 := thrift.NewTMemoryBufferLen(len(arg108))
    defer mbTrans109.Close()
    _, err110 := mbTrans109.WriteString(arg108)
    if err110 != nil {
      Usage()
      return
    }
    factory111 := thrift.NewTJSONProtocolFactory()
    jsProt112 := factory111.GetProtocol(mbTrans109)
    argvalue0 := beservice.NewCreateChatRequest()
    err113 := argvalue0.Read(jsProt112)
    if err113 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteSelfFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
      flag.Usage()
    }
    arg114 := flag.Arg(1)
    mbTrans115 := thrift.NewTMemoryBufferLen(len(arg114))
    defer mbTrans115.Close()
    _, err116 := mbTrans115.WriteString(arg114)
    if err116 != nil {
      Usage()
      return
    }
    factory117 := thrift.NewTJSONProtocolFactory()
    jsProt118 := factory117.GetProtocol(mbTrans115)
    argvalue0 := beservice.NewDeleteSelfFromChatRequest()
    err119 := argvalue0.Read(jsProt118)
    if err119 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteOtherFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
      flag.Usage()
    }
    arg120 := flag.Arg(1)
    mbTrans121 := thrift.NewTMemoryBufferLen(len(arg120))
    defer mbTrans121.Close()
    _, err122 := mbTrans121.WriteString(arg120)
    if err122 != nil {
      Usage()
      return
    }
    factory123 := thrift.NewTJSONProtocolFactory()
    jsProt124 := factory123.GetProtocol(mbTrans121)
    argvalue0 := beservice.NewDeleteOtherFromChatRequest()
    err125 := argvalue0.Read(jsProt124)
    if err125 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchOperations":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchOperations requires 1 args")
      flag.Usage()
    }
    arg126 := flag.Arg(1)
    mbTrans127 := thrift.NewTMemoryBufferLen(len(arg126))
    defer mbTrans127.Close()
    _, err128 := mbTrans127.WriteString(arg126)
    if err128 != nil {
      Usage()
      return
    }
    factory129 := thrift.NewTJSONProtocolFactory()
    jsProt130 := factory129.GetProtocol(mbTrans127)
    argvalue0 := beservice.NewFetchOperationsRequest()
    err131 := argvalue0.Read(jsProt130)
    if err131 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FetchOperations(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err132 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err132 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err133 := (strconv.Atoi(flag.Arg(2)))
    if err133 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err134 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err134 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err135 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err135 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err136 := (strconv.Atoi(flag.Arg(1)))
    if err136 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := beservice.ContactType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 3 args")
      flag.Usage()
    }
    tmp0, err139 := (strconv.Atoi(flag.Arg(1)))
    if err139 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findChatByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindChatByTicket requires 1 args")
      flag.Usage()
    }
    arg143 := flag.Arg(1)
    mbTrans144 := thrift.NewTMemoryBufferLen(len(arg143))
    defer mbTrans144.Close()
    _, err145 := mbTrans144.WriteString(arg143)
    if err145 != nil {
      Usage()
      return
    }
    factory146 := thrift.NewTJSONProtocolFactory()
    jsProt147 := factory146.GetProtocol(mbTrans144)
    argvalue0 := beservice.NewFindChatByTicketRequest()
    err148 := argvalue0.Read(jsProt147)
    if err148 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindChatByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllChatMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
      flag.Usage()
    }
    arg149 := flag.Arg(1)
    mbTrans150 := thrift.NewTMemoryBufferLen(len(arg149))
    defer mbTrans150.Close()
    _, err151 := mbTrans150.WriteString(arg149)
    if err151 != nil {
      Usage()
      return
    }
    factory152 := thrift.NewTJSONProtocolFactory()
    jsProt153 := factory152.GetProtocol(mbTrans150)
    argvalue0 := beservice.NewGetAllChatMidsRequest()
    err154 := argvalue0.Read(jsProt153)
    if err154 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := beservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := beservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCountryWithRequestIp":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCountryWithRequestIp(context.Background()))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg156 := flag.Arg(1)
    mbTrans157 := thrift.NewTMemoryBufferLen(len(arg156))
    defer mbTrans157.Close()
    _, err158 := mbTrans157.WriteString(arg156)
    if err158 != nil { 
      Usage()
      return
    }
    factory159 := thrift.NewTJSONProtocolFactory()
    jsProt160 := factory159.GetProtocol(mbTrans157)
    containerStruct0 := beservice.NewTalkServiceGetContactsArgs()
    err161 := containerStruct0.ReadField1(jsProt160)
    if err161 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := beservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetAllContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
      flag.Usage()
    }
    arg162 := flag.Arg(1)
    mbTrans163 := thrift.NewTMemoryBufferLen(len(arg162))
    defer mbTrans163.Close()
    _, err164 := mbTrans163.WriteString(arg162)
    if err164 != nil {
      Usage()
      return
    }
    factory165 := thrift.NewTJSONProtocolFactory()
    jsProt166 := factory165.GetProtocol(mbTrans163)
    argvalue0 := beservice.NewGetChatsRequest()
    err167 := argvalue0.Read(jsProt166)
    if err167 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetChats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
      flag.Usage()
    }
    arg168 := flag.Arg(1)
    mbTrans169 := thrift.NewTMemoryBufferLen(len(arg168))
    defer mbTrans169.Close()
    _, err170 := mbTrans169.WriteString(arg168)
    if err170 != nil {
      Usage()
      return
    }
    factory171 := thrift.NewTJSONProtocolFactory()
    jsProt172 := factory171.GetProtocol(mbTrans169)
    argvalue0 := beservice.NewInviteIntoChatRequest()
    err173 := argvalue0.Read(jsProt172)
    if err173 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InviteIntoChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reissueChatTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueChatTicket requires 1 args")
      flag.Usage()
    }
    arg174 := flag.Arg(1)
    mbTrans175 := thrift.NewTMemoryBufferLen(len(arg174))
    defer mbTrans175.Close()
    _, err176 := mbTrans175.WriteString(arg174)
    if err176 != nil {
      Usage()
      return
    }
    factory177 := thrift.NewTJSONProtocolFactory()
    jsProt178 := factory177.GetProtocol(mbTrans175)
    argvalue0 := beservice.NewReissueChatTicketRequest()
    err179 := argvalue0.Read(jsProt178)
    if err179 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReissueChatTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
      flag.Usage()
    }
    arg180 := flag.Arg(1)
    mbTrans181 := thrift.NewTMemoryBufferLen(len(arg180))
    defer mbTrans181.Close()
    _, err182 := mbTrans181.WriteString(arg180)
    if err182 != nil {
      Usage()
      return
    }
    factory183 := thrift.NewTJSONProtocolFactory()
    jsProt184 := factory183.GetProtocol(mbTrans181)
    argvalue0 := beservice.NewRejectChatInvitationRequest()
    err185 := argvalue0.Read(jsProt184)
    if err185 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RejectChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err186 := (strconv.Atoi(flag.Arg(1)))
    if err186 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg187 := flag.Arg(2)
    mbTrans188 := thrift.NewTMemoryBufferLen(len(arg187))
    defer mbTrans188.Close()
    _, err189 := mbTrans188.WriteString(arg187)
    if err189 != nil {
      Usage()
      return
    }
    factory190 := thrift.NewTJSONProtocolFactory()
    jsProt191 := factory190.GetProtocol(mbTrans188)
    argvalue1 := beservice.NewMessage()
    err192 := argvalue1.Read(jsProt191)
    if err192 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err193 := (strconv.Atoi(flag.Arg(1)))
    if err193 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
      flag.Usage()
    }
    arg195 := flag.Arg(1)
    mbTrans196 := thrift.NewTMemoryBufferLen(len(arg195))
    defer mbTrans196.Close()
    _, err197 := mbTrans196.WriteString(arg195)
    if err197 != nil {
      Usage()
      return
    }
    factory198 := thrift.NewTJSONProtocolFactory()
    jsProt199 := factory198.GetProtocol(mbTrans196)
    argvalue0 := beservice.NewUpdateChatRequest()
    err200 := argvalue0.Read(jsProt199)
    if err200 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err201 := (strconv.Atoi(flag.Arg(1)))
    if err201 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := beservice.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
